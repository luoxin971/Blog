<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xin</title>
  
  <subtitle>Man propose, god disposes.</subtitle>
  <link href="https://blog.luoxin.vip/atom.xml" rel="self"/>
  
  <link href="https://blog.luoxin.vip/"/>
  <updated>2022-08-09T23:43:55.000Z</updated>
  <id>https://blog.luoxin.vip/</id>
  
  <author>
    <name>xin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从hexo博客自动部署到githubAction</title>
    <link href="https://blog.luoxin.vip/posts/88163c28/"/>
    <id>https://blog.luoxin.vip/posts/88163c28/</id>
    <published>2022-08-09T23:43:55.000Z</published>
    <updated>2022-08-09T23:43:55.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近重新把 hexo 博客倒腾了一下，完成了自动部署，其中了解到了 git submodule 以及 github action，在此记录一下。</p></blockquote><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>很久没有写博客了，今天一时兴起想重新倒腾一下，但是看到 hexo 博客里源文件的内容实在是太乱了，对用户有用的地方基本只有 source 里的 markdown 文件了。于是想着是否可以将文章内容与其它源文件分开，以及实现 CICD 自动部署？</p><h2 id="期待效果"><a href="#期待效果" class="headerlink" title="期待效果"></a>期待效果</h2><ol><li>为博客源文件中的 <code>source</code> 文件夹单独创建一个 git 项目</li><li>写完文章（更新博客内容）后，不用执行 <code>hexo g</code>, <code>hexo d</code> 等命令，直接自动化部署，更新博客页面</li></ol><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>分析完上述两点需求后，显然需要先了解这两个概念。</p><h3 id="git-submodule"><a href="#git-submodule" class="headerlink" title="git submodule"></a><a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97">git submodule</a></h3><p><code>submodule</code> 就是在一个 git repo 里还有另外一个 git 项目。其实跟普通的 git 项目没有太大的区别，就只是会涉及到主项目与子项目的同步问题，以及需要掌握一些基本的 <code>git submodule</code> 命令。</p><blockquote><p>  感觉这个 <code>submodule</code> 平常使用还是比较少，笔者只是为了看起来简洁一点，来单独维护一些 markdown 文件</p></blockquote><h3 id="github-action"><a href="#github-action" class="headerlink" title="github action"></a><a href="https://docs.github.com/cn/actions">github action</a></h3><p>官方解释为：在 GitHub Actions 的仓库中自动化、自定义和执行软件开发工作流程。个人理解就是在一个 git 项目中，在一定满足一定预先设置的触发条件后，执行自定义的操作，workflow。</p><h2 id="动手干-——-自动-CI-x2F-CD"><a href="#动手干-——-自动-CI-x2F-CD" class="headerlink" title="动手干 —— 自动 CI/CD"></a>动手干 —— 自动 CI/CD</h2><p>在此之前我们先区分一下几个 repo</p><ol><li><p>第一个 repo 本文称为 github page repo，也就是名字为 <code>用户名.github.io</code> 的 git 仓库</p><img src="..\resources\github_action\image-20220808213555595.png" alt="image-20220808213555595" style="zoom:33%;"></li><li><p>第二个 repo 本文称为 source repo，即一开始用 <code>hexo init</code> 命令创建的 repo，存放的博客的代码</p><img src="..\resources\github_action\image-20220808213648707.png" alt="image-20220808213648707" style="zoom:33%;"></li><li><p>第三个 repo 本文称为 content repo，这个 repo 就是前文说的将 markdown 文件单独存放的 repo，即 souce repo 的 source 文件夹</p><img src="..\resources\github_action\image-20220808213727057.png" alt="image-20220808213727057" style="zoom:33%;"></li></ol><p>其实实现自动化部署的具体的方法已经有人把<a href="https://github.com/marketplace/actions/hexo-action">轮子</a>造好了。</p><p>简单介绍如下：</p><ol><li><p>生成 ssh 私钥、公钥</p></li><li><p>将 github page 这个 repo 的 <code>Deploy keys</code> 设置为上述生成的公钥，名字设为 <code>DEPLOY_KEY</code>（其实可以任取，但是要记住，要与后面文件里的<code>${{ secrets.DEPLOY_KEY }}</code> 保持一致）<br><img src="..\resources\github_action\image-20220808212249630.png" alt="image-20220808212249630" style="zoom:50%;"></p></li><li><p>配置 source repo 里的 workflow，创建 <code>yml</code> 文件，具体指令如下，在 source repo 根目录下</p><pre class="line-numbers language-none"><code class="language-none">mkdir .githubcd .githubmkdir workflowsvim deploy.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>deploy.yml</code> 内容可以 copy 这里 <a href="https://github.com/marketplace/actions/hexo-action#example-workflow---hexo-deploy">hexo-deploy</a> 文件具体路径如下</p><pre class="line-numbers language-none"><code class="language-none">.github└── workflows    └── deploy.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>如此就全部完成了，每次我们更新 source repo，就会自动更新 github page repo，并发布至博客。其它细节可继续查看<a href="https://github.com/marketplace/actions/hexo-action">轮子</a>里的内容</p></li></ol><h2 id="还没完-——-创建-submodule"><a href="#还没完-——-创建-submodule" class="headerlink" title="还没完 —— 创建 submodule"></a>还没完 —— 创建 submodule</h2><p>前面有说到我们还要创建一个子项目，专门维护 <code>source</code> 文件夹</p><p>基本思路就是，</p><ol><li><p>在 github 上新建一个 repo，记下仓库地址，我们以 content-url 表示</p></li><li><p>在 <code>source</code> 文件夹下，<code>init</code> 一个 git repo，提交已有内容，与远程仓库绑定</p></li></ol><pre><code><pre class="line-numbers language-none"><code class="language-none">cd ./sourcegit initgit remote add origin {content-url}记得替换git commit -am "[feat]init"git push -f origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><ol start="2"><li><p>在 source repo 下把 <code>source</code> 文件夹删除</p><pre class="line-numbers language-none"><code class="language-none">cd ..rm -rf ./source<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>最后重新添加 sbumodule</p><pre class="line-numbers language-none"><code class="language-none">git submodule add {content-url}记得替换 source<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>至此大功告成！此后就可以以一个普通 git 项目维护 source 里的内容了，至于 source repo，只需要执行 <code>git submodule update --remote</code> 即可更新所依赖的 content repo 的内容</p></li></ol><h2 id="还还没完-——-自动更新-submodule"><a href="#还还没完-——-自动更新-submodule" class="headerlink" title="还还没完 —— 自动更新 submodule"></a>还还没完 —— 自动更新 submodule</h2><p>上文说到，可以像一个普通 git 项目一样维护 content repo，但是对于 source repo 并不会自动更新内容，还需要执行 <code>git submodule update --remote</code> 才可以。显然并未达到本文一开始所期待的那样完全自动化。</p><p>于是我继续 google ”submodule自动更新“，找了半天也没有发现现成的轮子，找到了另外一个轮子 <a href="https://github.com/releasehub-com/github-action-create-pr-parent-submodule">GitHub Action: Creates Pull Request when Submodules are Updated</a>，根据介绍了解到，这个 GitHub Action 的作用是在 submodule 有更新的时候，自动在主项目上创建分支，并提交 pr。</p><p>想想，一开始我们需要执行命令更新 submodule，接着要在 source repo 中 push 提交新内容，有些繁琐，但是如果上述 repo 能自动提交 pr，那我们只需要点击一下 merge 按钮就可以了，也算是简化了流程。</p><ol><li>依照上述过程，在 content repo 里新建 .github/workflows/submodule_update.yml 文件，内容如下：</li></ol><pre><code><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token key atrule">name</span><span class="token punctuation">:</span> Submodule Updates<span class="token comment">#############################</span><span class="token comment"># Start the job on all push #</span><span class="token comment">#############################</span><span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">branches-ignore</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>master<span class="token punctuation">,</span> main<span class="token punctuation">]</span>  <span class="token key atrule">pull_request</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>master<span class="token punctuation">,</span> main<span class="token punctuation">]</span><span class="token comment">###############</span><span class="token comment"># Set the Job #</span><span class="token comment">###############</span><span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">build</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> Submodule update    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">env</span><span class="token punctuation">:</span>      <span class="token key atrule">PARENT_REPOSITORY</span><span class="token punctuation">:</span> <span class="token string">'org/example-repository'</span>      <span class="token key atrule">CHECKOUT_BRANCH</span><span class="token punctuation">:</span> <span class="token string">'main'</span>      <span class="token key atrule">PR_AGAINST_BRANCH</span><span class="token punctuation">:</span> <span class="token string">'main'</span>      <span class="token key atrule">OWNER</span><span class="token punctuation">:</span> <span class="token string">'org'</span>    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token comment">##########################</span>      <span class="token comment"># Checkout the code base #</span>      <span class="token comment">##########################</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout Code        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2      <span class="token comment">####################################</span>      <span class="token comment"># Run the action against code base #</span>      <span class="token comment">####################################</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> run action        <span class="token key atrule">id</span><span class="token punctuation">:</span> run_action        <span class="token key atrule">uses</span><span class="token punctuation">:</span> releasehub<span class="token punctuation">-</span>com/github<span class="token punctuation">-</span>action<span class="token punctuation">-</span>create<span class="token punctuation">-</span>pr<span class="token punctuation">-</span>parent<span class="token punctuation">-</span>submodule@v1        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">github_token</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.RELEASE_HUB_SECRET <span class="token punctuation">}</span><span class="token punctuation">}</span>          <span class="token key atrule">parent_repository</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> env.PARENT_REPOSITORY <span class="token punctuation">}</span><span class="token punctuation">}</span>          <span class="token key atrule">checkout_branch</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> env.CHECKOUT_BRANCH<span class="token punctuation">}</span><span class="token punctuation">}</span>          <span class="token key atrule">pr_against_branch</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> env.PR_AGAINST_BRANCH <span class="token punctuation">}</span><span class="token punctuation">}</span>          <span class="token key atrule">owner</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> env.OWNER <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>记得替换 `PARENT_REPOSITORY` 后的值，其它的变量也可以依据自己的情况自行调整。</code></pre><ol start="2"><li><p>仔细思考，我们现在是在 content repo 里，而想要的是在 source repo 里自动创建 pr，显然我们需要让 github action有访问 source repo 的权限。也就对应了 yml 文件中这一行的内容</p><pre class="line-numbers language-none"><code class="language-none">github_token: ${{ secrets.RELEASE_HUB_SECRET }}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以我们要先创建一个 github token 给予权限，具体可参考 <a href="https://docs.github.com/cn/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token">Creating a personal access token</a>，给予足够权限后，copy 这个 token</p></li><li><p>在拿到 token 之后，我们需要把这个 token 让 github action 也能够找到，所以在 content repo 下<br><img src="/..%5Cresources%5Cgithub_action%5Cimage-20220809223102803.png" alt="image-20220809223102803"><br>记得我这里的 <code>PARENT_TOKEN</code> 名字是我自己取的，要与前面变量名保持一致，如果是直接复制前面的yml文件话，则需要命名为 <code>RELEASE_HUB_SECRET</code> </p></li><li><p>以上，设置完毕</p></li></ol><h2 id="还还还没完，保证是最后一步！！"><a href="#还还还没完，保证是最后一步！！" class="headerlink" title="还还还没完，保证是最后一步！！"></a>还还还没完，保证是最后一步！！</h2><p>上述我们已经完成了自动创建 pr，但其实离完全自动化还是有些差距！！！我们是否可以想办法让 pr 自动 merge ！！！我又双叒找来了一个轮子 <a href="https://github.com/pascalgn/automerge-action">automerge-action</a>，看名字就知道是自动 merge 了。又是老样子，在 source repo 下新建 <code>.github/workflows/automerge.yml</code> 文件。</p><p>内容为：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> automerge<span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">pull_request</span><span class="token punctuation">:</span>    <span class="token key atrule">types</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> labeled      <span class="token punctuation">-</span> unlabeled      <span class="token punctuation">-</span> synchronize      <span class="token punctuation">-</span> opened      <span class="token punctuation">-</span> edited      <span class="token punctuation">-</span> ready_for_review      <span class="token punctuation">-</span> reopened      <span class="token punctuation">-</span> unlocked  <span class="token key atrule">pull_request_review</span><span class="token punctuation">:</span>    <span class="token key atrule">types</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> submitted  <span class="token key atrule">check_suite</span><span class="token punctuation">:</span>    <span class="token key atrule">types</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> completed  <span class="token key atrule">status</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">automerge</span><span class="token punctuation">:</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> automerge        <span class="token key atrule">name</span><span class="token punctuation">:</span> automerge        <span class="token key atrule">uses</span><span class="token punctuation">:</span> <span class="token string">"pascalgn/automerge-action@v0.15.3"</span>        <span class="token key atrule">env</span><span class="token punctuation">:</span>          <span class="token key atrule">GITHUB_TOKEN</span><span class="token punctuation">:</span> <span class="token string">"${{ secrets.GITHUB_TOKEN }}"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时注意了，又出现这个 token 了，显然重复上面的操作，新建 secret，命名为 <code>GITHUB_TOKEN</code></p><p>此时提交代码后会发现，哪怕产生了 pr，也不会自动合并，为此笔者烦恼许久。后来根据文档 <a href="https://github.com/pascalgn/automerge-action#:~:text=When%20added%2C%20this%20action%20will%20run%20the%20following%20tasks%20on%20pull%20requests%20with%20the%20automerge%20label%3A">automerge-action</a> 才知道，需要 pr 又 automerge 的 label 才行。</p><p>我们再次回到前面一个 GitHub Action <a href="https://github.com/releasehub-com/github-action-create-pr-parent-submodule/blob/main/action.yml">github-action-create-pr-parent-submodule</a>，根据 <code>action.yml</code> 显示</p><p><img src="/..%5Cresources%5Cgithub_action%5Cimage-20220809225831991.png" alt="image-20220809225831991"></p><p>label 默认值为 “Create Release Environment”，由此我们考虑重新修改 content repo 里的 <code>submodule_update.yml</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token key atrule">name</span><span class="token punctuation">:</span> Submodule Updates<span class="token comment">#############################</span><span class="token comment"># Start the job on all push #</span><span class="token comment">#############################</span><span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">branches-ignore</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>master<span class="token punctuation">,</span> main<span class="token punctuation">]</span>  <span class="token key atrule">pull_request</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>master<span class="token punctuation">,</span> main<span class="token punctuation">]</span><span class="token comment">###############</span><span class="token comment"># Set the Job #</span><span class="token comment">###############</span><span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">build</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> Submodule update    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">env</span><span class="token punctuation">:</span>      <span class="token key atrule">PARENT_REPOSITORY</span><span class="token punctuation">:</span> <span class="token string">'org/example-repository'</span>      <span class="token key atrule">CHECKOUT_BRANCH</span><span class="token punctuation">:</span> <span class="token string">'main'</span>      <span class="token key atrule">PR_AGAINST_BRANCH</span><span class="token punctuation">:</span> <span class="token string">'main'</span>      <span class="token key atrule">OWNER</span><span class="token punctuation">:</span> <span class="token string">'org'</span>      <span class="token key atrule">LABEL</span><span class="token punctuation">:</span> <span class="token string">'automerge'</span>    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token comment">##########################</span>      <span class="token comment"># Checkout the code base #</span>      <span class="token comment">##########################</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout Code        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2      <span class="token comment">####################################</span>      <span class="token comment"># Run the action against code base #</span>      <span class="token comment">####################################</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> run action        <span class="token key atrule">id</span><span class="token punctuation">:</span> run_action        <span class="token key atrule">uses</span><span class="token punctuation">:</span> releasehub<span class="token punctuation">-</span>com/github<span class="token punctuation">-</span>action<span class="token punctuation">-</span>create<span class="token punctuation">-</span>pr<span class="token punctuation">-</span>parent<span class="token punctuation">-</span>submodule@v1        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">github_token</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.RELEASE_HUB_SECRET <span class="token punctuation">}</span><span class="token punctuation">}</span>          <span class="token key atrule">parent_repository</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> env.PARENT_REPOSITORY <span class="token punctuation">}</span><span class="token punctuation">}</span>          <span class="token key atrule">checkout_branch</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> env.CHECKOUT_BRANCH<span class="token punctuation">}</span><span class="token punctuation">}</span>          <span class="token key atrule">pr_against_branch</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> env.PR_AGAINST_BRANCH <span class="token punctuation">}</span><span class="token punctuation">}</span>          <span class="token key atrule">owner</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> env.OWNER <span class="token punctuation">}</span><span class="token punctuation">}</span>          <span class="token key atrule">label</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> env.LABEL <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要就是新增了 label 相关的值。</p><p>至此，真真真真的大功告成了！笔者之前对 GitHub Action 不甚了解，这次借此机会也算了略微了解了一下，更全面的可以在 <a href="https://docs.github.com/cn/actions/learn-github-actions/understanding-github-actions">了解 GitHub Actions</a> 里熟悉到，不算太复杂。</p><p>此外，其实 source repo 里的 theme 一般也是引用的其它 git repo，也可以自己 fork 一下，作为 submodule 单独管理。</p><div class="note icon custom iconfont icon-QQ2" style="background: #fdf8ea;border-left-color: #f0ad4e;">  <p><b>TODO</b> 虽然以 pr 的形式提交更改，比较符合流程，但是还是希望自己可以一个 GitHub Action 来实现单步自动更新项目，也就是免掉提交 pr，合并 pr 的过程。</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;最近重新把 hexo 博客倒腾了一下，完成了自动部署，其中了解到了 git submodule 以及 github action，在此记录一下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;</summary>
      
    
    
    
    <category term="工具" scheme="https://blog.luoxin.vip/categories/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="教程" scheme="https://blog.luoxin.vip/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="GitHub Action" scheme="https://blog.luoxin.vip/tags/GitHub-Action/"/>
    
    <category term="git submodule" scheme="https://blog.luoxin.vip/tags/git-submodule/"/>
    
  </entry>
  
  <entry>
    <title>SSH 使用</title>
    <link href="https://blog.luoxin.vip/posts/2393743702/"/>
    <id>https://blog.luoxin.vip/posts/2393743702/</id>
    <published>2021-10-09T22:02:55.000Z</published>
    <updated>2021-10-10T09:26:55.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>  之前在 git 里面有使用过 ssh，但一直不知道其中的缘故，只是单纯地遵循教程，照葫芦画瓢，最近新买了一个 vps，又用到了 ssh，于是今天决定整理一下。</p></blockquote><h2 id="SSH-简介"><a href="#SSH-简介" class="headerlink" title="SSH 简介"></a><a href="https://zh.wikipedia.org/wiki/Secure_Shell">SSH 简介</a></h2><p>ssh 是加密的网络传输协议，最常见的用途是远程登陆系统。</p><blockquote><p>  好奇：ssh 是在哪一层 OSI 网络结构，应用层吗？</p></blockquote><h2 id="命令详解"><a href="#命令详解" class="headerlink" title="命令详解"></a>命令详解</h2><p>目前笔者接触到的命令有三个：<code>ssh-keygen</code>, <code>ssh</code>, <code>ssh-copy-id</code></p><p>现在来一一说明</p><h3 id="ssh-keygen"><a href="#ssh-keygen" class="headerlink" title="ssh-keygen"></a><code>ssh-keygen</code></h3><p>OpenSSH authentication key utility</p><p>用于生成 ssh key 的</p><p>笔者一开始接触 ssh 是在 <a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">github 配置 ssh</a> 里面：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ssh-keygen -t ed25519 -C <span class="token string">"your_email@example.com"</span> -f ~/.ssh/ed25519_id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>ssh-keygen</code> 主要有三个选项 <code>-t</code>, <code>-C</code>, <code>-f</code></p><table><thead><tr><th>Options</th><th>Description</th></tr></thead><tbody><tr><td>-t</td><td>type，主要有<code>dsa</code>, <code>ecdsa</code>, <code>ecdsa-sk</code>, <code>rsa</code>, <code>ed25519</code>, <code>ed25519-sk</code>，一般优先使用 <code>ed25519</code>，其次 <code>rsa</code></td></tr><tr><td>-C</td><td>comment，注意是大写</td></tr><tr><td>-f</td><td>指定文件路径，如果不加该选项，后续也会让输入路径的</td></tr></tbody></table><p>执行上述命令后，会让你输入 <code>phraseKey</code>，最后就会在 <code>~/.ssh</code> 里生成一个名为 <code>ed25519_id</code> 以及 <code>ed25519_id.pub</code> 的文件 </p><h3 id="ssh-及配置文件"><a href="#ssh-及配置文件" class="headerlink" title="ssh 及配置文件"></a><code>ssh</code> 及配置文件</h3><p>OpenSSH remote login client</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ssh</span> root@1.2.3.4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个命令没什么特别需要说明的，主要用法就是这个了，现在看看配置文件。</p><blockquote><p>  主要参考 <a href="https://linuxize.com/post/using-the-ssh-config-file/">Using the SSH Config File</a></p></blockquote><p>如果需要 <code>config</code> 文件，一般是要自己在 <code>~/.ssh</code> 里新建一个的</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">touch</span> ~/.ssh/config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>config</code> 文件格式如下</p><pre class="line-numbers language-none"><code class="language-none">Host japan    HostName 45.76.219.37    User root    IdentityFile ~/.ssh/debian_idHost github.com    HostName github.com    IdentityFile ~/.ssh/id_rsa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>缩进只是为了可读性，并不是必须的，同时 config 文件忽略 <code>Host</code>, <code>HostName</code> 等的大小写。</p><p><code>Host</code> 支持通配符，同时一个地址支持匹配多个 Host，按顺序最先匹配到的 option 具有最高优先级。具体可见 <a href="https://linuxize.com/post/using-the-ssh-config-file/">Using the SSH Config File</a></p><p>如上我们配置了两个 <code>Host</code>，于是我们接下来就可以这么使用了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ssh</span> japan// 等同于 <span class="token function">ssh</span> root@45.76.219.37<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接着输入远程服务器的密码就可以了。如果希望每次登陆的时候不用输入远端的密码，可以参考后面的 <a href="#ssh-copy-id"><code>ssh-copy-id</code></a></p><p>再来说一下 git，config 在 git 中具体使用场景就是配置多个 git 用户，如果想要在电脑上同时使用公司以及个人的git账号就可以</p><pre class="line-numbers language-none"><code class="language-none"># giteeHost gitee.com    HostName gitee.com    PreferredAuthentications publickey    IdentityFile ~/.ssh/gitee_id    # githubHost github.com    HostName github.com    PreferredAuthentications publickey    IdentityFile ~/.ssh/github_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果公司和个人的账户都需要使用同一个网站，比如 <code>github.com</code>, 则可以</p><pre class="line-numbers language-none"><code class="language-none"># personhost github.com    HostName github.com    IdentityFile ~/.ssh/id_rsa# companyhost github_company.com    HostName github.com    IdentityFile ~/.ssh/debian_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在使用中就可以</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// person$ <span class="token function">git</span> clone git@github.com:luoxin971/Study-notes.git// company$ <span class="token function">git</span> clone git@github_company.com:luoxin971/Study-notes.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ssh-copy-id"><a href="#ssh-copy-id" class="headerlink" title="ssh-copy-id"></a><span id="ssh-copy-id"><code>ssh-copy-id</code></span></h3><p>主要就是在用 ssh 登录的时候，将公钥放到远程服务器上，免去每次都要输入远端密码的问题。</p><blockquote><p>  主要参考 <a href="https://linuxize.com/post/how-to-setup-passwordless-ssh-login/">How to Setup Passwordless SSH Login</a></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ssh-copy-id root@1.2.3.4// 如果之前在 config 里面配置了 Host 等，还可以$ ssh-copy-id japan<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>-i</code> 选项可以指定私钥文件</p><p>接着输入服务器密码，之后服务器 <code>~/.ssh</code> 下会有一个 <code>authorized_keys</code> 的文件（如下），记录着刚刚指定的私钥所对应的公钥</p><pre class="line-numbers language-none"><code class="language-none">ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAcXwTy8Bda+vmtmpFS2cuySYFnMBQnea6uFUrLwctRb root@debian<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后每次登录远程服务器就只需要</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ssh</span> japan<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后输入 <code>phraseKey</code> 即可，如果之前设置 <code>phraseKey</code> 为空，则就无需任何密码了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;  之前在 git 里面有使用过 ssh，但一直不知道其中的缘故，只是单纯地遵循教程，照葫芦画瓢，最近新买了一个 vps，又用到了 ssh，于是今天决定整理一下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;SSH-简介&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="Linux" scheme="https://blog.luoxin.vip/categories/Linux/"/>
    
    
    <category term="SSH" scheme="https://blog.luoxin.vip/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>Git 进阶使用</title>
    <link href="https://blog.luoxin.vip/posts/2552719298/"/>
    <id>https://blog.luoxin.vip/posts/2552719298/</id>
    <published>2021-06-27T20:29:55.000Z</published>
    <updated>2021-07-07T22:04:55.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note icon custom iconfont icon-QQ2" style="background: #eff8f0;border-left-color: #5cb85c;">  <p>该篇文章是 Git 的一些进阶使用，更为常见的配置使用可查阅 <a href="https://luoxin.vip/posts/2608075722/">Git 命令基本使用</a></p></div><div class="note icon custom iconfont icon-QQ2" style="background: #f5f0fa;border-left-color: #6f42c1;">  <p>虽然题目为进阶使用，但其实以下内容掌握之后，才能真正在实际使用中游刃有余，因为很难预料工作中会碰到什么问题。<br> 文章主要分为以下几个内容：<a href="#分支管理">分支管理</a>&nbsp;·&nbsp;<a href="#commit相关">commit 相关</a>&nbsp;·&nbsp;<a href="#撤销更改">撤销更改</a>&nbsp;·&nbsp;<a href="#版本回退">版本回退</a>&nbsp;·&nbsp;<a href="#查看更改`">查看更改</a>&nbsp;·&nbsp;<a href="#其他">其他</a></p></div><div class="note icon custom iconfont icon-QQ2" style="background: #fdf8ea;border-left-color: #f0ad4e;">  <p>其中<a href="#分支管理">分支管理</a>，<a href="#撤销更改">撤销更改</a>尤为重要</p></div><h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch branch_name <span class="token punctuation">[</span>other_branch_name <span class="token operator">|</span> commit<span class="token punctuation">]</span><span class="token function">git</span> switch -c branch_name <span class="token punctuation">[</span>other_branch_name <span class="token operator">|</span> commit<span class="token punctuation">]</span><span class="token function">git</span> checkout -b branch_name <span class="token punctuation">[</span>other_branch_name <span class="token operator">|</span> commit<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：</p><p>第一行只是创建一个分支，但后两个命令则是创建并切换到这个分支</p><p>后面可以接其他分支名或者提交</p></blockquote><h2 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch <span class="token function">git</span> branch -a<span class="token comment"># 加上 -a 后查看所有分支</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch -d <span class="token punctuation">[</span>branch_name<span class="token punctuation">]</span><span class="token function">git</span> branch -D <span class="token punctuation">[</span>branch_name<span class="token punctuation">]</span><span class="token comment"># 使用 -D 强制删除</span><span class="token function">git</span> push origin --delete <span class="token punctuation">[</span>branch_name<span class="token punctuation">]</span><span class="token comment"># 删除远程分支</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="更改分支名"><a href="#更改分支名" class="headerlink" title="更改分支名"></a>更改分支名</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch -m <span class="token punctuation">[</span>branch_name<span class="token punctuation">]</span> <span class="token punctuation">[</span>new_branch_name<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> switch <span class="token punctuation">[</span>branch_name<span class="token punctuation">]</span><span class="token function">git</span> checkout <span class="token punctuation">[</span>branch_name<span class="token punctuation">]</span><span class="token comment"># 以上两个皆可</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><p><code>git merge</code></p><p>合并分支</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> merge dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>git rebase</code></p><p>用于合并分支，同时讲提交变为线性</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout <span class="token punctuation">[</span>branch_1<span class="token punctuation">]</span><span class="token function">git</span> rebase <span class="token punctuation">[</span>branch_2<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>git rebase -i</code></p><p>交互性</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout <span class="token punctuation">[</span>branch_1<span class="token punctuation">]</span><span class="token function">git</span> rebase -i HEAD~5<span class="token comment"># 然后可以在文件中编辑要合并的提交，同时还可以编辑提交的先后顺序</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="其他相关"><a href="#其他相关" class="headerlink" title="其他相关"></a>其他相关</h2><p><code>git branch -f</code></p><p>强制将某个分支放到某个提交上</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch -f <span class="token punctuation">[</span>branch_2<span class="token punctuation">]</span> <span class="token punctuation">[</span>commit_2<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>git cherry-pick</code></p><p>合并提交</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> cherry-pick <span class="token punctuation">[</span>commit_1<span class="token punctuation">]</span> <span class="token punctuation">[</span>commit_2<span class="token punctuation">]</span> <span class="token punctuation">..</span>.<span class="token comment"># 合并多个提交</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="commit相关"><a href="#commit相关" class="headerlink" title="commit相关"></a>commit相关</h1><h2 id="HEAD-指针"><a href="#HEAD-指针" class="headerlink" title="HEAD 指针"></a><code>HEAD</code> 指针</h2><p><code>~</code>, <code>^</code></p><p><code>~</code> 后可以接数字，表示 HEAD 前第几个提交</p><p>如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">*   46dc76c <span class="token punctuation">(</span>HEAD -<span class="token operator">&gt;</span> master<span class="token punctuation">)</span> Merge branch <span class="token string">'b2'</span><span class="token operator">|</span><span class="token punctuation">\</span>  <span class="token operator">|</span> * 4bb98ef <span class="token punctuation">(</span>b2<span class="token punctuation">)</span> master sixth* <span class="token operator">|</span> 966825b master nine after change* <span class="token operator">|</span> <span class="token number">2039566</span> master eight* <span class="token operator">|</span> 35a14dd <span class="token punctuation">(</span>b3<span class="token punctuation">)</span> master seven* <span class="token operator">|</span> 1f87053 <span class="token punctuation">(</span>b1<span class="token punctuation">)</span> master sixth* <span class="token operator">|</span> 8906bd9 master fifth after change<span class="token operator">|</span>/  * e2e358e b1 forth* 02f6154 b1 third* be7efa6 master first<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上所示</p><p>当前 HEAD 在 <code>46dc76c</code> 这个提交，<code>HEAD~3</code> 就表示 <code>35a14dd</code> 这个提交, <code>HEAD^</code> 表示 <code>966825b</code> 这个提交，而 <code>HEAD^2</code> 表示 <code>4bb98ef</code> 这个提交。</p><blockquote><p>注意：<code>HEAD^</code> 表示上一个提交，但可见在合并分支后， <code>46dc76c</code> 这个提交，后面有两个子提交，此时 <code>HEAD^</code> 知道垂直的那个子提交，即 <code>966825b</code>, 而 <code>HEAD^2</code> 表示从别的分支合并来的提交，即 <code>4bb98ef</code> </p><p>另外 <code>^</code>, <code>~</code> 可以混用，如 <code>HEAD^2~2</code> 即可表示 <code>02f6154</code> 这个提交</p><p>Ps: 如果执行 <code>git checkout HEAD^2~2</code> 之后，提示 <code>HEAD detached at [commit_id]</code>, 可以通过 <code>git switch master</code> 来将 <code>HEAD</code> 重新指向 master 分支 </p></blockquote><h2 id="git-commit-amend"><a href="#git-commit-amend" class="headerlink" title="git commit --amend"></a><code>git commit --amend</code></h2><p>修改提交的注释</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit --amend<span class="token comment"># 修改最近一次提交的注释</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="撤销更改"><a href="#撤销更改" class="headerlink" title="撤销更改"></a>撤销更改</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 撤销提交到暂存区</span><span class="token function">git</span> restore --staged <span class="token punctuation">[</span>file_name<span class="token punctuation">]</span><span class="token comment"># 撤销工作区的更改</span><span class="token function">git</span> restore <span class="token punctuation">[</span>file_name<span class="token punctuation">]</span><span class="token comment"># 这两条命令在执行 git status 的时候都会自动提示的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h1><h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a><code>git reset</code></h2><p>相当于改写了历史，对远程分支无效（暂未验证 <code>git push -f</code> 是否也无效）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset --<span class="token operator">&lt;</span>hard <span class="token operator">|</span> mixed <span class="token operator">|</span> soft<span class="token operator">&gt;</span> <span class="token punctuation">[</span>commit_id<span class="token punctuation">]</span><span class="token comment"># soft 表示将这次提交之后的所有更改放入暂存区</span><span class="token comment"># mixed 表示放入工作区</span><span class="token comment"># hard 表示放弃所有提交，即直接删除了之间的所有提交</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a><code>git revert</code></h2><p>新建一个提交，用以撤销之前的提交的修改</p><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">* 636729f (HEAD -&gt; bt4) bt4 nine change 4* d23a742 bt4 nine change 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>对于上述提交历史，</p><p>执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> revert HEAD^<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>后，结果为</p><pre class="line-numbers language-none"><code class="language-none">* f03f4e4 (HEAD -&gt; bt4) Revert "bt4 nine change 3"* 636729f bt4 nine change 4* d23a742 bt4 nine change 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="撤销版本回退"><a href="#撤销版本回退" class="headerlink" title="撤销版本回退"></a>撤销版本回退</h2><blockquote><p>对于 <code>git reset</code> 误删的提交，可以通过 <code>git reflog</code> 命令查看历史，然后根据提交号，进行 <code>git reset</code> 即可</p><p>例如：</p><p>对于如下 commit log</p><pre class="line-numbers language-none"><code class="language-none">* b1ec67d (HEAD -&gt; master) master change restfile 2* a3bbf0b master change resetfile 1* 653c57e master add resetfile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset HEAD^^<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>后得到如下 commit log</p><pre class="line-numbers language-none"><code class="language-none">* 653c57e (HEAD -&gt; master) master add resetfile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果此时，要再次恢复到 <code>b1ec67d</code> 这个提交</p><p>则</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reflog -n <span class="token number">5</span><span class="token comment"># 此处 -n 5 只是限制输出 5 行到作用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>得到如下输出</p><pre class="line-numbers language-none"><code class="language-none">653c57e (HEAD -&gt; master) HEAD@{0}: reset: moving to HEAD^^b1ec67d HEAD@{1}: commit: master change restfile 2a3bbf0b HEAD@{2}: commit: master change resetfile 1653c57e (HEAD -&gt; master) HEAD@{3}: commit: master add resetfile46dc76c (bt5) HEAD@{4}: checkout: moving from bt4 to master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到曾经提交的 commit id</p><p>此时执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset --hard b1ec<span class="token comment"># 此处的 --hard 只是个人推荐吧，因为用 --soft或者 --mixed又会在工作区或者暂存区有更改，比较麻烦</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>即可恢复。</p></blockquote><h1 id="查看更改"><a href="#查看更改" class="headerlink" title="查看更改"></a>查看更改</h1><p>本来是不打算写这部分内容的，因为 vscode 完美的直观实现了这个，但是近期在新电脑上来不及下载 vscode，所以又得用到这个。</p><p>基本上就是记住，什么都不加就是比较工作区，加了 <code>--cached</code> or <code>--staged</code> 就是比较暂存区，指定 <code>commit-id</code> 则不言而喻。</p><p>另外就是要学会看懂输出结果，注意以哪个文件为基准进行比较的。注意分辨！！</p><ul><li><p><strong>比较工作区与暂存区</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">diff</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以暂存区为基准，不加任何参数</p></li><li><p><strong>比较暂存区与最新本地仓库</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">diff</span> --cached <span class="token punctuation">[</span><span class="token operator">&lt;</span>path<span class="token operator">&gt;</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以本地仓库为基准</p><blockquote><p> [<path>…] 表示文件路径，直接 copy 的，懒得替换成 [filename] 了，下同</path></p></blockquote></li><li><p><strong>比较工作区与最新本地版本库</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">diff</span> HEAD <span class="token punctuation">[</span><span class="token operator">&lt;</span>path<span class="token operator">&gt;</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>比较工作区与指定 commit_id 的差异</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">diff</span> <span class="token punctuation">[</span>commit_id<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>path<span class="token operator">&gt;</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以指定 commit 为基准</p></li><li><p><strong>比较暂存区与指定 commit-id 的差异</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">diff</span> --cached <span class="token punctuation">[</span>commit_id<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>path<span class="token operator">&gt;</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以指定 commit 为基准</p></li><li><p><strong>比较两个 commit-id 的差异</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">diff</span> <span class="token punctuation">[</span>commit_id<span class="token punctuation">]</span> <span class="token punctuation">[</span>commit_id<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>path<span class="token operator">&gt;</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以前一个 commit 为基准</p></li></ul><p>如执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> abc <span class="token operator">&gt;</span> seven<span class="token function">git</span> <span class="token function">diff</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>得到如下输出</p><pre class="line-numbers language-none"><code class="language-none">warning: LF will be replaced by CRLF in seven.The file will have its original line endings in your working directorydiff --git a/seven b/sevenindex e69de29..8baef1b 100644--- a/seven+++ b/seven@@ -0,0 +1 @@+abc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着上面的更改执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> <span class="token function">diff</span> --staged<span class="token comment"># --staged 与 --cached 效果一样</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到如下输出</p><pre class="line-numbers language-none"><code class="language-none">diff --git a/seven b/sevenindex e69de29..8baef1b 100644--- a/seven+++ b/seven@@ -0,0 +1 @@+abc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而此时如果执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">diff</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>则没有输出</p><p>接着执行</p><pre class="line-numbers language-none"><code class="language-none">echo bcd &gt; sevengit diff HEADgit diff git diff --staged<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>git diff HEAD</code> 得到</p><pre class="line-numbers language-none"><code class="language-none">warning: LF will be replaced by CRLF in seven.The file will have its original line endings in your working directorydiff --git a/seven b/sevenindex e69de29..a48a3b3 100644--- a/seven+++ b/seven@@ -0,0 +1 @@+bcd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>git diff</code> 得到 </p><pre class="line-numbers language-none"><code class="language-none">warning: LF will be replaced by CRLF in seven.The file will have its original line endings in your working directorydiff --git a/seven b/sevenindex 8baef1b..a48a3b3 100644--- a/seven+++ b/seven@@ -1 +1 @@-abc+bcd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>git diff --staged</code> 得到</p><pre class="line-numbers language-none"><code class="language-none">xin@xins-MacBook-Pro ~/Documents/gg: git diff --stageddiff --git a/seven b/sevenindex e69de29..8baef1b 100644--- a/seven+++ b/seven@@ -0,0 +1 @@+abc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>git diff HEAD^</code> 得到</p><pre class="line-numbers language-none"><code class="language-none">warning: LF will be replaced by CRLF in seven.The file will have its original line endings in your working directorydiff --git a/resetfile b/resetfileindex 802992c..ce8018b 100644--- a/resetfile+++ b/resetfile@@ -1 +1 @@-Hello world+Hi worlddiff --git a/seven b/sevenindex e69de29..a48a3b3 100644--- a/seven+++ b/seven@@ -0,0 +1 @@+bcd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>git diff --staged HEAD^</code> 得到</p><pre class="line-numbers language-none"><code class="language-none">diff --git a/resetfile b/resetfileindex 802992c..ce8018b 100644--- a/resetfile+++ b/resetfile@@ -1 +1 @@-Hello world+Hi worlddiff --git a/seven b/sevenindex e69de29..8baef1b 100644--- a/seven+++ b/seven@@ -0,0 +1 @@+abc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p><code>git show [commit_id]:[filename]</code> 用于查看某次提交中某个文件的内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> show a3bb:resetfile<span class="token comment"># 输出 Hello world</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><p>日常中用到的命令基本也就这些了（远程库相关的之后再补），其他的像打标签什么的，我反正是用的不太多，而且打标签也不复杂。</p><p>在此推荐这个网站 <a href="https://learngitbranching.js.org/?locale=zh_CN">https://learngitbranching.js.org/?locale=zh_CN</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note icon custom iconfont icon-QQ2&quot; style=&quot;background: #eff8f0;border-left-color: #5cb85c;&quot;&gt;
  &lt;p&gt;该篇文章是 Git 的一些进阶使用，更为常见的配置使用可查阅</summary>
      
    
    
    
    <category term="工具" scheme="https://blog.luoxin.vip/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Git" scheme="https://blog.luoxin.vip/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git 命令基本使用</title>
    <link href="https://blog.luoxin.vip/posts/2608075722/"/>
    <id>https://blog.luoxin.vip/posts/2608075722/</id>
    <published>2021-06-27T00:29:55.000Z</published>
    <updated>2021-07-08T20:04:55.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-基本使用"><a href="#Git-基本使用" class="headerlink" title="Git 基本使用"></a>Git 基本使用</h1><p>其实本意是想整理一下自己不太会的 Git 的命令，但是为了完整性，所以先介绍一下基本命令的使用。</p><p>加之，最近有看到公司的新手同事，也不太会这些命令，想到自己一开始学 <code>Git</code> 也有些懵，搞不清重点，所以前人栽树，后人乘凉，我来归纳一下一些基本常用的命令吧。</p><p>以下是根据自己在工作中实际生产环境的需要，来说明一下 Git  的基本命令。</p><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><ol start="0"><li><p>安装 Git</p></li><li><p>配置用户名、密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config user.name <span class="token string">"[username]"</span><span class="token function">git</span> config user.email <span class="token string">"[useremail]"</span><span class="token comment"># username 替换为自己的用户名</span><span class="token comment"># useremail 替换为自己的邮箱</span><span class="token comment"># 如 git config user.name "luoxin"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：[xxx] 表示此处需要根据自己的实际情况来填写，下同</p></blockquote></li><li><p>配置 ssh 密钥（可选）</p><p>首先说明这一步是可选的。</p><p>其实我本人在日常中也没怎么用，直接用的 http。但是前两天有个项目要求用 ssh，这次刚好写上去</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t rsa -c <span class="token string">"[useremail]"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会让你输入存放 key（公钥）的路径，一般选默认的即可。</p><p>接着输入 <code>passphrase</code>，也就是私钥，这个可设可不设，设置的话，以后每次 <code>git push</code> 都需要求再次输入。</p><p>继续，再次输入 <code>passphrase</code>。</p><p>成功之后会在上述设置的路径下，除生成 <code>id_rsa</code> 外，还有名为 <code>id_rsa.pub</code> 的文件, 复制一下 <code>id_rsa.pub</code> 里的文件内容，留作后用。</p><p>然后打开 <a href="https://github.com/settings/keys"><code>Github</code></a>，进入 <code>Settings</code> -&gt; <code>SSH and GPG keys</code> -&gt; <code>New SSH key</code></p><p>最后在 <code>Title</code> 随便输入一些内容，在<code>Key</code> 中输入刚刚复制的 <code>id_rsa.pub</code> 里的内容。</p></li><li><p>克隆仓库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token punctuation">[</span>repository_address<span class="token punctuation">]</span> <span class="token punctuation">[</span>folder_name<span class="token punctuation">]</span><span class="token comment"># repository_address 替换为仓库的 url 即可</span><span class="token comment"># folder_name 替换为自己想放代码的文件夹，也可以不设置，就默认在当前目录下新建一个与 repository 同名的文件夹</span><span class="token comment"># 如 git clone https://github.com/luoxin971/Study-notes.git</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><h3 id="基本代码提交流程"><a href="#基本代码提交流程" class="headerlink" title="基本代码提交流程"></a>基本代码提交流程</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 初始化，注意要在空文件夹里，如果不是新建一个项目，则可以用 git clone 拉代码</span><span class="token function">git</span> init<span class="token comment"># 将文件从工作区添加到暂存区</span><span class="token function">git</span> <span class="token function">add</span> <span class="token punctuation">[</span>filename<span class="token punctuation">]</span><span class="token comment"># 将暂存区的所有内容提交到当前分支，commit_info 替换为对这次提交的说明，具体可在网上搜 git 提交规范</span><span class="token function">git</span> commit -m <span class="token string">"[commit_info]"</span><span class="token comment"># 将当前分支推送到远程分支</span><span class="token function">git</span> push origin <span class="token punctuation">[</span>branch_name<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  <code>git add</code>, <code>git commit</code>, <code>git push</code> 三步就是每次提交代码的基本步骤</p><p>  当然，如果没有远程仓库的话，<code>git push</code> 就无从说起了</p></blockquote><h3 id="其他常用操作"><a href="#其他常用操作" class="headerlink" title="其他常用操作"></a>其他常用操作</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看当前 git 状态</span><span class="token function">git</span> status<span class="token comment"># 查看 git 提交历史，后面可以接其他参数，我个人常用的有，git log --oneline, git log -n 10</span><span class="token function">git</span> log<span class="token comment">## 以下是分支操作</span><span class="token comment"># 查看分支，后接其他参数，可实现其他与分支相关的命令</span><span class="token function">git</span> branch<span class="token comment"># 切换分支</span><span class="token function">git</span> switch/checkout <span class="token punctuation">[</span>branch_name<span class="token punctuation">]</span><span class="token comment"># 创建分支，以下两个都可以</span><span class="token function">git</span> checkout -b <span class="token punctuation">[</span>new_branch_name<span class="token punctuation">]</span><span class="token function">git</span> switch -c <span class="token punctuation">[</span>new_branch_name<span class="token punctuation">]</span><span class="token comment"># 合并分支</span><span class="token function">git</span> merge <span class="token punctuation">[</span>other_branch_name<span class="token punctuation">]</span><span class="token comment"># 从远程分支拉取代码</span><span class="token function">git</span> pull<span class="token comment"># 放弃更改，其实有很多的用法，在此只介绍两个常用的</span><span class="token function">git</span> restore <span class="token punctuation">[</span>filename<span class="token punctuation">]</span><span class="token comment"># 将暂存区的文件返回到工作区</span><span class="token function">git</span> restore --staged <span class="token punctuation">[</span>filename<span class="token punctuation">]</span><span class="token comment">## 打草稿，（我也不知道中文该怎么说/(ㄒoㄒ)/~~）</span><span class="token comment"># 将当前的更改保存，-m 后的 stash_info 类似于前面的 git commit -m "xxx"，可以不写，但推荐加加上，方便分辨</span><span class="token function">git</span> stash -m <span class="token string">"[stash_info]"</span><span class="token comment"># 显示所有的 stash</span><span class="token function">git</span> stash list<span class="token comment"># 应用 stash，其中 stash_num 为上述 git stash list 中显示的各 stash 的序号</span><span class="token function">git</span> stash apply <span class="token punctuation">[</span>stash_num<span class="token punctuation">]</span><span class="token comment"># 其实还有 git diff，但是我一般都用 vscode 看两者的差别，所以用的不多，况且用命令行显示这个实在是不太直观</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>二八定律，其实只要掌握了上述命令（其实只掌握<a href="#%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4">基本命令</a> 也够了），就可以满足 80% 的实际生产需要。但仅仅掌握这些肯定是不够的，如果想进一步学习，可以参考 <a href="https://luoxin.vip/posts/2552719298/">Git 进阶使用</a>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Git-基本使用&quot;&gt;&lt;a href=&quot;#Git-基本使用&quot; class=&quot;headerlink&quot; title=&quot;Git 基本使用&quot;&gt;&lt;/a&gt;Git 基本使用&lt;/h1&gt;&lt;p&gt;其实本意是想整理一下自己不太会的 Git 的命令，但是为了完整性，所以先介绍一下基本命令的使</summary>
      
    
    
    
    <category term="工具" scheme="https://blog.luoxin.vip/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Git" scheme="https://blog.luoxin.vip/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Java容器类</title>
    <link href="https://blog.luoxin.vip/posts/1994952861/"/>
    <id>https://blog.luoxin.vip/posts/1994952861/</id>
    <published>2021-05-17T22:56:59.000Z</published>
    <updated>2022-10-10T03:40:00.936Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>  写这个的起因是是，对于 Java 容器类的 api 接口不是很熟悉，所以稍微整理一下，增强记忆。</p><p>  尤其是 <code>add</code>, <code>remove</code> 两个方法不太熟悉，不明白不同的容器类增删的位置。</p></blockquote><p><strong>List</strong></p><ul><li><a href="#ArrayList">ArrayList</a></li><li><a href="#LinkedList">LinkedList</a></li></ul><p><strong>Set</strong></p><ul><li><a href="#HashSet">HashSet</a></li><li><a href="#TreeSet">TreeSet</a></li><li>LinkedHashSet</li></ul><p><strong>Map</strong></p><ul><li><a href="#HashMap">HashMap</a></li><li><a href="#TreeMap">TreeMap</a></li></ul><h2 id="Collection-lt-E-gt"><a href="#Collection-lt-E-gt" class="headerlink" title="Collection<E>"></a>Collection&lt;E&gt;</h2><p>增：</p><ul><li><code>add(E e)</code></li><li><code>addAll(Collection&lt;? extends E&gt; c)</code></li></ul><p>删：</p><ul><li><code>clear()</code></li><li><code>remove(Object o)</code></li><li><code>removeAll</code></li><li><code>retainAll</code></li></ul><p>查：</p><ul><li><code>contains</code></li><li><code>containsAll</code></li><li><code>equals</code></li><li><code>isEmpty</code></li><li><code>size</code></li></ul><h2 id="Deque-lt-E-gt"><a href="#Deque-lt-E-gt" class="headerlink" title="Deque<E>"></a>Deque&lt;E&gt;</h2><p>double ended queue</p><p>以下截取自 <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Deque.html">JavaSE 8</a> 的文档</p><blockquote><p>  This interface defines methods to access the elements at both ends of the deque. </p><p>  Methods are provided to insert, remove, and examine the element. <strong>Each of these methods exists in two forms</strong>: one throws an exception if the operation fails, the other returns a special value (either <code>null</code> or <code>false</code>, depending on the operation). </p><p>  The latter form of the insert operation is designed specifically for use with capacity-restricted <code>Deque</code> implementations; in most implementations, insert operations cannot fail.</p></blockquote><table><thead><tr><th></th><th><strong>First Element (Head)</strong></th><th><strong>First Element (Head)</strong></th><th><strong>Last Element (Tail)</strong></th><th><strong>Last Element (Tail)</strong></th></tr></thead><tbody><tr><td></td><td><em>Throws exception</em></td><td><em>Special value</em></td><td><em>Throws exception</em></td><td><em>Special value</em></td></tr><tr><td><strong>Insert</strong></td><td><code>addFirst(e)</code></td><td><code>offerFirst(e)</code></td><td><code>addLast(e)</code></td><td><code>offerLast(e)</code></td></tr><tr><td><strong>Remove</strong></td><td><code>removeFirst()</code></td><td><code>pollFirst()</code></td><td><code>removeLast()</code></td><td><code>pollLast()</code></td></tr><tr><td><strong>Examine</strong></td><td><code>getFirst()</code></td><td><code>peekFirst()</code></td><td><code>getLast()</code></td><td><code>peekLast()</code></td></tr></tbody></table><table><thead><tr><th><strong>Queue Method</strong></th><th><strong>Equivalent Deque Method</strong></th></tr></thead><tbody><tr><td><code>add(e)</code></td><td><code>addLast(e)</code></td></tr><tr><td><code>offer(e)</code></td><td><code>offerLast(e)</code></td></tr><tr><td><code>remove()</code></td><td><code>removeFirst()</code></td></tr><tr><td><code>poll()</code></td><td><code>pollFirst()</code></td></tr><tr><td><code>element()</code></td><td><code>getFirst()</code></td></tr><tr><td><code>peek()</code></td><td><code>peekFirst()</code></td></tr></tbody></table><table><thead><tr><th><strong>Stack Method</strong></th><th><strong>Equivalent <code>Deque</code> Method</strong></th></tr></thead><tbody><tr><td><code>push(e)</code></td><td><code>addFirst(e)</code></td></tr><tr><td><code>pop()</code></td><td><code>removeFirst()</code></td></tr><tr><td><code>peek()</code></td><td><code>peekFirst()</code></td></tr></tbody></table><ul><li><p><code>removeFirstOccurrence(Object o)</code> : Removes the first occurrence of the specified element from this deque.</p></li><li><p><code>removeLastOccurrence(Object o)</code> : Removes the last occurrence of the specified element from this deque.</p></li></ul><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><ul><li><p><code>add(E e)</code> : Appends the specified element to the end of this list.</p><p>类似的还有 </p><ol><li><p><code>addAll(Collection&lt;? extends E&gt; c)</code></p></li><li><p><code>add(int index, E element)</code> </p></li><li><p><code>addAll(int index, Collection&lt;? extends E&gt; c)</code></p></li></ol></li></ul><h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><ul><li><p><code>clear()</code></p></li><li><p><code>remove(Object o)</code> : 删除第一个匹配的，必须传参</p><p>类似的还有 </p><ol><li><code>remove(int index)</code></li><li><code>removeAll(Collection&lt;?&gt; c)</code>,</li><li><code>removeIf(Predicate&lt;? super E&gt; filter)</code></li><li><code>removeRange(int fromIndex, int toIndex)</code> : Removes from this list all of the elements whose index is between <code>fromIndex</code>, inclusive, and <code>toIndex</code>, exclusive.</li></ol></li></ul><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><ul><li><p><code>equals(Object o)</code></p></li><li><p><code>get(int index)</code></p></li><li><p><code>indexOf(Object o)</code> : Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.</p></li><li><p><code>lastIndexOf(Object o)</code> : Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.</p></li><li><p><code>contains(Object o)</code></p><p>类似的还有</p><ol><li><code>containsAll(Collection&lt;?&gt; c)</code></li></ol></li></ul><h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><ul><li><p><code>set(int index, E element)</code> : Replaces the element at the specified position in this list with the specified element.</p></li><li><p><code>sort(Comparator&lt;? super E&gt; c)</code> :  Sorts this list according to the order induced by the specified Comparator.</p></li></ul><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><p>基本就是在 <code>ArrayList</code> 的基础上，又实现了 <code>Deque</code> 的接口</p><h2 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h2><p>个人看来就是普通的 set 呗，不过其中有个 <code>load factor</code> 的概念一开始不是很清楚，在此介绍一下</p><p><code>HashSet</code> 有 <code>initialCapacity</code> 和 <code>loadFactor</code></p><p>前者不用多说，初始容量，而后者（我也不知道中文应该怎么翻译）的作用在于 resize</p><p>比如 HashSet 默认 <code>initialCapacity = 16</code>, <code>loadFactor = 0.75</code>，在 <code>HashSet</code> 的元素个数达到 <code>16*0.75=12</code></p><p>的时候，就会自动扩容。</p><p>至于方法其实都是很常规的增删改查</p><p><code>add(E e)</code>, <code>clear()</code>, <code>contains(Object o)</code>, <code>isEmpty()</code>, <code>size()</code></p><h2 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h2><p>底层用红黑树，抽空有时间看完红黑树再来补充</p><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><ul><li><code>compute(K key, BiFunction&lt;? super K,? super V,? extends V&gt; remappingFunction)</code> : Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).</li><li><code>computeIfAbsent(K key, Function&lt;? super K,? extends V&gt; mappingFunction)</code> : If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null.</li><li><code>computeIfPresent(K key, BiFunction&lt;? super K,? super V,? extends V&gt; remappingFunction)</code> : if the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value.</li></ul><blockquote><p>  对于以上三种方法，实例如下：</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span> <span class="token string">"value2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key3"</span><span class="token punctuation">,</span> <span class="token string">"value3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key4"</span><span class="token punctuation">,</span> <span class="token string">"value4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> key <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">computeIfPresent</span><span class="token punctuation">(</span><span class="token string">"key4"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token string">"hh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span><span class="token string">"key5"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  输出为：</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>key1<span class="token operator">=</span>value1<span class="token punctuation">,</span> key2<span class="token operator">=</span>value2<span class="token punctuation">,</span> key3<span class="token operator">=</span>value3<span class="token punctuation">,</span> key4<span class="token operator">=</span>value4<span class="token punctuation">]</span><span class="token punctuation">{</span>key1<span class="token operator">=</span>key1value1<span class="token punctuation">,</span> key2<span class="token operator">=</span>value2<span class="token punctuation">,</span> key5<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> key3<span class="token operator">=</span>value3<span class="token punctuation">,</span> key4<span class="token operator">=</span>hh<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><h3 id="增-1"><a href="#增-1" class="headerlink" title="增"></a>增</h3><ul><li><code>put(K key, V value)</code></li><li><code>putAll(Map&lt;? extends K,? extends V&gt; m)</code></li><li><code>putIfAbsent(K key, V value)</code></li></ul><h3 id="删-1"><a href="#删-1" class="headerlink" title="删"></a>删</h3><ul><li><code>remove(Object key)</code></li><li><code>remove(Object key, Object value)</code> : Removes the entry for the specified key only if it is currently mapped to the specified value.</li></ul><h3 id="查-1"><a href="#查-1" class="headerlink" title="查"></a>查</h3><ul><li><code>containsKey(Object key)</code></li><li><code>containsValue(Object value)</code></li><li><code>entrySet()</code> : Returns a Set view of the mappings contained in this map.</li><li><code>keySet()</code></li><li><code>values()</code></li><li><code>get(Object key)</code></li><li><code>getOrDefault(Object key, V defaultValue)</code></li></ul><h3 id="改-1"><a href="#改-1" class="headerlink" title="改"></a>改</h3><ul><li><code>replace(K key, V value)</code></li><li><code>replace(K key, V oldValue, V newValue)</code> : Replaces the entry for the specified key only if currently mapped to the specified value.</li><li><code>replaceAll(BiFunction&lt;? super K,? super V,? extends V&gt; function)</code> : Replaces each entry’s value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.</li></ul><h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><p>也是红黑树，之后再补。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;  写这个的起因是是，对于 Java 容器类的 api 接口不是很熟悉，所以稍微整理一下，增强记忆。&lt;/p&gt;
&lt;p&gt;  尤其是 &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt; 两个方法不太熟悉，不明白不同的容器类增删的位</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.luoxin.vip/categories/Java/"/>
    
    
    <category term="Java 基础" scheme="https://blog.luoxin.vip/tags/Java-%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Maven 初步介绍</title>
    <link href="https://blog.luoxin.vip/posts/2142312108/"/>
    <id>https://blog.luoxin.vip/posts/2142312108/</id>
    <published>2021-04-28T21:55:29.000Z</published>
    <updated>2022-10-10T03:40:00.936Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><p>Maven 是专门为 Java 项目打造的管理和构建工具，它的主要功能有：</p><ul><li>提供了一套标准化的项目结构；</li><li>提供了一套标准化的构建流程（编译，测试，打包，发布……）；</li><li>提供了一套依赖管理机制。</li></ul><p>一个使用 Maven 管理的普通 Java 项目，目录结构默认如下：</p><pre class="line-numbers language-none"><code class="language-none">a-maven-project├── pom.xml├── src│   ├── main│   │   ├── java│   │   └── resources│   └── test│       ├── java│       └── resources└── target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>目录结构都是约定好的标准结构，不要随意修改目录结构。</p><p><code>pom.xml</code> (<code> Project Object Model</code>)是项目描述文件 </p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0    http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token comment">&lt;!-- 模型版本 --&gt;</span>    <span class="token comment">&lt;!-- 一般都写死了 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- groupId 一般是公司或者组织的名字， artifactId 一般是项目名称 --&gt;</span>    <span class="token comment">&lt;!-- groupId, artifactId 和 version 共同作为唯一标识 --&gt;</span>    <span class="token comment">&lt;!-- 引入第三方库时，也同样如此，用这三个确定所需要的依赖 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.luoxin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>project<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- parent 类似于继承？ 在于复用，在于多模块场景 --&gt;</span>    <span class="token comment">&lt;!-- 将公共部分的依赖提取出来，作为 parent， 之后在其他模块中就只需要导入 parent就可以了，不用重复配置 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.4.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>maven 会自动帮我们进行依赖管理，如果我们要导入的包有其他的依赖，maven 会自动帮我们导入 。</p><h3 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h3><table><thead><tr><th align="left">scope</th><th align="left">说明</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left">compile</td><td align="left">编译时需要用到该 jar 包（默认）</td><td align="left">commons-logging</td></tr><tr><td align="left">test</td><td align="left">编译 Test 时需要用到该 jar 包</td><td align="left">junit</td></tr><tr><td align="left">runtime</td><td align="left">编译时不需要，但运行时需要用到</td><td align="left">mysql</td></tr><tr><td align="left">provided</td><td align="left">编译时需要用到，但运行时由 JDK 或某个服务器提供</td><td align="left">servlet-api</td></tr></tbody></table><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.junit.jupiter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit-jupiter-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 <code>&lt;scope&gt;</code> 标签，用于在项目发布过程中，帮助决定哪些构件被包括进来。</p><h2 id="构建流程"><a href="#构建流程" class="headerlink" title="构建流程"></a>构建流程</h2><p>Maven 可以自动化实现编译、打包、发布等等。</p><h3 id="Lifecycle-Phase-Goal"><a href="#Lifecycle-Phase-Goal" class="headerlink" title="Lifecycle Phase Goal"></a>Lifecycle Phase Goal</h3><p>Maven 有三套<strong>相互独立</strong>的的生命周期。</p><ul><li>clean</li><li>default</li><li>site</li></ul><p>三套生命周期有各自有其 Phase</p><p>如对于 clean 有</p><ul><li>pre-clean</li><li>clean</li><li>post-clean</li></ul><blockquote><p>  另外两个 lifecycle 的 phase 就不写了。</p></blockquote><p>当执行 <code>mvn</code> 命令时，后面接的参数就是 phase</p><p>常用的 <code>mvn package</code> 就是运行到 default 生命周期的 package 阶段。</p><p>常用的命令有：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mvn cleanmvn clean compilemvn clean <span class="token builtin class-name">test</span>mvn clean package<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>执行一个 Phase 会触发多个 Goal</p><table><thead><tr><th align="left">执行的Phase</th><th align="left">对应执行的Goal</th></tr></thead><tbody><tr><td align="left">compile</td><td align="left">compiler:compile</td></tr><tr><td align="left">test</td><td align="left">compiler:testCompile surefire:test</td></tr></tbody></table><p>goal 的命名总是<code>abc:xyz</code>这种形式。</p><hr><ul><li>lifecycle 相当于 Java 的 package，它包含一个或多个 phase；</li><li>phase 相当于 Java 的 class，它包含一个或多个 goal；</li><li>goal 相当于 class 的 method，它其实才是真正干活的。</li></ul><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>Maven 执行每个 phase 时，都是通过某个插件来执行的，Maven 本身其实并不知道如何执行<code>compile</code>，它只是负责找到对应的 <code>compiler</code> 插件，然后执行默认的 <code>compiler:compile</code> 这个 goal 来完成编译。</p><p>Maven 内置了一些常用的标准插件，但如果标准插件无法满足要求，我们可以使用自定义插件。</p><p>自定义插件往往需要一些配置。</p><hr><p>基本就这些吧，只是个人粗略的学习。详细的笔记之后有时间了，看看视频再来补。</p><p align="right">本文参考：<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1255945359327200">廖雪峰的官方网站</a>、<a href="https://www.runoob.com/maven/maven-tutorial.html">菜鸟教程</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Maven&quot;&gt;&lt;a href=&quot;#Maven&quot; class=&quot;headerlink&quot; title=&quot;Maven&quot;&gt;&lt;/a&gt;Maven&lt;/h1&gt;&lt;p&gt;Maven 是专门为 Java 项目打造的管理和构建工具，它的主要功能有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提供了一套标准</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.luoxin.vip/categories/Java/"/>
    
    
    <category term="Maven" scheme="https://blog.luoxin.vip/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>AOP 基于注解方式</title>
    <link href="https://blog.luoxin.vip/posts/1872579400/"/>
    <id>https://blog.luoxin.vip/posts/1872579400/</id>
    <published>2021-04-27T23:43:55.000Z</published>
    <updated>2022-10-10T03:40:00.936Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><p>Aspect Oriented Programming</p><p>利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><p>即在不通过修改源代码的情况下，添加新功能。</p><h2 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h2><p><strong>动态代理</strong></p><p>区分两种情况</p><ol><li><p>有接口情况，使用 JDK 动态代理</p><p>创建接口的实现类代理对象，增强类的方法</p></li><li><p>没有接口情况，使用 CGLIB 动态代理</p><p>创建当前类子类的代理对象，增强类的方法</p></li></ol><p>即，<strong>Spring 对接口类型使用 JDK 动态代理，对普通类使用 CGLIB 创建子类</strong></p><h3 id="JDK-动态代理"><a href="#JDK-动态代理" class="headerlink" title="JDK 动态代理"></a>JDK 动态代理</h3><ol><li><p>使用 JDK 动态代理，使用 proxy 类里的方法</p><p>调用 <code>newProxyInstance</code> 方法</p><table><thead><tr><th align="left">返回值</th><th>参数</th></tr></thead><tbody><tr><td align="left"><code>static Object</code></td><td><code>newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</code></td></tr></tbody></table><p>Param1: 类加载器</p><p>Param2: 增强方法所在的类，这个类实现的接口，支持写多个接口</p><p>Param3: 实现这个接口 InvocationHandler，创建代理对象，写增强的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// UserDao.java</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// UserDaoImpl.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// JDKProxy.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDKProxy</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">UserDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">UserDaoImpl</span> userDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserDao</span> dao <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserDao</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">JDKProxy</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> interfaces<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">UserDaoProxy</span><span class="token punctuation">(</span>userDao<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> add <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> update <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"Hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">UserDaoProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token comment">// 传递要创建代理对象的类</span>    <span class="token comment">// 有参构造</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> obj<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">UserDaoProxy</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 增强的逻辑</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token comment">// 要增强的方法之前</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Before..."</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : Params ..."</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 执行要增强的方法</span>        <span class="token class-name">Object</span> res <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 要增强的方法之后</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"After..."</span> <span class="token operator">+</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="AOP-术语"><a href="#AOP-术语" class="headerlink" title="AOP 术语"></a>AOP 术语</h2><ul><li><p><strong>连接点</strong></p><p>类中可以被增强的方法</p></li><li><p><strong>切入点</strong></p><p>实际被真正增强的方法</p></li><li><p><strong>通知（增强）</strong></p><p>实际增强的逻辑部分</p><ul><li>前置通知 <code>@Before</code></li><li>后置通知 <code>@Afterreturning</code></li><li>环绕通知 <code>@Around</code></li><li>异常通知 <code>@AfterThrowing</code></li><li>最终通知 <code>@After</code></li></ul></li><li><p><strong>切面</strong></p><p>是一个动作</p><p>把通知应用到切入点的过程</p></li></ul><h2 id="AOP-操作"><a href="#AOP-操作" class="headerlink" title="AOP 操作"></a>AOP 操作</h2><ol><li><p>Spring 框架一般都是基于 AspectJ 实现 AOP 操作</p><p>AspectJ 不是 Spring 组成部分，独立 AOP 框架，一般把 AspectJ 和 Spring 框架一起使用，进行 AOP 操作</p></li><li><p>基于 AspectJ 实现 AOP 操作</p><ul><li>基于 xml</li><li>基于注解（常用）</li></ul></li><li><p>步骤</p></li><li><p>切入点表达式</p><p>知道对类里哪个方法进行增强</p><p><strong>语法结构</strong>：<code>execution([权限修饰符][返回类型][类全路径][方法名称]([参数列表]))</code></p><ul><li><p>eg: 对 <code>com.company.luoxin.user</code> 类里的 <code>add</code> 方法进行增强</p><p> <code>execution(* com.company.luoxin.user.add(..))</code></p><p><code>*</code> 是通配符，也可以用在方法名称、类路径中</p></li></ul></li><li><p>相同切入点抽取</p><p>在方法前加入以下注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* com.luoxin.User.add(..))"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">enhance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后再通知前加入以下注解（以 <code>@Before </code>为例）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"enhance()"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>有多个增强类对同一个方法进行增强时，可以设置增强类优先级</p><p>在增强类上添加注解 <code>@Order(2)</code> ，注解中 2 可以替换成其他数字，值越小优先级越高</p></li></ol><hr><p>配置文件方法略</p><hr><p>综上：</p><p>个人结合 《Spring 实战（第四版）》写出了如下测试代码</p><p>首先创建一个 <code>Music</code> 类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Music.java</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Music</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token keyword">int</span> order<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Play No."</span> <span class="token operator">+</span> order <span class="token operator">+</span> <span class="token string">" music"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> order<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在正常调用 <code>Music.play</code> 方法时，只会输出一行信息，并返回传入的参数</p><p>现在问题来了，<span style="background: #7FFFD4">如何在不改变原方法的情况下，为 <code>Music.play</code> 方法的调用计数？</span></p><p>具体操作如下：</p><p>创建 <code>MusicCounter</code> 类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// MusicCounter.java</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MusicCounter</span> <span class="token punctuation">{</span>    <span class="token comment">// 记录第 order 首曲子被演唱的次数</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> mp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// order 传参</span>    <span class="token comment">// 注意使用了 @Pointcut</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* com.luoxin.spring.Music.play(..)) &amp;&amp; args(order)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">playEnhance</span><span class="token punctuation">(</span><span class="token keyword">int</span> order<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment">// 注意额外的代码</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"playEnhance(order)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">playAround</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> jp<span class="token punctuation">,</span> <span class="token keyword">int</span> order<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Let's begin!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> initialReturn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> jp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The end!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> currentTimes <span class="token operator">=</span> <span class="token function">getTimes</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>        mp<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>order<span class="token punctuation">,</span> currentTimes <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> initialReturn <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getTimes</span><span class="token punctuation">(</span><span class="token keyword">int</span> order<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mp<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span> <span class="token operator">?</span> mp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建配置文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// AppConfig.java</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Music</span> <span class="token function">setMu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Music</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">MusicCounter</span> <span class="token function">setMc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MusicCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实通知的过程已经结束了，以下是测试类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// MusicTest.java</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringJUnit4ClassRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">AppConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MusicTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">Music</span> music<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">MusicCounter</span> musicCounter<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMusic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        music<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        music<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        music<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        music<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        music<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        music<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        music<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>music<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"No."</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> musicCounter<span class="token punctuation">.</span><span class="token function">getTimes</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" times."</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行 <code>MusicTest.testMusic</code> 方法，即可得到如下输出</p><pre class="line-numbers language-none"><code class="language-none">Let's begin!Play No.1 musicThe end!Let's begin!Play No.2 musicThe end!Let's begin!Play No.3 musicThe end!Let's begin!Play No.2 musicThe end!Let's begin!Play No.4 musicThe end!Let's begin!Play No.2 musicThe end!Let's begin!Play No.3 musicThe end!Let's begin!Play No.2 musicThe end!4No.0: 0 times.No.1: 1 times.No.2: 4 times.No.3: 2 times.No.4: 1 times.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  注意运行结果第 25 行</p><p>  这说明函数返回值已得到更改</p></blockquote><details class="note "><summary><p>red far fa-question-circle modern</p></summary>  <p><strong><a style="font-size: 20px">Question:</a></strong></p><p>博主在自己演示的时候，曾经把 <code>MusicCounter</code> 类的 <code>HashMap</code> 属性设为了 <code>static</code>，而且为 <code>AppConfig</code> 添加了 <code>@ComponentScan</code> 注解</p><p>之后发现输出中，最后通知都输出两次，而且计数的时候，都记录了双倍：0 2 8 4 2，但 <code>Music.play</code> 方法的输出只有一次。</p><p>起初猜测原因在于，<code>@ComponentScan</code> 已为 <code>Music</code> 类和 <code>MusicCounter</code> 类创建了对象，然后 <code>AppConfig</code> 类中的 <code>@Bean</code> 注解又再次创建，致使在 <code>MusicTest</code> 类在运行的时候，两个对象中都运行了一次，即一个方法运行了两次。</p><p>但是又很奇怪， <code>Music.play</code> 方法的输出只有一次，所以上述猜测应该不成立</p><p><span style="background: #00FA9A">详细解释，还得等以后再来解答</span></p>  </details><h3 id="AOP-为类添加新方法"><a href="#AOP-为类添加新方法" class="headerlink" title="AOP 为类添加新方法"></a>AOP 为类添加新方法</h3><p>前文都是对方法的增强，但是 AOP 也可以为类增加新的方法</p><p>比如接着上文，<code>Music</code> 类中，仅有 <code>play</code> 方法，现在我们希望增加一个 <code>stop</code> 方法</p><p>操作如下：</p><p>首先定义一个接口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Stop.java</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Stop</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">musicStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着为这个接口添加一个实现类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// MusicStop.java</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MusicStop</span> <span class="token keyword">implements</span> <span class="token class-name">Stop</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">musicStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Music stop..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面都是常规操作，现在注意以下内容：</p><p>编写切面</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// NewMethod.java</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NewMethod</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@DeclareParents</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"com.luoxin.spring.Music"</span><span class="token punctuation">,</span> defaultImpl <span class="token operator">=</span> <span class="token class-name">MusicStop</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Stop</span> stop<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到此就已经结束了</p><p>添加测试的话，只需要 <code>AppConfig</code> 类中，添加 Bean，或者直接加上 <code>@ComponentScan</code> 注解（添加注解后，可以去掉里面的方法）</p><p>最后再 <code>MusicTest</code> 中，对 <code>music</code> 强制转换即可（直接在上面已有的代码中插入）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Stop</span><span class="token punctuation">)</span> music<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">musicStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以得到输出（已略掉其他输出）</p><pre class="line-numbers language-none"><code class="language-none">Music stop...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Over.</p><hr><p>综上，简而言之，AOP 基本就是首先用 IOC 注入依赖，然后 ：</p><ol><li>在增强方法所在类上，引入 <code>@Aspect</code> 注解</li><li>在增强方法上，引入 <code>@Before</code> 等注解，注解里面 写上<code>execution(* com.company.luoxin.user.add(..))</code></li><li>配置文件上加入 <code>@EnableAspectJAutoProxy</code> 注解</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;AOP&quot;&gt;&lt;a href=&quot;#AOP&quot; class=&quot;headerlink&quot; title=&quot;AOP&quot;&gt;&lt;/a&gt;AOP&lt;/h1&gt;&lt;p&gt;Aspect Oriented Programming&lt;/p&gt;
&lt;p&gt;利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.luoxin.vip/categories/Java/"/>
    
    
    <category term="Spring" scheme="https://blog.luoxin.vip/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>IOC 基于注解方式管理</title>
    <link href="https://blog.luoxin.vip/posts/3428300145/"/>
    <id>https://blog.luoxin.vip/posts/3428300145/</id>
    <published>2021-04-25T21:17:38.000Z</published>
    <updated>2022-10-10T03:40:00.936Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IOC-基于注解方式管理"><a href="#IOC-基于注解方式管理" class="headerlink" title="IOC 基于注解方式管理"></a>IOC 基于注解方式管理</h1><p>注解：</p><ol><li>注解是代码特殊标记，格式：<code>@注解名称(属性名称=属性值，属性名称=属性值...)</code></li><li>使用注解，注解作用在类、方法、属性上</li><li>简化 xml 配置</li></ol><p>Spring 针对 Bean 管理中创建对象提供注解</p><ul><li><code>@Component</code></li><li><code>@Service</code></li><li><code>@Controller</code></li><li><code>@Repository</code></li></ul><p>上面四个注解功能是一样的，都可以用来创建 bean 实例</p><h2 id="基于注解实现对象创建"><a href="#基于注解实现对象创建" class="headerlink" title="基于注解实现对象创建"></a>基于注解实现对象创建</h2><ol><li><p><strong>引入依赖</strong></p><p>引入 spring aop 的 jar 包</p></li><li><p><strong>开启组件扫描</strong></p><p><u>注意引入 context</u></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 开启组件扫描     1. 如果扫描多个包，多个包用都好隔开     2. 或者扫描包的包的上层目录     --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.company<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>细节配置：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.company<span class="token punctuation">"</span></span> <span class="token attr-name">use-default-filters</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 只扫描 com.company 中注解为 Controller 的类 --&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.company<span class="token punctuation">"</span></span> <span class="token attr-name">use-default-filters</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>exclude-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 扫描 com.company 中注解为 Controller 以外的类 --&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li><li><p><strong>创建类，在类上面创建对象注解</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 在注解里 value 属性值可以省略不写，默认值是类名称，首字母小写</span><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"User add ...... "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="基于注解实现属性注入"><a href="#基于注解实现属性注入" class="headerlink" title="基于注解实现属性注入"></a>基于注解实现属性注入</h2><ul><li><p><code>@Autowired</code><br>根据属性类型自动装配</p></li><li><p><code>@Qualifier</code></p><p>根据属性名称进行注入</p><p>跟 <code>@Autowired</code> 配合使用，在一个接口有多个实现类的时候，可以通过 <code>@Qualifier(value="impl1")</code> 来指定具体哪个实现类（实现类上注解的 value 值可写可不写）</p></li><li><p><code>@Resource</code></p><p>可以根据类型注入，也可以根据名称注入</p><p>来自 <code>import javax.annotation.Resource;</code> 需要导入 <code>tomcat-annotations-api-8.5.65.jar</code> 包</p><p>所以 java 官方不推荐使用</p></li><li><p><code>@Value</code></p><p>注入普通类型属性</p></li></ul><h2 id="完全注解开发"><a href="#完全注解开发" class="headerlink" title="完全注解开发"></a>完全注解开发</h2><ol><li><p>创建配置类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.company"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写测试类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSpring</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">SpringConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TestAutowire</span> testAutowire <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"testAutowire"</span><span class="token punctuation">,</span> <span class="token class-name">TestAutowire</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        testAutowire<span class="token punctuation">.</span><span class="token function">testAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><p>个人疑问：</p><p>Q: 不论 xml 还是 注解，编写测试类的时候，都创建了 <code>ApplicationContext</code> 对象，但在实际开发中，其实并没有做这步操作，是使用了 Spring Boot 中的什么性质了呢？</p><p>A: <span style="background:#9370DB; color:yellow"> TODO </span> <span style="color: red">该问题有待之后学了 Spring Boot 之后再来解答</span> <span style="background:#9370DB; color:yellow"> TODO </span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;IOC-基于注解方式管理&quot;&gt;&lt;a href=&quot;#IOC-基于注解方式管理&quot; class=&quot;headerlink&quot; title=&quot;IOC 基于注解方式管理&quot;&gt;&lt;/a&gt;IOC 基于注解方式管理&lt;/h1&gt;&lt;p&gt;注解：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;注解是代码特殊标记，格式：</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.luoxin.vip/categories/Java/"/>
    
    
    <category term="Spring" scheme="https://blog.luoxin.vip/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>IOC, 基于 xml 管理 bean</title>
    <link href="https://blog.luoxin.vip/posts/1220496658/"/>
    <id>https://blog.luoxin.vip/posts/1220496658/</id>
    <published>2021-04-23T00:24:25.000Z</published>
    <updated>2022-10-10T03:40:00.936Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IOC-基于-xml-管理-bean"><a href="#IOC-基于-xml-管理-bean" class="headerlink" title="IOC 基于 xml 管理 bean"></a>IOC 基于 xml 管理 bean</h1><p>Inversion Of Control</p><h2 id="IOC-接口"><a href="#IOC-接口" class="headerlink" title="IOC 接口"></a>IOC 接口</h2><ol><li><p>IOC  思想基于 IOC 容器完成 IOC 容器底层就是对象工厂</p></li><li><p>Spring 提供 IOC 容器两种实现方式：</p><ul><li><p><code>BeanFactory</code>: IOC 容器基本实现，是 Spring 内部使用的接口，不提供开发人员使用</p><p><strong>加载配置文件时候不会创建对象，在获取对象（使用）才去创建对象</strong></p></li><li><p><code>ApplicationContext</code>: <code>BeanFactory</code> 接口的子接口，提供更多更强大的功能，一般由开发人员进行使用</p><p>加载配置文件时候就会把配置文件对象进行创建</p></li></ul></li><li><p><code>ApplicationContext</code> 接口有实现类</p><p><img src="https://gitee.com/xinlx/pic/raw/master/img/image-20210421215027299.png"></p><p><code>FileSystemXmlApplicationContext</code> 要写绝对路径</p><p><code>ClassPathXmlApplicationContext</code> 写相对路径</p></li></ol><h2 id="IOC-操作-Bean-管理"><a href="#IOC-操作-Bean-管理" class="headerlink" title="IOC 操作 Bean 管理"></a>IOC 操作 Bean 管理</h2><ol><li>什么是 Bean 管理<ul><li>Spring 创建对象</li><li>Spring 注入属性</li></ul></li><li>Bean 管理操作有两种方式<ul><li>基于 xml 配置文件方式实现</li><li>基于注解方式实现</li></ul></li></ol><h3 id="基于-xml-方式管理"><a href="#基于-xml-方式管理" class="headerlink" title="基于 xml 方式管理"></a>基于 xml 方式管理</h3><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><ul><li><p>在 Spring 配置文件中，使用 bean 标签，标签里添加对应属性，就可以实现对象创建</p><p><img src="https://gitee.com/xinlx/pic/raw/master/img/image-20210421220125966.png" alt="image-20210421220125966"></p></li><li><p>介绍常用的属性</p><p>id 属性：唯一标识</p><p>class 属性：类全路径（包类路径）</p></li><li><p>创建对象的时候，默认执行无参构造方法完成创建</p></li></ul><h4 id="注入属性"><a href="#注入属性" class="headerlink" title="注入属性"></a>注入属性</h4><p>DI: 依赖注入，就是注入属性</p><p>DI 是 IOC 的一种实现方式</p><h5 id="使用-set-方法注入"><a href="#使用-set-方法注入" class="headerlink" title="使用 set 方法注入"></a>使用 set 方法注入</h5><p>创建属性的 set 方法</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- set 方法注入属性--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>book<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.company.spring5.testdemo.Book<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 使用 property 完成属性注入    name: 类属性名称    value: 向属性注入的值    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bookName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Love And Peace<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="使用有参构造进行注入"><a href="#使用有参构造进行注入" class="headerlink" title="使用有参构造进行注入"></a>使用有参构造进行注入</h5><p>创建有参构造器</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>college<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.company.spring5.testdemo.College<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Xi<span class="token punctuation">'</span>an<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>NWPU<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><div class="note primary no-icon"><p>个人的问题有：</p><p><strong>Q1: 如果有多个有参构造器，该如何识别</strong></p><p>A1: name属性值就是类属性的名称</p><p><strong>Q2: 如果参数是一个对象，该如何传值</strong></p><p>A2: 先创建一个 bean，然后用 ref 属性，ref 属性值即为前者的 id 值</p></div><h5 id="注入其他类型属性"><a href="#注入其他类型属性" class="headerlink" title="注入其他类型属性"></a>注入其他类型属性</h5><ul><li><p><strong>字面量</strong></p><ul><li><p>null 值</p><p> 使用 null 标签</p> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>college<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.company.spring5.testdemo.College<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>location<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Xi<span class="token punctuation">'</span>an<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>null</span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--注意用 property 也可以--&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>特殊字符</p><ol><li><p>转义</p><p>&amp;gt; &amp;lt;</p></li><li><p>把特殊内容写进 CDATA</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>college<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.company.spring5.testdemo.College<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>location<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Xi<span class="token punctuation">'</span>an<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[&lt;&lt;Xi'an&gt;&gt;]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--注意用 property 也可以--&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ul></li><li><p><strong>注入属性-外部 bean</strong></p><p>先用 bean 创建对象，然后用 ref 引用</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>book<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.company.spring5.testdemo.Book<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bookName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Love And Peace<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>college<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.company.spring5.testdemo.College<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>location<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Xi<span class="token punctuation">'</span>an<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span><span class="token cdata">&lt;![CDATA[&lt;&lt;Xi'an&gt;&gt;]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>book<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>book<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>注入属性-内部 bean</strong></p></li></ul><blockquote><p>  eg: 一对多 Department - Employee 在 Employee 中表示所属的 Department</p><p>   在创建 Employee 的 bean 时，嵌套一个 Department 的 bean</p></blockquote><ul><li><p><strong>级联赋值</strong></p><p>两种方法</p><ol><li><p>在外部 bean 中赋值，然后 ref 引用</p></li><li><p>也可以在外部创建 bean，然后用</p></li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>department.name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 注意 name 的值--&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>注入集合属性</p><p>类属性定义如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> coursers<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> set<span class="token punctuation">;</span><span class="token comment">// 注意还要有相关属性的 set 方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>xml 如下</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.company.spring5.collectiontype.Student<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>coursers<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>sql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>Jack<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>Mary<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>spring<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cpp<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stl<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>set<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>Mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>Nosql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  Q: 枚举的方式始终有点笨拙，如何实现类似 for 循环的遍历</p><p>  A: 暂无，或许问题也有问题？</p></blockquote><p>在集合中引用对象：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>courseList<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>course1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ref</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>course2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ref</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将集合提取：</p><ol><li><p>在 xml 配置文件中，引入 util</p></li><li><p>提取 list 集合属性注入</p></li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">util:</span>list</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bookList<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>yyy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">util:</span>list</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 中间也可以用 ref 替换 value 来引用一个对象--&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>注入使用</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>boolList<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><span style="color: red">Spring 有两种 bean，一种普通 bean，另一种工厂 bean (FactoryBean)</span></p><ul><li>普通 bean: 在配置文件中定义 bean 类型就是返回类型（如上面所创建的 bean）</li><li>工厂 bean: 在配置文件中定义 bean 类型可以和返回类型不一样</li></ul><h3 id="bean-作用域"><a href="#bean-作用域" class="headerlink" title="bean 作用域"></a>bean 作用域</h3><p>在 Spring 中，设置创建 bean 实例默认是单例</p><blockquote><p>  Q: 如何设置是多实例还是单实例</p><p>  A: scope 属性，scope 属性默认属性值是 “singleton”，可以设置为 “prototype” 来表示多实例对象</p><p>  ​     singleton 与 prototype 的区别：</p><p>  ​     singleton 在加载 Sping 配置文件的时候就会创建单实例对象</p><p>  ​     prototype 则是在调用 getBean 方法时创建多实例对象</p></blockquote><h3 id="bean-生命周期"><a href="#bean-生命周期" class="headerlink" title="bean 生命周期"></a>bean 生命周期</h3><ol><li>通过构造器创建 bean 实例（无参构造）</li><li>为 bean 的属性设置值和对其他 bean 引用（调用 set 方法）</li><li>调用 bean 的初始化的方法（需要进行配置初始化的方法）</li><li>bean 可以使用了（对象获取到了）</li><li>当容器关闭时，调用 bean 的销毁的方法（需要进行配置销毁的方法）</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>course<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.company.spring5.collectiontype.Course<span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>destroy<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>courseName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cpp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="bean-的后置处理器"><a href="#bean-的后置处理器" class="headerlink" title="bean 的后置处理器"></a>bean 的后置处理器</h3><ol><li>通过构造器创建 bean 实例（无参构造）</li><li>为 bean 的属性设置值和对其他 bean 引用（调用 set 方法）</li><li><strong>把 bean 实例传递 bean 前置处理器的方法</strong></li><li>调用 bean 的初始化的方法（需要进行配置初始化的方法）</li><li><strong>把 bean 实例传递 bean 后置处理器的方法</strong></li><li>bean 可以使用了（对象获取到了）</li><li>当容器关闭时，调用 bean 的销毁的方法（需要进行配置销毁的方法）</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myBeanPost<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.company.spring5.testdemo.MyBeanPost<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- MyBeanPost 是 BeanPostProcessor 的实现类 --&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="xml-自动装配"><a href="#xml-自动装配" class="headerlink" title="xml 自动装配"></a>xml 自动装配</h3><p>自动装配：根据指定装配规则（属性名称或者属性类型），Spring 自动将匹配的属性值进行注入</p><p>一般很少用</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>employee<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.company.spring5.autowire.Employee<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- autowire 常用有两个值 1. byName  2. byType        byName 根据属性名称注入，注入值 bean 的 id 值和类属性名称一样        byType 根据属性类型注入，但是注意不能有多个相同类型的对象     --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>department<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.company.spring5.autowire.Department<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="操作外部属性文件"><a href="#操作外部属性文件" class="headerlink" title="操作外部属性文件"></a>操作外部属性文件</h3><ol><li><p>引入 <code>context</code> 标签</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!-- 注意要在 xml 文件上方导入 context 这个标签 --&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>使用 <code>${}</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSouce<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.aaa.bbb<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${xxx.url}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><hr><p>个人总结，xml 配置，无非就是</p><ul><li><p>用 <strong><code>&lt;bean&gt;&lt;/bean&gt;</code></strong> 标签，来创建对象，其中有 <code>id</code>, <code>class</code> 等属性，</p><p><code>scope</code> 可以用来区别单例还是多例，</p><p><code>init-method</code>, <code>destory-method</code> 用来传递后置处理器，</p><p><code>autowire</code> 用来自动装配</p></li><li><p>用 <strong><code>&lt;property&gt;&lt;/property&gt;</code></strong> 标签来注入属性，其中有 <code>name</code>, <code>value</code> 等属性，</p><p><code>ref</code> 可用来注入外部对象/属性，</p><p>对于集合类属性，可以用 <code>array</code>, <code>list</code>, <code>set</code> 等标签</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;IOC-基于-xml-管理-bean&quot;&gt;&lt;a href=&quot;#IOC-基于-xml-管理-bean&quot; class=&quot;headerlink&quot; title=&quot;IOC 基于 xml 管理 bean&quot;&gt;&lt;/a&gt;IOC 基于 xml 管理 bean&lt;/h1&gt;&lt;p&gt;Invers</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.luoxin.vip/categories/Java/"/>
    
    
    <category term="Spring" scheme="https://blog.luoxin.vip/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Windows常用软件</title>
    <link href="https://blog.luoxin.vip/posts/892930798/"/>
    <id>https://blog.luoxin.vip/posts/892930798/</id>
    <published>2021-04-16T23:05:40.000Z</published>
    <updated>2022-10-10T03:40:00.936Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Windows-常用软件推荐"><a href="#Windows-常用软件推荐" class="headerlink" title="Windows 常用软件推荐"></a>Windows 常用软件推荐</h1><p>最近重新给电脑装了一个专业版的 Win10，很多软件又得重新下载，所以想着写篇文章记录一下，也方便自己之后类似情况直接用起来。</p><h2 id="Daily"><a href="#Daily" class="headerlink" title="Daily"></a>Daily</h2><ol><li><p><a href="https://pc.weixin.qq.com/">微信</a></p></li><li><p><a href="https://im.qq.com/pcqq/">QQ</a></p></li><li><p><a href="https://www.google.com/intl/zh-CN/chrome/">Chrome</a></p></li></ol><h2 id="Tool"><a href="#Tool" class="headerlink" title="Tool"></a>Tool</h2><ol><li><a href="https://www.7-zip.org/download.html">7z</a> : 压缩文件</li><li>PDF 阅读器（推荐 Adobe）</li><li><a href="https://www.autohotkey.com/">AutoHotKey</a> : 自定义快捷键</li><li><a href="https://gitee.com/xinlx/pic/blob/master/Software/DnsJumper.exe">DnsJumper</a> : 开源的 DNS 服务器测试工具</li><li><a href="http://www.dropitproject.com/">DropIt</a> : 文件分类</li><li><a href="https://www.voidtools.com/zh-cn/">Everything</a> : 文件索引</li><li><a href="https://gitee.com/xinlx/pic/blob/master/Software/TrayS%20v1.0.2.zip">TrayS</a> : 任务栏美化工具，来自 52pojie</li><li><a href="https://github.com/Molunerfinn/PicGo/releases">PicGo</a> : 文件上传，链接图床</li><li><a href="https://github.com/QL-Win/QuickLook/releases">QuickLook</a> : 文件预览</li><li><a href="https://typora.io/">Typora</a> : MarkDown 文件编辑器</li><li><del><a href="https://gitee.com/xinlx/pic/blob/master/Software/v2rayN.zip">V2rayN</a> : 访问 Google 用</del></li><li>Clash for Windows: 访问 Google</li><li>Snipaste: 截图软件</li><li>Office</li></ol><h2 id="Game"><a href="#Game" class="headerlink" title="Game"></a>Game</h2><ol><li><a href="https://store.steampowered.com/about/">Steam</a></li><li>epic</li></ol><h2 id="Programming"><a href="#Programming" class="headerlink" title="Programming"></a>Programming</h2><ol><li><a href="https://www.eclipse.org/downloads/">Eclipse</a></li><li>IDEA</li><li><a href="https://git-scm.com/downloads">Git</a></li><li><a href="https://maven.apache.org/download.cgi">Maven</a></li><li>JDK</li><li><a href="https://code.visualstudio.com/download">VS Code</a></li><li><a href="https://www.navicat.com.cn/download/navicat-premium">Navicat Premium 15</a></li><li><a href="https://nodejs.org/zh-cn/download/">NodeJs</a></li><li><a href="https://www.netsarang.com/zh/xshell-download/">XSHELL</a></li><li><a href="https://www.scootersoftware.com/download.php">Beyondsoft Compare 4</a> : 文件对比，<a href="https://gitee.com/xinlx/pic/tree/master/BeyondCompareActivate">激活</a></li><li><a href="https://github.com/microsoft/terminal/releases">Windows Terminal</a></li></ol><p>还有 MySQL，XFTP 以及其他的开发环境就不说了。</p><hr><p>以上基本就是本机电脑全部的软件了。</p><p>谢谢！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Windows-常用软件推荐&quot;&gt;&lt;a href=&quot;#Windows-常用软件推荐&quot; class=&quot;headerlink&quot; title=&quot;Windows 常用软件推荐&quot;&gt;&lt;/a&gt;Windows 常用软件推荐&lt;/h1&gt;&lt;p&gt;最近重新给电脑装了一个专业版的 Win10，</summary>
      
    
    
    
    <category term="其他" scheme="https://blog.luoxin.vip/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="软件推荐" scheme="https://blog.luoxin.vip/tags/%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
    
  </entry>
  
  <entry>
    <title>Powershell执行java命令乱码</title>
    <link href="https://blog.luoxin.vip/posts/195609546/"/>
    <id>https://blog.luoxin.vip/posts/195609546/</id>
    <published>2021-04-15T21:49:00.000Z</published>
    <updated>2022-10-10T03:40:00.936Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Powershell-执行-java-命令乱码"><a href="#Powershell-执行-java-命令乱码" class="headerlink" title="Powershell 执行 java 命令乱码"></a>Powershell 执行 java 命令乱码</h1><p>问题：下载完 OpenJDK 并配好环境变量后，在 Powershell 中，输入</p><pre class="line-numbers language-none"><code class="language-none">java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示乱码</p><img src="https://gitee.com/xinlx/pic/raw/master/img/image-20210415215751031.png" alt="image-20210415215751031" style="zoom: 67%;"><p>Powershell 编码是 </p><div color="red">adb</div><p></p><p style="{color:&quot;red&quot;}">UTF8</p><p>解决：</p><p>添加环境变量</p><p><img src="https://gitee.com/xinlx/pic/raw/master/img/image-20210415215923941.png" alt="image-20210415215923941"></p><blockquote>  <pre class="line-numbers language-none"><code class="language-none">JAVA_TOOL_OPTIONS-Dfile.encoding=UTF-8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><p>或者把语言设置为英文也行</p><blockquote>  <pre class="line-numbers language-none"><code class="language-none">JAVA_TOOL_OPTIONS-Duser.language=en<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><p>以下是修复之后的情况</p><img src="https://gitee.com/xinlx/pic/raw/master/img/image-20210415221901717.png" alt="image-20210415221901717" style="zoom:67%;"><p>另外，如果将 Powershell 的编码设置为 GBK 的话，输入 java 命令后，也会显示正常，但是 java 运行程序输出的中文，又会有乱码，归根结底还是，编码不一样导致乱码。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Powershell-执行-java-命令乱码&quot;&gt;&lt;a href=&quot;#Powershell-执行-java-命令乱码&quot; class=&quot;headerlink&quot; title=&quot;Powershell 执行 java 命令乱码&quot;&gt;&lt;/a&gt;Powershell 执行 jav</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.luoxin.vip/categories/Java/"/>
    
    <category term="FixProblem" scheme="https://blog.luoxin.vip/categories/FixProblem/"/>
    
    
    <category term="PowerShell" scheme="https://blog.luoxin.vip/tags/PowerShell/"/>
    
  </entry>
  
  <entry>
    <title>WindowsTerminal Powershell Git 命令行美化</title>
    <link href="https://blog.luoxin.vip/posts/2146130007/"/>
    <id>https://blog.luoxin.vip/posts/2146130007/</id>
    <published>2021-04-13T22:28:04.000Z</published>
    <updated>2022-10-10T03:40:00.936Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WindowsTerminal-Powershell-Git-命令行美化"><a href="#WindowsTerminal-Powershell-Git-命令行美化" class="headerlink" title="WindowsTerminal Powershell Git 命令行美化"></a>WindowsTerminal Powershell Git 命令行美化</h1><p>本篇文章用于分享博主电脑中对相关命令行的美化。</p><p>先给出大概的预览效果</p><img src="https://gitee.com/xinlx/pic/raw/master/img/allpreview.jpg" style="zoom:50%;"><details class="note info"><summary><p>simple</p></summary>  <p>4.22更新：</p><p>Windows Terminal 新版之后，终于推出了设置的 UI 界面，以后大部分功能可以直接 <code>Ctrl + ,</code> 在 setting 中设置了。</p><p>再也不用编写烦人的 json 了！！！！！！</p>  </details><h2 id="WindowsTerminal"><a href="#WindowsTerminal" class="headerlink" title="WindowsTerminal"></a>WindowsTerminal</h2><p>有关 WindowsTerminal 的介绍就不用多说了，直接上美化教程。</p><p>额，还是直接上配置文件吧。</p><p>在 WindowsTerminal 里按住 <code>Ctrl + ,</code> 打开配置文件，下载博主个人设置的<a href="https://gitee.com/xinlx/pic/raw/master/img/settings.json">配置文件</a></p><p>最后执行 cv 大法就 ok</p><p>现在对配置文件进行解释说明（其实 Microsoft 的<a href="https://docs.microsoft.com/en-us/windows/terminal/">官方文档</a>已经说明的很详细了，具体可参考 <a href="https://docs.microsoft.com/en-us/windows/terminal/">Docs</a>)</p><p>配置文件里不仅有 PowerShell 的配置，还有 Git 以及 wsl 的配置。此处只说明 PowerShell 和 Git 的配置（因为别的也不常用）。</p><p><code>profiles</code> 中的 <code>defaults</code> 里的配置都是对外观的一些介绍，根据名称应该很容易知道实在设置什么，如果不知道可以自己动手修改一下试试，或者查看<a href="https://docs.microsoft.com/en-us/windows/terminal/">官方文档</a>，其中</p><p><code>background</code> : 可以根据自己的喜好，设置图片，设置好图片的路径就可以了，博主为了避免简约，就没有设置图片背景。</p><p><code>profies</code> 前面的内容，要么是不可以更改要么，已有英文注释说明，此处略去。</p><p><code>fontFace</code> 是字体设置，此处字体不认识没关系，在后面配置进阶样式会有奇效。</p><p>接着 <code>list</code></p><p><code>list</code> 里面就是几个命令行的配置了，PowerShell, CMD, Git 等。</p><p>其中有几个参数可以稍微说明一下：</p><p><code>icon</code> : icon 支持 emoji，所以大家可以像我这样子给每个命令行设置一个有趣的 icon</p><p><code>commandline</code> : 这个是指定 exe 的文件路径，此外说明一下，在博主的配置文件中，Git 的路径是根据自己的电脑路径配置的，大家相应做出更改就行，其中后面加的 <code>--login -i</code> 是避免 Git 中文乱码的情况。</p><pre class="line-numbers language-none"><code class="language-none">"commandline": "D:\\__Program__\\Git\\bin\\bash.exe --login -i"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>startingDirectory</code> : 是设置初始默认打开的路径，比如按照博主对 Git 的配置，在 WindowsTerminal 中打开 Git 命令行，就将显示如下界面</p><img src="https://gitee.com/xinlx/pic/raw/master/img/Git%E6%A0%B7%E5%BC%8F.jpg"><p>即默认在该文件夹中打开Git</p><blockquote><p>  哈哈，肯定跟博主的不一样，因为博主额外对 Git 进行了设置，具体配置可以接着往后看</p></blockquote><p><code>list</code> 里面相关的配置就这些了，其他的内容能看懂的就改改试一试，看不懂的就不要乱改了。</p><p>接着是 <code>schemes</code> ，这里面是相关的配色方法，大家可以自己在网上搜一下子其他的配色方案。</p><p>最后是 <code>actions</code> ，其实<a href="https://docs.microsoft.com/en-us/windows/terminal/">官方文档</a>里说的相当详细了，这里我只是设置了部门的快捷键。</p><p>比如 <code>Ctrl + c</code> 直接复制，<code>Ctrl + num</code> 直接跳转至相应的 tab 页（保持对 chrome 的使用习惯），以及 <code>Ctrl + w</code> 关闭标签页</p><p>更多方法可以查阅<a href="https://docs.microsoft.com/en-us/windows/terminal/">官方文档</a></p><p>关于 WindowsTerminal 的配置就暂时告一段落了，要想获得进一步的视觉效果提升，还得接着往后配置。</p><h2 id="PowerShell"><a href="#PowerShell" class="headerlink" title="PowerShell"></a>PowerShell</h2><p>其实对 PowerShell 的配置，微软同样写了<a href="https://docs.microsoft.com/en-us/windows/terminal/tutorials/powerline-setup">文档</a>进行说明，但是据博主写作日期（2021.04.13）来看，该文档存在一些过时的东西，需要进行修改，不然会配置失败。</p><p>首先是打开 PowerShell</p><p>输入以下命令安装 <code>posh-git</code> 和 <a href="https://ohmyposh.dev/docs/"><code>oh-my-posh</code></a></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">Install-Module</span> posh-git <span class="token operator">-</span>Scope CurrentUser<span class="token function">Install-Module</span> oh-my-posh <span class="token operator">-</span>Scope CurrentUser<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果有提示，一直按 <code>y</code> 就可以了</p><p>然后再输入</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">Set-ExecutionPolicy</span> <span class="token operator">-</span>ExecutionPolicy Bypass<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这一条命令很重要，不要忘记输入，不然之后会报错，无法成功配置</p><p>接着下载或者复制复制博主的 PowerShell 的<a href="https://gitee.com/xinlx/pic/raw/master/img/Microsoft.PowerShell_profile.ps1">配置文件</a></p><p>命名为 <code>Microsoft.PowerShell_profile.ps1</code></p><p>然后将该文件放置于 <code>%userprofile%\Documents\WindowsPowerShell</code> 中（直接将 <code>%userprofile%\Documents\WindowsPowerShell</code> 复制到资源管理器的导航栏就可以到达相应给文件夹下了）（userprofile 是系统变量，存储的是用户文件夹）</p><p>至此美化基本就可以了。</p><p>不过还可以进一步设置，在博主的配置文件中，博主设置了</p><pre class="line-numbers language-none"><code class="language-none">Set-PoshPrompt -Theme emodipt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即使用 emodipt 这个主题（其实自己有做部分修改）</p><p>小伙伴可以根据自己的喜好来设置主题，在 PowerShell 中输入</p><pre class="line-numbers language-none"><code class="language-none">Get-PoshThemes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可查看所有的主题，挑中一款后，输入</p><pre class="line-numbers language-none"><code class="language-none">Set-PoshPrompt -Theme [theme_name]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可能存在的问题有：</p><p>乱码：这是因为 <a href="https://ohmyposh.dev/docs/"><code>oh-my-posh</code></a> 使用了 Nerd Fonts 的原因，由于一般 windows 都不会原厂安装这个字体，所以很多字符会显示乱码，这也就是为什么前面要设置 <code>fontFace</code> 即字体的原因了。</p><p>博主使用了</p><pre class="line-numbers language-none"><code class="language-none">"fontFace": "MesloLGL NF","fontFace": "Cascadia Code PL"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>MesloLGL NF</code> 字体可以通过这个<a href="https://gitee.com/xinlx/pic/raw/master/img/Meslo.zip">🔗链接</a>下载，<code>Cascadia Code PL</code> 字体可以通过这个<a href="https://gitee.com/xinlx/pic/raw/master/img/CascadiaCode-2102.25.zip">🔗链接</a>下载</p><p>在两个文件中选择相应字体安装即可，不行的话，就多安装几个试试。</p><p>另外如果觉得已给的主题都不合心意，想再进一步设置，那就打开 <code>%userprofile%\Documents\WindowsPowerShell\Modules\oh-my-posh\3.137.0\themes</code> 根据已有的主题照猫画虎，或者直接修改已有的主题配置文件（即 json 文件）</p><blockquote><p>  注意：路径中 <code>3.137.0</code> 是 <code>oh-my-posh</code> 的版本，不同时间下载，版本可能不一致，根据自己的情况进行修改就可以了。</p></blockquote><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p>其实配置了 PowerShell 之后，直接在 PowerShell 中使用 Git 会更加美观。但是此处还是给出配置文件，进行适当美化。</p><p>直接给出博主的<a href="https://gitee.com/xinlx/pic/raw/master/img/git-prompt.sh">配置文件</a></p><p>将这个文件直接替换 Git 安装目录下的 <code>etc\profile.d\git-prompt.sh</code> 文件即可，注意名字不要变。</p><p>具体的配置说明，大家直接上网搜吧，博主累了，要睡觉了。</p><p>有什么问题，可以在文章下方评论区留言，楼主会很快回复。（记住留下邮箱，方便博主可以回复哦）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;WindowsTerminal-Powershell-Git-命令行美化&quot;&gt;&lt;a href=&quot;#WindowsTerminal-Powershell-Git-命令行美化&quot; class=&quot;headerlink&quot; title=&quot;WindowsTerminal Powe</summary>
      
    
    
    
    <category term="教程" scheme="https://blog.luoxin.vip/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Git" scheme="https://blog.luoxin.vip/tags/Git/"/>
    
    <category term="PowerShell" scheme="https://blog.luoxin.vip/tags/PowerShell/"/>
    
    <category term="WindowsTerminal" scheme="https://blog.luoxin.vip/tags/WindowsTerminal/"/>
    
    <category term="美化" scheme="https://blog.luoxin.vip/tags/%E7%BE%8E%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Become a Leader by Thinking Like an Owner</title>
    <link href="https://blog.luoxin.vip/posts/3265444336/"/>
    <id>https://blog.luoxin.vip/posts/3265444336/</id>
    <published>2021-04-06T21:11:36.000Z</published>
    <updated>2022-10-10T03:40:00.936Z</updated>
    
    <content type="html"><![CDATA[<h1 id="成为像老板一样思考的领导"><a href="#成为像老板一样思考的领导" class="headerlink" title="成为像老板一样思考的领导"></a>成为像老板一样思考的领导</h1><p>节后第一天上班路上，其实很是担心自己被批评，因为近些天的产出几乎为零，想起上周五，大leader得知我女朋友千里迢迢前来看望我，还特许我在家办公<del>（其实哪来办公，无非是小长假又多了一天而已）</del>。一路不安之下，想起上周大leader说的话，慢慢审视起自己一贯的思维模式了。</p><p>如果我是一个领导者，我是否还会把自己放在一个被审视的角度，被人督促才去完成任务？</p><p>如果我是一个领导者，我是否还会持有完成任务的心态，而非把事情干好的心态？</p><p>如果我是一个领导者，我是否还会等待上级安排任务，而非自己主动承担？</p><p>同一份工作，不同的人有不同的收获，其中的区别就在于自己如何去思考，如何去进步。</p><p>前几天公众号很火的张一鸣的微博，里面有一条就是说</p><blockquote><p>  把自己当老板看，像老板一样拼命干活，能力自然就提高了。</p></blockquote><p>讲真，回首过去半年在公司的事情，自己的心态一直都是一种得过且过的心态，希望自己今后可以引以为戒。</p><p>要想成为领导，先让自己像领导一样思考！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;成为像老板一样思考的领导&quot;&gt;&lt;a href=&quot;#成为像老板一样思考的领导&quot; class=&quot;headerlink&quot; title=&quot;成为像老板一样思考的领导&quot;&gt;&lt;/a&gt;成为像老板一样思考的领导&lt;/h1&gt;&lt;p&gt;节后第一天上班路上，其实很是担心自己被批评，因为近些天的产出</summary>
      
    
    
    
    <category term="个人随想" scheme="https://blog.luoxin.vip/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>tagPlugin</title>
    <link href="https://blog.luoxin.vip/posts/1175902008/"/>
    <id>https://blog.luoxin.vip/posts/1175902008/</id>
    <published>2021-04-05T10:35:52.000Z</published>
    <updated>2022-10-10T03:40:00.936Z</updated>
    
    <content type="html"><![CDATA[<p><strong>以下为外挂标签的测试样式</strong></p><div class="tip"><p>默认情况</p><p></p><p>默认情况</p><p></p></div><div class="tip info"><p>info</p><p></p><p>info</p><p></p></div><div class="tip success"><p>success</p><p></p><p>success</p><p></p></div><div class="tip error"><p>error</p><p></p><p>error</p><p></p></div><div class="tip warning"><p>warning</p><p></p><p>warning</p><p></p></div><div class="tip font5 fas fa-atom"><p>自定义font5图标</p><p></p><p>自定义font5图标</p><p></p></div><div class="tip custom icon-QQ2"><p>自定义iconfont图标</p><p></p><p>自定义iconfont图标</p><p></p></div><div class="tip wtgo font5 fas fa-bolt"><p>文字</p><p>sfd</p></div><div class="tip ban font5 fas fa-ban"><p>文字</p><p>sdf</p></div><div class="tip home font5 fas fa-home"><p>文字</p><p>sdf</p></div><div class="tip important font5 fas fa-home"><p>魔改标签4</p><p>sdf</p></div><div class="tip ref font5 fas fa-sync"><p>魔改标签5</p><p>dsf</p></div><div class="tip ffa font5 fas fa-cogs"><p>魔改标签6</p><p>sdf</p></div><div class="tip key font5 fas fa-key"><p>魔改标签7</p><p>sdf</p></div><div class="tip socd font5 fas fa-bell"><p>魔改标签8</p><p>sdf</p></div><div class="tip qq font5 fab fa-qq"><p>魔改标签9</p><p>sdf</p></div><p>/* default */</p><div class="note icon custom iconfont icon-QQ2" style="background: #f7f7f7;border-left-color: #777;">  <p>default</p></div>/* success */<div class="note icon custom iconfont icon-QQ2" style="background: #eff8f0;border-left-color: #5cb85c;">  <p>success</p></div>/* primary */<div class="note icon custom iconfont icon-QQ2" style="background: #f5f0fa;border-left-color: #6f42c1;">  <p>primary</p></div>/* info */<div class="note icon custom iconfont icon-QQ2" style="background: #eef7fa;border-left-color: #428bca;">  <p>info</p></div>/* warning */<div class="note icon custom iconfont icon-QQ2" style="background: #fdf8ea;border-left-color: #f0ad4e;">  <p>warning</p></div>/* danger */<div class="note icon custom iconfont icon-QQ2" style="background: #fcf1f2;border-left-color: #d9534f;">  <p>danger</p></div><div class="snote red"><p>默认red</p></div><div class="snote quote"><p>quote</p></div><div class="snote info"><p>info</p></div><div class="snote done"><p>done</p></div><div class="snote success"><p>success</p></div><div class="snote danger"><p>danger</p></div><div class="snote error"><p>error</p></div><div class="snote radiation"><p>radiation</p></div><div class="snote bug"><p>bug</p></div><div class="snote idea yellow"><p>idea-yellow</p></div><div class="snote link blue"><p>link- blue</p></div><div class="snote paperclip"><p>paperclip</p></div><div class="snote todo"><p>todo</p></div><div class="snote msg cyan"><p>msg cyan</p></div><div class="snote guide"><p>guide</p></div><div class="snote download"><p>download</p></div><div class="snote up"><p>up</p></div><div class="snote undo"><p>undo</p></div>/* 引用 */<div class="snote quote"><p class="p subtitle">小标题</p><p>这是个引用</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;以下为外挂标签的测试样式&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;tip&quot;&gt;&lt;p&gt;默认情况&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;默认情况&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;tip info&quot;&gt;&lt;p&gt;info&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;</summary>
      
    
    
    
    <category term="test" scheme="https://blog.luoxin.vip/categories/test/"/>
    
    
    <category term="标签外挂" scheme="https://blog.luoxin.vip/tags/%E6%A0%87%E7%AD%BE%E5%A4%96%E6%8C%82/"/>
    
  </entry>
  
  <entry>
    <title>Hexo + Github 搭建博客</title>
    <link href="https://blog.luoxin.vip/posts/11761234/"/>
    <id>https://blog.luoxin.vip/posts/11761234/</id>
    <published>2021-03-31T21:05:46.000Z</published>
    <updated>2022-10-10T03:40:00.936Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-Github-搭建博客"><a href="#Hexo-Github-搭建博客" class="headerlink" title="Hexo + Github 搭建博客"></a>Hexo + Github 搭建博客</h1><p>一开始接触写博客，还是在之前找工作的时候，大家都说这样子可以成为一个加分项，但当时虽然找工作很不顺利，也没选择这样做，反倒现在逐渐安定下来，倒是想起来这事情了。哈哈，并不是为了以后跳槽，主要原因还是觉得这事情很酷炫，其次就是想记录自己的成长过程，再就是记录一下学习和工作上的小问题。</p><p>好了，废话不多说，现在开始了。本篇教程的详略程度，完全依据我自己实际配置过程中的问题来的。</p><h2 id="准备工作（环境配置）"><a href="#准备工作（环境配置）" class="headerlink" title="准备工作（环境配置）"></a>准备工作（环境配置）</h2><p>所需环境有： <code>Node</code>, <code>Git</code></p><p>其他准备条件有：<code>Github</code> 账号</p><ol><li><p>从<a href="https://nodejs.org/en/">官网</a>下载 Node，最新版即可，LTS 版本</p><p><img src="https://z3.ax1x.com/2021/03/31/cARK2R.png" alt="node下载"></p></li><li><p>从<a href="https://git-scm.com/">官网</a>下载 git，最新版即可</p><p><img src="https://z3.ax1x.com/2021/03/31/cARBsP.png" alt="git 下载"></p></li><li><p>按住 Win + x 键，打开 <code>Windows PowerShell管理员</code> ，或者 Win + s 键，输出 <code>Windows PowerShell</code> 打开</p></li><li><p>依次输入以下命令，并回车</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">node <span class="token operator">-</span>vnpm <span class="token operator">-</span>vgit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果每一步都正常有输出，那就下一步</p><blockquote><p>   如果出现红字显示</p></blockquote></li></ol><blockquote></blockquote><pre><code>&gt;   &lt;span style="color: red"&gt;无法将“node”项识别为 cmdlet、函数、脚本文件或可运行程序的名称。请检查名称的拼写，如果包括路径，&gt;   请确保路径正确，然后再试一次。&lt;/span&gt;</code></pre><blockquote></blockquote><pre><code>&gt;   那么自行搜索[Windows如何配置环境变量](https://www.baidu.com/s?ie=UTF-8&amp;wd=Windows%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F)，配置好 `Node` 或者 `Git` 的环境变量之后，下一步</code></pre><ol start="5"><li>打开 <a href="https://github.com/">GitHub</a> 注册账号，如果无法打开 <a href="https://github.com/">GitHub</a> ，那就点击右上角的 <span style="color:red"> X </span> 放弃该教程</li></ol><h2 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h2><ol><li><p>在 <code>PowerShell</code> 中依次执行</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">npm install webpack <span class="token operator">-</span>gnpm install <span class="token operator">-</span>g hexo-<span class="token function">cli</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果有提示 error，自行<a href="https://www.baidu.com/">百度</a></p></li><li><p>在任意位置新建文件夹（最好不要在 C 盘），（任意命名，博主默认为 Blog 文件夹）</p><p>然后在该文件夹内部上方的导航栏里，输入 <code>PowerShell</code> 并回车，或者一只手按住 shift 键，一只手右击文件夹内空白区域，选择 <code>在此处打开 PowerShell</code>，或者选择 <code>在此处打开 cmd</code></p></li><li><p>接着在上一步弹出的命令行窗口中，输入</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>​    </p><h2 id="绑定-Git-仓库"><a href="#绑定-Git-仓库" class="headerlink" title="绑定 Git 仓库"></a>绑定 Git 仓库</h2><p>在前面已经提到过，要注册 <a href="https://github.com/">GitHub</a> 账号，现在就需要这个了</p><ol><li><p>打开 <a href="https://github.com/">GitHub</a> 并登录，点击右上角头像旁边的 + ，选择 <code>New repository</code></p></li><li><p>此时跳转到一个新建仓库的界面</p><p>在 <code>Repository name</code> 下输入 <code>xxx.github.io</code> </p><p>其中 <code>xxx</code> 是你的用户名</p><div class="note warning"><p>这个命名很重要，博主就是因为这一步没设置对，浪费了很多时间</p><p>输入完之后直接确认就行，不需要更改其他的设置</p></div></li><li><p>此时回到之前建立的文件夹中，右键选择 <code>Git Bash Here</code> </p></li><li><p>在执行完上述第二步后，会跳转到一个新的页面</p><p>会出现类似如下的命令</p><p><img src="https://z3.ax1x.com/2021/03/31/cA4G6A.png" alt="git 命令"></p><p>依次在第三步弹出的命令行窗口中，输入以上命令即可</p><blockquote><p>  <span style="color:purple">在执行 <code>git commit</code> 或者 <code>git push</code> 这一行命令的时候，会让你输入 email，username </span></p><p>  按照提示，执行 </p>  <pre class="line-numbers language-git" data-language="git"><code class="language-git">git config --global user.email <span class="token string">'your email'</span>git config --global user.username <span class="token string">'your username'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>   其中引号内的部分，分别替换成注册 GitHub 时用的，邮箱和用户名即可</p><p>  之后还会有登陆验证，正常操作就行</p></blockquote><p>此时记住，倒数第二条命令中，<code>https</code> 的部分就是你新建的仓库 url 地址，之后还会用到</p></li><li><p>此时，在切换回先前打开的 PowerShell 或者 cmd 界面，（貌似 Git 命令行执行 <code>hexo</code> 需要重新配置，所以此处没有采用）</p><p>依次输入</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">hexo ghexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果每一步都运行正确，那么在最后应该会显示一行</p><blockquote><p>  <code>INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</code></p></blockquote><p>按住 Ctrl 键，点击那个 <a href="http://localhost:4000/">http://localhost:4000</a></p><p>此时如果在浏览器自动打开了一个新的正常能访问的页面，那么恭喜你现在已经成功了一大半了！就差临门一脚了！</p></li><li><p>好好欣赏一下新打开的页面，这就是你之后搭建成功后的博客的样子！欣赏完了之后，我们再回到刚刚的命令行界面，按住 Ctrl + C 退出，由于该网站此时还不能在公网上访问，所以需要我们接着进行最后一点设置！</p></li></ol><h2 id="将-Hexo-部署到-Github"><a href="#将-Hexo-部署到-Github" class="headerlink" title="将 Hexo 部署到 Github"></a>将 Hexo 部署到 Github</h2><ol><li><p>打开上面新建的 Blog 文件夹，用记事本打开里面的 <code>_config.yml</code> 文件，在文件最后添加以下内容</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">deploy:  type: git  repository: &lt;url&gt;  #你的仓库地址  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意要将上述的 &lt;url&gt; 替换为 你的仓库地址，应该是形如这个样子</p><p><code>https://github.com/xxx/xxx.github.io.git</code></p><p>其中 <code>xxx</code> 是你在 GitHub 的用户名</p><p>注意冒号后面都要有一个空格</p></li><li><p>再回到刚刚打开的 PowerShell 命令行，输入</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">npm install hexo-deployer-git <span class="token operator">--</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>最后依次输入</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">hexo cleanhexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行完毕后，打开 <code>https://xxx.github.io</code> 就可以看到你的博客界面了。（将 <code>xxx</code> 替换成你的用户名）</p><p>Congratulation！</p><h2 id="使用个人域名"><a href="#使用个人域名" class="headerlink" title="使用个人域名"></a>使用个人域名</h2><blockquote><p>  2021.06.25 补充</p></blockquote><p>可以注意到，今后访问自己的个人博客都需要输入 <code>.github.io</code> 后缀，体验不是很好，如果你的用户名很长的话，那就更加糟糕了。</p><p>试想如果可以输入这样的域名 <a href="https://luoxin.vip/">luoxin.vip</a>，岂不是很爽？</p><p>于是咱说干就干！</p><blockquote><p>  首先说明，其实购买一般的域名真不贵，一年在30以内，像一些 <code>.top</code>, <code>.xyz</code> 等域名更是很便宜，一年只需要5块钱。</p></blockquote><ol><li><p>首先打开命令行工具，``Powershell<code>或者</code>CMD<code>执行以下命令（注意将</code>username` 替换为自己的用户名）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ping</span> username.github.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到如下输出</p><p><img src="https://gitee.com/xinlx/pic/raw/master/ping.png" alt="image-20210625210821211"></p><p>其中 <code>[185.***.***.***]</code> 就是博客的公网 ip 了，记住这个。</p></li><li><p>接着搜索 ”域名注册“，然后找到腾讯云或者阿里云，选择合适的进行购买（需要进行实名认证）。</p></li><li><p>购买完成后，应该会进入控制台，选择 我的域名 -&gt; 解析</p><p><img src="https://gitee.com/xinlx/pic/raw/master/%E5%9F%9F%E5%90%8D%E6%B3%A8%E5%86%8C.png"></p><p>接着进入一个新的界面，点击快速添加解析，输入刚刚在第 1 步得到的 ip 地址即可，（也可点击添加记录）。</p><p><img src="https://gitee.com/xinlx/pic/raw/master/jiexi.png" alt="image-20210625211223283"></p></li><li><p>在博客文件的根目录，找到 source 文件夹</p></li></ol><p><img src="https://gitee.com/xinlx/pic/raw/master/20210625211704127.png" alt="image-20210625211704127"></p><p>​在里面添加一个名为 <code>CNAME</code> 的文件，文件内容为第 2 步中注册的域名，如 <a href="https://luoxin.vip/"><code>luoxin.vip</code></a></p><blockquote><p>  不会的同学，可以先新建名为 <code>CNAME.txt</code> 的文件，然后用记事本打开，输入域名，保存后，重命名为 <code>CNAME</code></p></blockquote><ol start="5"><li><p>保存之后，接着在 <code>Powershell</code> 或者 <code>CMD</code> 依次执行以下命令 <code>hexo g</code>，<code>hexo d</code></p></li><li><p>最后一步，打开 github 里，个人博客对应的 repository，打开 setting -&gt; pages</p><p><img src="https://gitee.com/xinlx/pic/raw/master/0210625212541095.png" alt="image-20210625212541095"></p><p>在 <code>Custom domain</code> 处输入自己的域名</p></li><li><p>至此大功告成！！！！！！</p></li></ol><hr><p>此时搭建网站的过程已基本完成，接下来，你可以查阅 <a href="https://hexo.io/zh-cn/docs/">Hexo</a> 文档来进一步优化、美化！</p><p>感谢阅读！如安装过程有任何问题，欢迎讨论！</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Hexo-Github-搭建博客&quot;&gt;&lt;a href=&quot;#Hexo-Github-搭建博客&quot; class=&quot;headerlink&quot; title=&quot;Hexo + Github 搭建博客&quot;&gt;&lt;/a&gt;Hexo + Github 搭建博客&lt;/h1&gt;&lt;p&gt;一开始接触写博客，还</summary>
      
    
    
    
    <category term="教程" scheme="https://blog.luoxin.vip/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Hexo" scheme="https://blog.luoxin.vip/tags/Hexo/"/>
    
    <category term="搭建博客" scheme="https://blog.luoxin.vip/tags/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
