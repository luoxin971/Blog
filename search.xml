<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>避坑指南</title>
      <link href="posts/1628046549/"/>
      <url>posts/1628046549/</url>
      
        <content type="html"><![CDATA[<p>本文目的在于记录平时工作学习中踩到的坑，方便后面回顾</p><h2 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h2><ul><li><p>ubuntu 磁盘挂载、扩容 <a href="https://blog.csdn.net/littlehaes/article/details/103032658">https://blog.csdn.net/littlehaes/article/details/103032658</a><br>  可以用 <code>gparted</code> 进行扩容，然后利用上述链接进行备份、重新挂载</p></li><li><p>vim 中文乱码<br>  <a href="https://blog.csdn.net/sinat_21302587/article/details/77962152">https://blog.csdn.net/sinat_21302587/article/details/77962152</a></p></li><li><p>systemd service 实时查看某一 service 的日志</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo journalctl -fu my_unit.service</span><br></pre></td></tr></table></figure><p>  <a href="https://superuser.com/questions/1292766/how-to-follow-systemd-unit-log">https://superuser.com/questions/1292766/how-to-follow-systemd-unit-log</a></p></li><li><p>ubuntu 编辑文件管理器的右键菜单</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install nautilus-actions</span><br></pre></td></tr></table></figure><p>  然后通过 file manager actions 来操作</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu 快捷键快速打开终端</title>
      <link href="posts/3982739973/"/>
      <url>posts/3982739973/</url>
      
        <content type="html"><![CDATA[<h2 id="痛点"><a href="#痛点" class="headerlink" title="痛点"></a>痛点</h2><p>每次在 <code>ubuntu</code> 上使用 <code>terminal</code> 的时候，<code>ctrl+alt+t</code> 的快捷键虽然能够快速的打开终端，但是在已有 <code>terminal</code> 窗口打开的时候，仍然会新建新的窗口。而不会打开原有已打开的窗口，让人觉得很难受。</p><p>笔者为了避免这一烦恼，自己写了一个脚本，本文即是记录写脚本的过程。</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ol><li>  命令行输入 <code>gnome-terminal</code> 即可打开命令行终端</li><li>  <code>ubuntu</code> 中 <code>settings</code> -&gt; <code>keyboard</code> -&gt; <code>keyboard shortcuts </code>可以自定义快捷键，执行脚本</li><li>  <code>shell</code> 脚本的若干语法（当然可以边查边学）</li><li>  <code>xdotool</code> 命令（也可以现学现卖 :）</li></ol><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><p>在写脚本之前，首先要想，究竟需要的是什么，每一步需要干什么。</p><p>对于本文来说，就是通过快捷键打开 <code>terminal</code>，我们可以编写脚本，利用 <code>ubuntu</code> 自带的社会子通过快捷键绑定到脚本的执行。而脚本的执行，无非就是两种情况</p><ol><li>  <code>terminal</code> 窗口未打开，那就新建一个 <code>terminal</code> 窗口</li><li>  <code>terminal</code> 窗口已打开，那就打开原窗口</li></ol><p>上文说到 <code>gnome-terminal</code> 命令可以直接打开 <code>terminal</code> 窗口，第一种情况 cover。接下来是第二种情况，其实由此产生两个问题：</p><ol><li>  如何判断窗口是否打开</li><li>  如何找到之前已打开的窗口，并打开</li></ol><p>为此我们先介绍一下一个核心命令: <code>xdotool</code> </p><p><code>man xdotool</code> 可以看到其介绍</p><p><img src="https://gitee.com/xinlx/pic/raw/master/img/2022-03-23_23-00.png" alt="2022-03-23_23-00"></p><p>其实 <code>xdotool</code> 相当于 linux 的按键精灵，可以模拟键盘和鼠标的输入，当然还有其他的很多功能，读者可以自行摸索，本文也是在网上无意中看到了 <code>xdotool</code>， 之后自己查看 <code>man xdotool</code> 才有了本文的内容。</p><p>安装该命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install xdotool</span><br></pre></td></tr></table></figure><p><code>man</code> 手册中有这个介绍：</p><p><img src="https://gitee.com/xinlx/pic/raw/master/img/image-20220323230653989.png" alt="image-20220323230653989"></p><p>由此在 terminal 中实验可知</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xdotool search --class chrome</span><br></pre></td></tr></table></figure><p>可以获取到 chrome 的窗口 id，同理其他程序也一样，如 idea, pycharm 等。其实不仅有 <code>class</code>， 往下还有 <code>pid</code>, <code>name</code> ,<code>desktop</code> 等。到这里，我们一个问题就解决了。</p><p>可以通过 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xdotool search --class terminal</span><br></pre></td></tr></table></figure><p>查找到 terminal 的窗口，如果没有返回值，则表示没有已打开的窗口。不过该命令返回值是一串数字，对于我们来说暂时没什么用，但是别急，还有后文。</p><p>我们继续往下翻</p><p><img src="https://gitee.com/xinlx/pic/raw/master/img/image-20220323230933480.png" alt="image-20220323230933480"></p><p><code>windowactivate</code> 不管从名字还是官方的介绍都可以知道，其作用是激活窗口，有了上文 <code>search</code> 到的 <code>id</code>，那这一切就好办了，解决了第二个问题。</p><p>整个脚本如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">pid=`xdotool search --onlyvisible --class terminal`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$&#123;#pid&#125;</span> -gt 0 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">arr=(<span class="variable">$&#123;pid//&quot; &quot;/&#125;</span>)</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;arr[@]&#125;</span>&quot;</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    xdotool windowactivate <span class="variable">$p</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">nohup gnome-terminal&gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>脚本大致思想是</p><ol><li>  执行 <code>xdotool search</code> 命令，并用变量 pid 保存其输出结果</li><li>  通过其字符串长度是否大于 0，判断上述命令是否有返回结果</li><li>  如果有，那就对字符串进行 split，以免有多个结果，对返回的各个 window id 进行激活，即打开相应窗口</li><li>  如果没有，那就执行 <code>gnome-terminal</code> 打开新窗口</li></ol><p>其实笔者，也不是很会 shell 脚本，像脚本中出现的几个小语法</p><ul><li>  获取命令执行的返回结果</li><li>  if 语句，for 语句</li><li>  变量使用</li><li>  字符串 split</li></ul><p>以及出现的命令</p><ul><li>  xdotool</li><li>  nohup</li></ul><p>都是笔者此前很少接触的，但是有兴趣有需求，这些都是小事，有问题直接 google 就好了，<strong>重要的是愿不愿意折腾了。</strong></p><blockquote><p>  ps: ubuntu 系统推荐 terminology，比自带的 terminal 多了 split window 的功能，很赞！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Telegram api tdlib 使用</title>
      <link href="posts/2787892288/"/>
      <url>posts/2787892288/</url>
      
        <content type="html"><![CDATA[<h2 id="Telegram-api-tdlib-介绍"><a href="#Telegram-api-tdlib-介绍" class="headerlink" title="Telegram api tdlib 介绍"></a>Telegram api tdlib 介绍</h2><p>Telegram 是俄罗斯人开发的一款通讯软件，其加密特性以及功能的强大和易用比 WeChat 好的多，而且 Telegram 提供所有的 api 使用，简直爽到爆。本文意在整合一下资源，并结合自己实际操作情况，简单介绍一下如何在 Python 程序中调用 telegram api 来自定义一些操作。 </p><p><a href="https://core.telegram.org/">Telegram APIs</a> 里是 Telegram 的官方文档，其 API 分为两种，Bot API, TDLib. 前者顾名思义，就是 Telegram 里面一些 bot 机器人的 api，后者则是包含了 Telegram 里的所有接口，也是本文接下来要介绍的主要内容。</p><p>TDLib 全称 <a href="https://core.telegram.org/tdlib">Telegram Database Library</a>，开发者可以通过这个 library 开发一套自己的第三方 Telegram 客户端。其 GitHub 地址为<a href="https://github.com/tdlib/td">td</a>，主要使用 C++ 来开发，但其他大部分语言也有可以使用，如 Java, Python, JavaScript, Go, C#, PHP, Rust…具体的可以根据 ReadMe 来仔细了解一下。</p><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><blockquote><p>  笔者环境为 Ubuntu 20.04.4 LTS, Python 3.8.10</p></blockquote><ul><li><p>安装 python-telegram</p><p>  笔者根据 <a href="https://github.com/tdlib/td/tree/master/example#python">ReadMe</a> 里的说明，选择使用 <a href="https://github.com/alexander-akhmetov/python-telegram">python-telegram</a></p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install python-telegram</span><br></pre></td></tr></table></figure></li><li><p>编译 tdlib</p><p>  关于编译 <a href="https://github.com/tdlib/td#building">tdlib</a>, 官方特意提供了一个<a href="https://tdlib.github.io/td/build.html">网页</a>（如下图），可以直接复制命令。</p><p>  <img src="https://gitee.com/xinlx/pic/raw/master/img/Screenshot%20from%202022-03-05%2022-07-48.png"></p><p>  亲测在笔者环境下完美执行</p></li><li><p>注册 <code>api_id</code>, <code>api_hash</code></p><p>  编译需要一段时间，我们这时候再去 <a href="https://my.telegram.org/apps">https://my.telegram.org/apps</a> 里申请一个 application，拿到 <code>api_id</code> 和 <code>api_hash</code>，下文会用到</p></li></ul><h2 id="一个-python-telegram-官方小-demo"><a href="#一个-python-telegram-官方小-demo" class="headerlink" title="一个 python-telegram 官方小 demo"></a>一个 python-telegram 官方小 demo</h2><p>在做好上述的准备工作后，就可以开始 code 了。</p><p>根据 python-telegram 里的<a href="https://python-telegram.readthedocs.io/en/0.14.0/tutorial.html">文档</a></p><p>我们首先直接贴一段代码，体验一下效果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> telegram.client <span class="keyword">import</span> Telegram</span><br><span class="line"></span><br><span class="line">tg = Telegram(</span><br><span class="line">    api_id=<span class="string">&#x27;your_api_id&#x27;</span>,</span><br><span class="line">    api_hash=<span class="string">&#x27;your_api_hash&#x27;</span>,</span><br><span class="line">    phone=<span class="string">&#x27;+86your_phone_number&#x27;</span>,</span><br><span class="line">    database_encryption_key=<span class="string">&#x27;changeme1234&#x27;</span>,</span><br><span class="line">)</span><br><span class="line">tg.login()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_message_handler</span>(<span class="params">update</span>):</span></span><br><span class="line">    <span class="comment"># we want to process only text messages</span></span><br><span class="line">    message_content = update[<span class="string">&#x27;message&#x27;</span>][<span class="string">&#x27;content&#x27;</span>].get(<span class="string">&#x27;text&#x27;</span>, &#123;&#125;)</span><br><span class="line">    message_text = message_content.get(<span class="string">&#x27;text&#x27;</span>, <span class="string">&#x27;&#x27;</span>).lower()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> message_text == <span class="string">&#x27;ping&#x27;</span>:</span><br><span class="line">        chat_id = update[<span class="string">&#x27;message&#x27;</span>][<span class="string">&#x27;chat_id&#x27;</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;Ping has been received from <span class="subst">&#123;chat_id&#125;</span>&#x27;</span>)</span><br><span class="line">        tg.send_message(</span><br><span class="line">            chat_id=chat_id,</span><br><span class="line">            text=<span class="string">&#x27;pong&#x27;</span>,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">tg.add_message_handler(new_message_handler)</span><br><span class="line">tg.idle()</span><br></pre></td></tr></table></figure><p>这就是一段最简单的代码了，写完之后直接运行，就可以了，如果有额外需要输入密码或者 sms 那就按要求输入就可以了。这段代码的作用是在，接受到内容为 “ping” 的消息的时候，会自动回复 “pong”，可以自己在 Telegram 里发一条消息试试。</p><div class='tip warning'><b>潜在的坑!!!</b></p><p>如果由于有运行出现问题，提示 <code>Network is unreachable</code>等，那就在登录的时候需要额外的配置一下了，如下：<p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">proxy_type = &#123;</span><br><span class="line">    <span class="string">&#x27;@type&#x27;</span>: <span class="string">&#x27;proxyTypeHttp&#x27;</span>,  <span class="comment"># &#x27;proxyTypeSocks5&#x27;, &#x27;proxyTypeHttp&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">proxy_port = <span class="number">7890</span></span><br><span class="line">proxy_server = <span class="string">&#x27;localhost&#x27;</span></span><br><span class="line"></span><br><span class="line">tg = Telegram(</span><br><span class="line">    <span class="comment"># 需要从 https://my.telegram.org/apps 获取</span></span><br><span class="line">    api_id=<span class="string">&#x27;your_api_id&#x27;</span>,</span><br><span class="line">    api_hash=<span class="string">&#x27;your_api_hash&#x27;</span>,</span><br><span class="line">    phone=<span class="string">&#x27;+86your_phone_number&#x27;</span>,</span><br><span class="line">    <span class="comment"># 这个看名称好像是加密用的，内容自定吧，笔者没有做更改，毕竟是自己的一个学习 demo</span></span><br><span class="line">    database_encryption_key=<span class="string">&#x27;changeme1234&#x27;</span>,</span><br><span class="line">    proxy_server=proxy_server,</span><br><span class="line">    proxy_port=proxy_port,</span><br><span class="line">    proxy_type=proxy_type,</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 关闭 ipv6</span></span><br><span class="line">tg.call_method(</span><br><span class="line">    <span class="string">&#x27;setOption&#x27;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;prefer_ipv6&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;value&#x27;</span>: &#123;<span class="string">&#x27;@type&#x27;</span>: <span class="string">&#x27;optionValueBoolean&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="literal">False</span>&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 登录</span></span><br><span class="line">tg.login()</span><br><span class="line"><span class="comment"># 其他所有操作都需要在 login 之后</span></span><br></pre></td></tr></table></figure><p>在登录之前设置一下代理，并且关闭 ipv6，代码中的 <code>proxy_type</code>, <code>proxy_port</code> 都需要根据自己的情况来改动，笔者用的代理工具是 clash，所以端口号默认为 7890。</p><p>以上就基本大功告成了。</p><p>通过代码可以看到，<code>Telegram</code> 是里面的核心类，所有的方法都是围绕着对象 <code>tg</code> 来进行的，都是通过这个对象来进行调用的。 python-telegram 中有提供一些方法，如 <code>send_message</code>, <code>get_chat</code>, <code>get_me</code>, <code>get_chat_history</code> 等，如上面代码，具体可以看 <code>Telegram</code> 类的源码。</p><p>还有一种方式就是，通过调用 <code>tg.call_method(...)</code> 来调用，这个方法就比较全面了，可以通过这个方法调用所有的 tdlib 所提供的方法，如上文的通过 <code>call_method</code> 来关闭 ipv6 就是这样操作的。具体可在 <a href="https://core.telegram.org/tdlib/docs/td__api_8h.html">td_api</a> 里找到所有的 api。</p><p>接下来我们以一个例子来详细介绍一下 <code>call_method</code> 的使用方法。</p><h2 id="api-的调用-call-method"><a href="#api-的调用-call-method" class="headerlink" title="api 的调用 call_method"></a>api 的调用 <code>call_method</code></h2><p>作为一个通讯软件，对于 Telegram 我们肯定要获取通讯录了，或者说聊天窗口。我们接下来就试试</p><p>根据 <a href="https://core.telegram.org/tdlib/docs/classtd_1_1td__api_1_1get_chats.html">getChats</a> 文档</p><p><img src="https://gitee.com/xinlx/pic/raw/master/img/Screenshot%20from%202022-03-06%2015-48-38.png" alt="Screenshot from 2022-03-06 15-48-38"></p><p>由此可知，<code>getChats</code> 有两个参数，一个是 <code>chat_list</code>, 一个是 <code>limit</code> ，于是我们在实际调用的时候，就可以使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tg.call_method(<span class="string">&#x27;getChats&#x27;</span>, &#123;<span class="string">&#x27;limit&#x27;</span>=<span class="number">100</span>,&#125;)</span><br></pre></td></tr></table></figure><p>来获取 main chat list （就是默认主聊天页面）里的所有 chat id 了，具体获取方式如下（打断点）</p><p><img src="https://gitee.com/xinlx/pic/raw/master/img/Screenshot%20from%202022-03-06%2017-01-12.png" alt="Screenshot from 2022-03-06 17-01-12"></p><p>这就是其具体的返回值了，所有调用的结果都是如此，<code>client</code> 顾名思义是客户端的意思，主要是当前登录的一些信息， <code>error</code>, <code>error_info</code> 是一些错误状态的说明，当调用失败时，会有具体的错误信息。其实我们主要就是看 <code>update</code> 里的内容</p><p><img src="https://gitee.com/xinlx/pic/raw/master/img/Screenshot%20from%202022-03-06%2017-04-21.png" alt="Screenshot from 2022-03-06 17-04-21"></p><p>其中 <code>chat_ids</code> 就是我们最关注的信息，由于官方 api 设计的原因，在这个 api 里只会返回 chat 的 id，如图片所示， <code>chat_ids</code> 是一个列表，由于我们在代码里设置了 <code>limit: 20</code> 所以，只返回了 20 个 id。</p><div  class="note icon custom iconfont icon-QQ2"  style="background: #fdf8ea;border-left-color: #f0ad4e;">  <p>❓细心的读者可能会发现，明明官方文档里形参是 <code>chat_list_</code>, <code>limit_</code> 为什么，python 代码里却没有最后一个下划线呢，以及 <code>chat_list</code> 去哪里了？<br/>✔️首先，第一个问题，其实笔者也不太清楚，主要是大家约定都是默认去掉的，而且也只有去掉才能调用成功。第二个问题，<code>chat_list</code> 这里只是为了简单起见所以才没有传，文档里写的也很清楚，<code>pass null to get chats from the main chat list</code></p></div><p>以上就是 api 的具体调用流程，学会了 api 调用以及查看官方的 api 文档，就可以自己进行开发了。</p><h2 id="又一个小-demo"><a href="#又一个小-demo" class="headerlink" title="又一个小 demo"></a>又一个小 demo</h2><p>以下，笔者再来介绍一下，自己所写的一小段代码，主要是为一些频道生成 url 链接。</p><blockquote><p>  因为笔者准备注销当前的 telegram 帐号，重新申请一个，但是由于里面有一些频道还是很不错了，为了防止丢失，而又不愿意手动一个个复制粘贴，恰好知道 telegram 有提供 api，所以自己就写了一段如下的程序</p></blockquote><p>根据笔者在网上搜寻到的信息，一些 <code>public</code> 的频道的 <code>t.me</code> 域名的分享链接，其实都是 <code>https://t.me/&#123;username&#125;</code> 格式，其中 <code>username</code> 就是一个 group 信息里所包含的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> telegram.client <span class="keyword">import</span> Telegram</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> webbrowser</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> telegram.client <span class="keyword">import</span> Telegram</span><br><span class="line"><span class="keyword">from</span> telegram.tdjson <span class="keyword">import</span> TDJson</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GroupInfoCustomItem</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    自定义一个类，存储所关注的信息</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, chat_id, supergroup_id, title, username</span>):</span></span><br><span class="line">        self.chat_id = chat_id</span><br><span class="line">        self.supergroup_id = supergroup_id</span><br><span class="line">        self.title = title</span><br><span class="line">        self.username = username</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    登录</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    proxy_type = &#123;</span><br><span class="line">        <span class="string">&#x27;@type&#x27;</span>: <span class="string">&#x27;proxyTypeHttp&#x27;</span>,  <span class="comment"># &#x27;proxyTypeSocks5&#x27;, &#x27;proxyTypeHttp&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    proxy_port = <span class="number">7890</span></span><br><span class="line">    proxy_server = <span class="string">&#x27;localhost&#x27;</span></span><br><span class="line"></span><br><span class="line">    tg = Telegram(</span><br><span class="line">        api_id=<span class="string">&#x27;13094551&#x27;</span>,</span><br><span class="line">        api_hash=<span class="string">&#x27;2f9f21feb00bcfd298e41705750e64e2&#x27;</span>,</span><br><span class="line">        phone=<span class="string">&#x27;+8613521026192&#x27;</span>,</span><br><span class="line">        database_encryption_key=<span class="string">&#x27;changeme1234&#x27;</span>,</span><br><span class="line">        <span class="comment"># 代理</span></span><br><span class="line">        proxy_server=proxy_server,</span><br><span class="line">        proxy_port=proxy_port,</span><br><span class="line">        proxy_type=proxy_type,</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 关闭 ipv6</span></span><br><span class="line">    tg.call_method(</span><br><span class="line">        <span class="string">&#x27;setOption&#x27;</span>,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;prefer_ipv6&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;value&#x27;</span>: &#123;<span class="string">&#x27;@type&#x27;</span>: <span class="string">&#x27;optionValueBoolean&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="literal">False</span>&#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># you must call login method before others</span></span><br><span class="line">    tg.login()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_main_chat_ids</span>(<span class="params">tg</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    获取所有的 chat_ids</span></span><br><span class="line"><span class="string">    这里直接使用了 python-telegram 默认的接口</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    all_chat = tg.get_chats()</span><br><span class="line">    <span class="comment"># 返回结果是异步的，所以需要 wait，不然拿不到结果</span></span><br><span class="line">    all_chat.wait()</span><br><span class="line">    <span class="keyword">return</span> all_chat.update.get(<span class="string">&quot;chat_ids&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_super_group_username</span>(<span class="params">tg, chat_ids</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    获取所有的 supergroup 的 username</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    group_ids = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x &lt; <span class="number">0</span>, chat_ids))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;all chat num: &quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(chat_ids)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;group num: &quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(group_ids)))</span><br><span class="line">    all_details = []</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">id</span> <span class="keyword">in</span> group_ids:</span><br><span class="line">        chat_info = tg.get_chat(<span class="built_in">id</span>)</span><br><span class="line">        chat_info.wait()</span><br><span class="line">        supergroup_id = chat_info.update.get(<span class="string">&#x27;type&#x27;</span>).get(<span class="string">&#x27;supergroup_id&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> supergroup_id:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        supergroup_info = tg.call_method(<span class="string">&#x27;getSupergroup&#x27;</span>, &#123;<span class="string">&#x27;supergroup_id&#x27;</span>: supergroup_id&#125;)</span><br><span class="line">        supergroup_info.wait()</span><br><span class="line">        group_info_custom_item = GroupInfoCustomItem(chat_id=<span class="built_in">id</span>, supergroup_id=supergroup_id,</span><br><span class="line">                                                     title=chat_info.update.get(<span class="string">&#x27;title&#x27;</span>),</span><br><span class="line">                                                     username=supergroup_info.update.get(<span class="string">&#x27;username&#x27;</span>))</span><br><span class="line">        all_details.append(group_info_custom_item)</span><br><span class="line">    <span class="keyword">return</span> all_details</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    tg = login()</span><br><span class="line">    main_chat_ids = get_main_chat_ids(tg)</span><br><span class="line">    infos = get_all_super_group_username(tg, main_chat_ids)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> infos:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;https://t.me/&quot;</span> + item.username)</span><br><span class="line">    tg.stop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>关于 chat, group, supergroup 等名词，具体可看<a href="https://core.telegram.org/tdlib/getting-started#tdlib-glossary">官方文档</a></p><p>运行上述程序，可以得到类似于如下结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;t.me&#x2F;VirMachBF</span><br><span class="line">https:&#x2F;&#x2F;t.me&#x2F;maliqdfuankai</span><br><span class="line">https:&#x2F;&#x2F;t.me&#x2F;dfgdsdf65465</span><br><span class="line">https:&#x2F;&#x2F;t.me&#x2F;thosdfrnotice</span><br><span class="line">https:&#x2F;&#x2F;t.me&#x2F;SMsdfG66</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>根据这些链接（为了保护隐私，上述链接都是不存在的），就可以在新帐号里直接点击链接加入了，当然还可以通过调用 api 加入，哈哈哈。</p><blockquote><p>  复制粘贴只是三五分钟的事情，而笔者却为了节省三五分钟的麻烦，花掉了三五个小时来研究 api 😂😂</p></blockquote><p>更多自定义的操作就需要查看 tdlib 以及 python-telegram 的文档了，有什么想要实现的操作，可以在 <a href="https://core.telegram.org/tdlib/docs/td__api_8h.html">tdlib</a> 中找一下自己想要的 api。</p><p>如果你在使用过程中，有遇到 bug，欢迎提问！！</p><p>如果有自己写的小 dmeo，也可以拿来一起学习交流！！！</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> telegram </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器初始配置</title>
      <link href="posts/114940276/"/>
      <url>posts/114940276/</url>
      
        <content type="html"><![CDATA[<h1 id="服务器初始配置"><a href="#服务器初始配置" class="headerlink" title="服务器初始配置"></a>服务器初始配置</h1><blockquote><p>  前段时间自己折腾了一下服务器，由于中间间隔较久，所以很多东西都慢慢忘记了，于是写篇博客来记录一下。</p></blockquote><p>TODO</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="posts/794273457/"/>
      <url>posts/794273457/</url>
      
        <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><div  class="note icon custom iconfont icon-QQ2"  style="background: #eef7fa;border-left-color: #428bca;">  <p>一切工具的产生都是为了提高生产力，简化操作，但无疑正则表达式的学习曲线是较为陡峭的。</p></div><div class='tip warning'><p>TODO 要补上零宽断言，以及\w \d等字符<p></div><p>先举一个我在工作中碰到的一个简单的例子</p><div   class="note icon custom iconfont icon-QQ2"  style="background: #eff8f0;border-left-color: #5cb85c;"><p>    现有一个文件，里面含有多个浮点数，如：      <pre>        1.2 3.6 2.4 6.8 3.6 5.2 7.2 4.7 24.6...    </pre>    </p>    这些浮点数其实是一些点的三维坐标，每三个数一组，代表某一点的 xyz 坐标，现在要将这些浮点数格式化为这样的格式    <pre>        POINT(1.2 3.6 2.4)        POINT(6.8 3.6 5.2)        ...    </pre></div><p>直接手动来一个个找空格来分行加字符的话，其实很麻烦了。于是，正则表达式来了！</p><ol><li>  当时第一反应是用命令行</li></ol><blockquote>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo temp.txt | xargs -n 3 &gt; data.txt</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">temp.txt</span><br><span class="line">  1.2 3.6 2.4 6.8 3.6 5.2 7.2 4.7 24.6</span><br><span class="line">data.txt</span><br><span class="line">  1.2 3.6 2.4</span><br><span class="line">  6.8 3.6 5.2</span><br><span class="line">  7.2 4.7 24.6</span><br></pre></td></tr></table></figure><p>   然后用正则表达式</p><p>   <code>(.*)</code> -&gt; <code>POINT($1)</code></p></blockquote><ol start="2"><li>  后来想到直接正则转换</li></ol><blockquote><p>  <code>([^ ]+) ([^ ]+) ([^ ]+) ?</code> -&gt; <code>POINT($1 $2 $3)\n</code></p></blockquote><ol start="3"><li>  再又想到还可以</li></ol><blockquote><p>  <code>(([^ ]+ ?)&#123;3&#125;)</code> -&gt; <code>POINT($1)\n</code></p><p>  其实最后一个方法会让右括号前面有一个空格</p></blockquote><div  class="note icon custom iconfont icon-QQ2"  style="background: #f5f0fa;border-left-color: #6f42c1;">  <p>应该还有别的更简单的办法吧，只是我目前想不到了</p></div><p>下面就来详细介绍一下正则表达式 了</p><blockquote><p>  鉴于笔者也是一个菜鸟，只能根据自己的理解来进行一些说明</p></blockquote><p>首先推荐一个网站<a href="https://regexlearn.com/zh-cn">RegexLearn</a>，个人感觉还是很ok的，联系完了之后，可以再在这个<a href="https://alf.nu/RegexGolf">Regex Golf</a>练习一下。</p><p>先来看看上面的例子所用的正则表达式的含义吧。</p><p>前面命令行只是linux命令行的一些操作，涉及 <code>cat</code> 和 <code>xargs</code> 两个命令，不在本文内容之中。</p><ul><li><p><strong><code>(.*)</code></strong><br>  首先<code>.</code> 表示匹配任意字符（除换行符外）如 <code>3.6</code> 可以匹配 <code>3.6</code>, <code>316</code> 以及 <code>3a6</code>，而<code>*</code> 表示匹配前面的子表达式零次或多次，<code>()</code> 表示分组。</p><p>  何为分组呢？其实个人认为相当于是把括号里的内容视为一个整体。如 <code>ab*</code> 匹配 <code>a</code>, <code>ab</code>, <code>abb</code>…，而 <code>(ab)*</code> 则匹配 <code>ab</code>, <code>abab</code>, <code>ababab</code>…效果截然不同。</p><p>  所以 <strong><code>(.*)</code> 表示匹配除换行符外的字符零次或多次，也就是匹配一行文字</strong>。</p><p>  随后有一个 <strong><code>$1</code></strong> 也值得注意，这个代表前面的第一个匹配项。 </p><p>  所以第一个方法，显示利用命令行将文本三个为一组分段，然后用正则表达式匹配每一行，并在每一行前面加上<code>POINT(</code> 后面加上 <code>)</code></p></li><li><p><strong><code>[^ ]+</code></strong><br>  接着，第二个方法，这是一个很直接的文本替换。</p><p>  首先先看三个括号里面的内容： <strong><code>[^ ]+</code></strong></p><p>  其中 <strong><code>[]</code> 表示匹配中括号里面的所有字符</strong>，如 <code>b[aeiou]r</code> 匹配 <code>bar</code>, <code>ber</code>, <code>bir</code>, <code>bor</code>, <code>bur</code></p><p>  而 <code>^</code> 有两个场景，在这个中括号里，表示<strong>取反，不接受中括号里的任意字符</strong>，如 <code>b[^aeiou]r</code> 就不能匹配 <code>bar</code>, <code>ber</code>, <code>bir</code>, <code>bor</code>, <code>bur</code>。所以在上文中，<code>[^ ]</code>表示不接受空格，即可以匹配除空格外的任意字符。</p><p>  <code>^</code> 还有一个场景就是<strong>表示匹配输入字符串的开始位置</strong>，如 <code>^a</code> 表示匹配以 <code>a</code> 为开头的字符串，个人感觉这要求是一行的开头。同理其实还有<code>$</code>表示匹配字符串的结束为止，如 <code>a$</code> 表示匹配以 <code>a</code> 为结尾的字符串。</p><p>  <strong><code>+</code> 表示匹配前面的字符串一次或多次</strong>。</p><p>  还有一个 <code>?</code>，这个则是<strong>表示匹配前面的字符零次或一次</strong>。</p>  <div    class="note icon custom iconfont icon-QQ2"    style="background: #fdf8ea;border-left-color: #f0ad4e;"  >    <p>注意 <code>*</code>, <code>+</code>, <code>?</code> 的区别哦！</p>  </div><p>  综上，第二条命令表示，匹配 <code>除空格外的任意字符，中间一个空格，匹配空格外的任意字符，空格，匹配空格外的任意字符，没有空格或者一个空格</code>, 三段 <code>([^ ]+)</code> 在这里的作用就是匹配三个浮点数，最后加一个问号，是因为最后一个浮点数后面可能没有空格。</p><p>  随后的 <code>$1</code>, <code>$2</code>, <code>$3</code> 其实前面讲过，在这里就是分别匹配，第一个，第二个，第三个浮点数。</p></li><li><p><strong><code>&#123;&#125;</code></strong><br>  第三个方法，引入了 <code>&#123;&#125;</code>, 这个分三种情况，分别是 <code>&#123;n&#125;</code>, <code>&#123;n, &#125;</code>, <code>&#123;n,m&#125;</code></p><ul><li>  第一种 <code>&#123;n&#125;</code> 表示，匹配 n 次</li><li>  第二种 <code>&#123;n,&#125;</code> 表示至少匹配 n 次</li><li>  <code>&#123;n,m&#125;</code> 表示匹配至少 n 次，至多 m 次。</li></ul><p>  注意逗号两侧不应该有空格。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH 使用</title>
      <link href="posts/2393743702/"/>
      <url>posts/2393743702/</url>
      
        <content type="html"><![CDATA[<blockquote><p>  之前在 git 里面有使用过 ssh，但一直不知道其中的缘故，只是单纯地遵循教程，照葫芦画瓢，最近新买了一个 vps，又用到了 ssh，于是今天决定整理一下。</p></blockquote><h1 id="SSH-简介"><a href="#SSH-简介" class="headerlink" title="SSH 简介"></a><a href="https://zh.wikipedia.org/wiki/Secure_Shell">SSH 简介</a></h1><p>ssh 是加密的网络传输协议，最常见的用途是远程登陆系统。</p><blockquote><p>  好奇：ssh 是在哪一层 OSI 网络结构，应用层吗？</p></blockquote><h1 id="命令详解"><a href="#命令详解" class="headerlink" title="命令详解"></a>命令详解</h1><p>目前笔者接触到的命令有三个：<code>ssh-keygen</code>, <code>ssh</code>, <code>ssh-copy-id</code></p><p>现在来一一说明</p><h2 id="ssh-keygen"><a href="#ssh-keygen" class="headerlink" title="ssh-keygen"></a><code>ssh-keygen</code></h2><p>OpenSSH authentication key utility</p><p>用于生成 ssh key 的</p><p>笔者一开始接触 ssh 是在 <a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">github 配置 ssh</a> 里面：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t ed25519 -C <span class="string">&quot;your_email@example.com&quot;</span> -f ~/.ssh/ed25519_id</span></span><br></pre></td></tr></table></figure><p><code>ssh-keygen</code> 主要有三个选项 <code>-t</code>, <code>-C</code>, <code>-f</code></p><table><thead><tr><th>Options</th><th>Description</th></tr></thead><tbody><tr><td>-t</td><td>type，主要有<code>dsa</code>, <code>ecdsa</code>, <code>ecdsa-sk</code>, <code>rsa</code>, <code>ed25519</code>, <code>ed25519-sk</code>，一般优先使用 <code>ed25519</code>，其次 <code>rsa</code></td></tr><tr><td>-C</td><td>comment，注意是大写</td></tr><tr><td>-f</td><td>指定文件路径，如果不加该选项，后续也会让输入路径的</td></tr></tbody></table><p>执行上述命令后，会让你输入 <code>phraseKey</code>，最后就会在 <code>~/.ssh</code> 里生成一个名为 <code>ed25519_id</code> 以及 <code>ed25519_id.pub</code> 的文件 </p><h2 id="ssh-及配置文件"><a href="#ssh-及配置文件" class="headerlink" title="ssh 及配置文件"></a><code>ssh</code> 及配置文件</h2><p>OpenSSH remote login client</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh root@1.2.3.4</span></span><br></pre></td></tr></table></figure><p>这个命令没什么特别需要说明的，主要用法就是这个了，现在看看配置文件。</p><blockquote><p>  主要参考 <a href="https://linuxize.com/post/using-the-ssh-config-file/">Using the SSH Config File</a></p></blockquote><p>如果需要 <code>config</code> 文件，一般是要自己在 <code>~/.ssh</code> 里新建一个的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> touch ~/.ssh/config</span></span><br></pre></td></tr></table></figure><p><code>config</code> 文件格式如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Host japan</span><br><span class="line">    HostName 45.76.219.37</span><br><span class="line">    User root</span><br><span class="line">    IdentityFile ~&#x2F;.ssh&#x2F;debian_id</span><br><span class="line"></span><br><span class="line">Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    IdentityFile ~&#x2F;.ssh&#x2F;id_rsa</span><br></pre></td></tr></table></figure><p>缩进只是为了可读性，并不是必须的，同时 config 文件忽略 <code>Host</code>, <code>HostName</code> 等的大小写。</p><p><code>Host</code> 支持通配符，同时一个地址支持匹配多个 Host，按顺序最先匹配到的 option 具有最高优先级。具体可见 <a href="https://linuxize.com/post/using-the-ssh-config-file/">Using the SSH Config File</a></p><p>如上我们配置了两个 <code>Host</code>，于是我们接下来就可以这么使用了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh japan// 等同于 ssh root@45.76.219.37</span></span><br></pre></td></tr></table></figure><p>接着输入远程服务器的密码就可以了。如果希望每次登陆的时候不用输入远端的密码，可以参考后面的 <a href="#ssh-copy-id"><code>ssh-copy-id</code></a></p><p>再来说一下 git，config 在 git 中具体使用场景就是配置多个 git 用户，如果想要在电脑上同时使用公司以及个人的git账号就可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># gitee</span><br><span class="line">Host gitee.com</span><br><span class="line">    HostName gitee.com</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~&#x2F;.ssh&#x2F;gitee_id</span><br><span class="line">    </span><br><span class="line"># github</span><br><span class="line">Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~&#x2F;.ssh&#x2F;github_id</span><br></pre></td></tr></table></figure><p>如果公司和个人的账户都需要使用同一个网站，比如 <code>github.com</code>, 则可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># person</span><br><span class="line">host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    IdentityFile ~&#x2F;.ssh&#x2F;id_rsa</span><br><span class="line"></span><br><span class="line"># company</span><br><span class="line">host github_company.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    IdentityFile ~&#x2F;.ssh&#x2F;debian_id</span><br></pre></td></tr></table></figure><p>然后在使用中就可以</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// person</span><br><span class="line">$ git <span class="built_in">clone</span> git@github.com:luoxin971/Study-notes.git</span><br><span class="line">// company</span><br><span class="line">$ git <span class="built_in">clone</span> git@github_company.com:luoxin971/Study-notes.git</span><br></pre></td></tr></table></figure><h2 id="ssh-copy-id"><a href="#ssh-copy-id" class="headerlink" title="ssh-copy-id"></a><span id="ssh-copy-id"><code>ssh-copy-id</code></span></h2><p>主要就是在用 ssh 登录的时候，将公钥放到远程服务器上，免去每次都要输入远端密码的问题。</p><blockquote><p>  主要参考 <a href="https://linuxize.com/post/how-to-setup-passwordless-ssh-login/">How to Setup Passwordless SSH Login</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-copy-id root@1.2.3.4</span><br><span class="line">// 如果之前在 config 里面配置了 Host 等，还可以</span><br><span class="line">$ ssh-copy-id japan</span><br></pre></td></tr></table></figure><p><code>-i</code> 选项可以指定私钥文件</p><p>接着输入服务器密码，之后服务器 <code>~/.ssh</code> 下会有一个 <code>authorized_keys</code> 的文件（如下），记录着刚刚指定的私钥所对应的公钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAcXwTy8Bda+vmtmpFS2cuySYFnMBQnea6uFUrLwctRb root@debian</span><br></pre></td></tr></table></figure><p>之后每次登录远程服务器就只需要</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh japan</span><br></pre></td></tr></table></figure><p>然后输入 <code>phraseKey</code> 即可，如果之前设置 <code>phraseKey</code> 为空，则就无需任何密码了。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 命令基本使用</title>
      <link href="posts/2608075722/"/>
      <url>posts/2608075722/</url>
      
        <content type="html"><![CDATA[<h1 id="Git-基本使用"><a href="#Git-基本使用" class="headerlink" title="Git 基本使用"></a>Git 基本使用</h1><p>其实本意是想整理一下自己不太会的 Git 的命令，但是为了完整性，所以先介绍一下基本命令的使用。</p><p>加之，最近有看到公司的新手同事，也不太会这些命令，想到自己一开始学 <code>Git</code> 也有些懵，搞不清重点，所以前人栽树，后人乘凉，我来归纳一下一些基本常用的命令吧。</p><p>以下是根据自己在工作中实际生产环境的需要，来说明一下 Git  的基本命令。</p><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><ol start="0"><li><p>安装 Git</p></li><li><p>配置用户名、密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config user.name <span class="string">&quot;[username]&quot;</span></span><br><span class="line">git config user.email <span class="string">&quot;[useremail]&quot;</span></span><br><span class="line"><span class="comment"># username 替换为自己的用户名</span></span><br><span class="line"><span class="comment"># useremail 替换为自己的邮箱</span></span><br><span class="line"><span class="comment"># 如 git config user.name &quot;luoxin&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：[xxx] 表示此处需要根据自己的实际情况来填写，下同</p></blockquote></li><li><p>配置 ssh 密钥（可选）</p><p> 首先说明这一步是可选的。</p><p> 其实我本人在日常中也没怎么用，直接用的 http。但是前两天有个项目要求用 ssh，这次刚好写上去</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -c <span class="string">&quot;[useremail]&quot;</span></span><br></pre></td></tr></table></figure><p> 会让你输入存放 key（公钥）的路径，一般选默认的即可。</p><p> 接着输入 <code>passphrase</code>，也就是私钥，这个可设可不设，设置的话，以后每次 <code>git push</code> 都需要求再次输入。</p><p> 继续，再次输入 <code>passphrase</code>。</p><p> 成功之后会在上述设置的路径下，除生成 <code>id_rsa</code> 外，还有名为 <code>id_rsa.pub</code> 的文件, 复制一下 <code>id_rsa.pub</code> 里的文件内容，留作后用。</p><p> 然后打开 <a href="https://github.com/settings/keys"><code>Github</code></a>，进入 <code>Settings</code> -&gt; <code>SSH and GPG keys</code> -&gt; <code>New SSH key</code></p><p> 最后在 <code>Title</code> 随便输入一些内容，在<code>Key</code> 中输入刚刚复制的 <code>id_rsa.pub</code> 里的内容。</p></li><li><p>克隆仓库</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> [repository_address] [folder_name]</span><br><span class="line"><span class="comment"># repository_address 替换为仓库的 url 即可</span></span><br><span class="line"><span class="comment"># folder_name 替换为自己想放代码的文件夹，也可以不设置，就默认在当前目录下新建一个与 repository 同名的文件夹</span></span><br><span class="line"><span class="comment"># 如 git clone https://github.com/luoxin971/Study-notes.git</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><h3 id="基本代码提交流程"><a href="#基本代码提交流程" class="headerlink" title="基本代码提交流程"></a>基本代码提交流程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化，注意要在空文件夹里，如果不是新建一个项目，则可以用 git clone 拉代码</span></span><br><span class="line">git init</span><br><span class="line"><span class="comment"># 将文件从工作区添加到暂存区</span></span><br><span class="line">git add [filename]</span><br><span class="line"><span class="comment"># 将暂存区的所有内容提交到当前分支，commit_info 替换为对这次提交的说明，具体可在网上搜 git 提交规范</span></span><br><span class="line">git commit -m <span class="string">&quot;[commit_info]&quot;</span></span><br><span class="line"><span class="comment"># 将当前分支推送到远程分支</span></span><br><span class="line">git push origin [branch_name]</span><br></pre></td></tr></table></figure><blockquote><p>  <code>git add</code>, <code>git commit</code>, <code>git push</code> 三步就是每次提交代码的基本步骤</p><p>  当然，如果没有远程仓库的话，<code>git push</code> 就无从说起了</p></blockquote><h3 id="其他常用操作"><a href="#其他常用操作" class="headerlink" title="其他常用操作"></a>其他常用操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前 git 状态</span></span><br><span class="line">git status</span><br><span class="line"><span class="comment"># 查看 git 提交历史，后面可以接其他参数，我个人常用的有，git log --oneline, git log -n 10</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 以下是分支操作</span></span><br><span class="line"><span class="comment"># 查看分支，后接其他参数，可实现其他与分支相关的命令</span></span><br><span class="line">git branch</span><br><span class="line"><span class="comment"># 切换分支</span></span><br><span class="line">git switch/checkout [branch_name]</span><br><span class="line"><span class="comment"># 创建分支，以下两个都可以</span></span><br><span class="line">git checkout -b [new_branch_name]</span><br><span class="line">git switch -c [new_branch_name]</span><br><span class="line"><span class="comment"># 合并分支</span></span><br><span class="line">git merge [other_branch_name]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从远程分支拉取代码</span></span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 放弃更改，其实有很多的用法，在此只介绍两个常用的</span></span><br><span class="line">git restore [filename]</span><br><span class="line"><span class="comment"># 将暂存区的文件返回到工作区</span></span><br><span class="line">git restore --staged [filename]</span><br><span class="line"></span><br><span class="line"><span class="comment">## 打草稿，（我也不知道中文该怎么说/(ㄒoㄒ)/~~）</span></span><br><span class="line"><span class="comment"># 将当前的更改保存，-m 后的 stash_info 类似于前面的 git commit -m &quot;xxx&quot;，可以不写，但推荐加加上，方便分辨</span></span><br><span class="line">git stash -m <span class="string">&quot;[stash_info]&quot;</span></span><br><span class="line"><span class="comment"># 显示所有的 stash</span></span><br><span class="line">git stash list</span><br><span class="line"><span class="comment"># 应用 stash，其中 stash_num 为上述 git stash list 中显示的各 stash 的序号</span></span><br><span class="line">git stash apply [stash_num]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其实还有 git diff，但是我一般都用 vscode 看两者的差别，所以用的不多，况且用命令行显示这个实在是不太直观</span></span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>二八定律，其实只要掌握了上述命令（其实只掌握<a href="#%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4">基本命令</a> 也够了），就可以满足 80% 的实际生产需要。但仅仅掌握这些肯定是不够的，如果想进一步学习，可以参考 <a href="https://luoxin.vip/posts/2552719298/">Git 进阶使用</a>。</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 进阶使用</title>
      <link href="posts/2552719298/"/>
      <url>posts/2552719298/</url>
      
        <content type="html"><![CDATA[<div  class="note icon custom iconfont icon-QQ2"  style="background: #eff8f0;border-left-color: #5cb85c;">  <p>该篇文章是 Git 的一些进阶使用，更为常见的配置使用可查阅 <a href="https://luoxin.vip/posts/2608075722/">Git 命令基本使用</a></p></div><div  class="note icon custom iconfont icon-QQ2"  style="background: #f5f0fa;border-left-color: #6f42c1;">  <p>虽然题目为进阶使用，但其实以下内容掌握之后，才能真正在实际使用中游刃有余，因为很难预料工作中会碰到什么问题。<br/> 文章主要分为以下几个内容：<a href="#分支管理">分支管理</a>&nbsp;·&nbsp;<a href="#commit相关">commit 相关</a>&nbsp;·&nbsp;<a href="#撤销更改">撤销更改</a>&nbsp;·&nbsp;<a href="#版本回退">版本回退</a>&nbsp;·&nbsp;<a href="#查看更改`">查看更改</a>&nbsp;·&nbsp;<a href="#其他">其他</a></p></div><div  class="note icon custom iconfont icon-QQ2"  style="background: #fdf8ea;border-left-color: #f0ad4e;">  <p>其中<a href="#分支管理">分支管理</a>，<a href="#撤销更改">撤销更改</a>尤为重要</p></div><h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch branch_name [other_branch_name | commit]</span><br><span class="line">git switch -c branch_name [other_branch_name | commit]</span><br><span class="line">git checkout -b branch_name [other_branch_name | commit]</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>第一行只是创建一个分支，但后两个命令则是创建并切换到这个分支</p><p>后面可以接其他分支名或者提交</p></blockquote><h2 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch </span><br><span class="line">git branch -a</span><br><span class="line"><span class="comment"># 加上 -a 后查看所有分支</span></span><br></pre></td></tr></table></figure><h2 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git branch -d [branch_name]</span><br><span class="line">git branch -D [branch_name]</span><br><span class="line"><span class="comment"># 使用 -D 强制删除</span></span><br><span class="line">git push origin --delete [branch_name]</span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br></pre></td></tr></table></figure><h2 id="更改分支名"><a href="#更改分支名" class="headerlink" title="更改分支名"></a>更改分支名</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -m [branch_name] [new_branch_name]</span><br></pre></td></tr></table></figure><h2 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git switch [branch_name]</span><br><span class="line">git checkout [branch_name]</span><br><span class="line"><span class="comment"># 以上两个皆可</span></span><br></pre></td></tr></table></figure><h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><p><code>git merge</code></p><p>合并分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge dev</span><br></pre></td></tr></table></figure><p><code>git rebase</code></p><p>用于合并分支，同时讲提交变为线性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout [branch_1]</span><br><span class="line">git rebase [branch_2]</span><br></pre></td></tr></table></figure><p><code>git rebase -i</code></p><p>交互性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout [branch_1]</span><br><span class="line">git rebase -i HEAD~5</span><br><span class="line"><span class="comment"># 然后可以在文件中编辑要合并的提交，同时还可以编辑提交的先后顺序</span></span><br></pre></td></tr></table></figure><h2 id="其他相关"><a href="#其他相关" class="headerlink" title="其他相关"></a>其他相关</h2><p><code>git branch -f</code></p><p>强制将某个分支放到某个提交上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -f [branch_2] [commit_2]</span><br></pre></td></tr></table></figure><p><code>git cherry-pick</code></p><p>合并提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick [commit_1] [commit_2] ...</span><br><span class="line"><span class="comment"># 合并多个提交</span></span><br></pre></td></tr></table></figure><h1 id="commit相关"><a href="#commit相关" class="headerlink" title="commit相关"></a>commit相关</h1><h2 id="HEAD-指针"><a href="#HEAD-指针" class="headerlink" title="HEAD 指针"></a><code>HEAD</code> 指针</h2><p><code>~</code>, <code>^</code></p><p><code>~</code> 后可以接数字，表示 HEAD 前第几个提交</p><p>如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">*   46dc76c (HEAD -&gt; master) Merge branch <span class="string">&#x27;b2&#x27;</span></span><br><span class="line">|\  </span><br><span class="line">| * 4bb98ef (b2) master sixth</span><br><span class="line">* | 966825b master nine after change</span><br><span class="line">* | 2039566 master eight</span><br><span class="line">* | 35a14dd (b3) master seven</span><br><span class="line">* | 1f87053 (b1) master sixth</span><br><span class="line">* | 8906bd9 master fifth after change</span><br><span class="line">|/  </span><br><span class="line">* e2e358e b1 forth</span><br><span class="line">* 02f6154 b1 third</span><br><span class="line">* be7efa6 master first</span><br></pre></td></tr></table></figure><p>如上所示</p><p>当前 HEAD 在 <code>46dc76c</code> 这个提交，<code>HEAD~3</code> 就表示 <code>35a14dd</code> 这个提交, <code>HEAD^</code> 表示 <code>966825b</code> 这个提交，而 <code>HEAD^2</code> 表示 <code>4bb98ef</code> 这个提交。</p><blockquote><p>注意：<code>HEAD^</code> 表示上一个提交，但可见在合并分支后， <code>46dc76c</code> 这个提交，后面有两个子提交，此时 <code>HEAD^</code> 知道垂直的那个子提交，即 <code>966825b</code>, 而 <code>HEAD^2</code> 表示从别的分支合并来的提交，即 <code>4bb98ef</code> </p><p>另外 <code>^</code>, <code>~</code> 可以混用，如 <code>HEAD^2~2</code> 即可表示 <code>02f6154</code> 这个提交</p><p>Ps: 如果执行 <code>git checkout HEAD^2~2</code> 之后，提示 <code>HEAD detached at [commit_id]</code>, 可以通过 <code>git switch master</code> 来将 <code>HEAD</code> 重新指向 master 分支 </p></blockquote><h2 id="git-commit-amend"><a href="#git-commit-amend" class="headerlink" title="git commit --amend"></a><code>git commit --amend</code></h2><p>修改提交的注释</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend</span><br><span class="line"><span class="comment"># 修改最近一次提交的注释</span></span><br></pre></td></tr></table></figure><h1 id="撤销更改"><a href="#撤销更改" class="headerlink" title="撤销更改"></a>撤销更改</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 撤销提交到暂存区</span></span><br><span class="line">git restore --staged [file_name]</span><br><span class="line"><span class="comment"># 撤销工作区的更改</span></span><br><span class="line">git restore [file_name]</span><br><span class="line"><span class="comment"># 这两条命令在执行 git status 的时候都会自动提示的</span></span><br></pre></td></tr></table></figure><h1 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h1><h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a><code>git reset</code></h2><p>相当于改写了历史，对远程分支无效（暂未验证 <code>git push -f</code> 是否也无效）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git reset --&lt;hard | mixed | soft&gt; [commit_id]</span><br><span class="line"><span class="comment"># soft 表示将这次提交之后的所有更改放入暂存区</span></span><br><span class="line"><span class="comment"># mixed 表示放入工作区</span></span><br><span class="line"><span class="comment"># hard 表示放弃所有提交，即直接删除了之间的所有提交</span></span><br></pre></td></tr></table></figure><h2 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a><code>git revert</code></h2><p>新建一个提交，用以撤销之前的提交的修改</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* 636729f (HEAD -&gt; bt4) bt4 nine change 4</span><br><span class="line">* d23a742 bt4 nine change 3</span><br></pre></td></tr></table></figure><p>对于上述提交历史，</p><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert HEAD^</span><br></pre></td></tr></table></figure><p>后，结果为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* f03f4e4 (HEAD -&gt; bt4) Revert &quot;bt4 nine change 3&quot;</span><br><span class="line">* 636729f bt4 nine change 4</span><br><span class="line">* d23a742 bt4 nine change 3</span><br></pre></td></tr></table></figure><h2 id="撤销版本回退"><a href="#撤销版本回退" class="headerlink" title="撤销版本回退"></a>撤销版本回退</h2><blockquote><p>对于 <code>git reset</code> 误删的提交，可以通过 <code>git reflog</code> 命令查看历史，然后根据提交号，进行 <code>git reset</code> 即可</p><p>例如：</p><p>对于如下 commit log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* b1ec67d (HEAD -&gt; master) master change restfile 2</span><br><span class="line">* a3bbf0b master change resetfile 1</span><br><span class="line">* 653c57e master add resetfile</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD^^</span><br></pre></td></tr></table></figure><p>后得到如下 commit log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* 653c57e (HEAD -&gt; master) master add resetfile</span><br></pre></td></tr></table></figure><p>如果此时，要再次恢复到 <code>b1ec67d</code> 这个提交</p><p>则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reflog -n 5</span><br><span class="line"><span class="comment"># 此处 -n 5 只是限制输出 5 行到作用</span></span><br></pre></td></tr></table></figure><p>得到如下输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">653c57e (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to HEAD^^</span><br><span class="line">b1ec67d HEAD@&#123;1&#125;: commit: master change restfile 2</span><br><span class="line">a3bbf0b HEAD@&#123;2&#125;: commit: master change resetfile 1</span><br><span class="line">653c57e (HEAD -&gt; master) HEAD@&#123;3&#125;: commit: master add resetfile</span><br><span class="line">46dc76c (bt5) HEAD@&#123;4&#125;: checkout: moving from bt4 to master</span><br></pre></td></tr></table></figure><p>可以看到曾经提交的 commit id</p><p>此时执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard b1ec</span><br><span class="line"><span class="comment"># 此处的 --hard 只是个人推荐吧，因为用 --soft或者 --mixed又会在工作区或者暂存区有更改，比较麻烦</span></span><br></pre></td></tr></table></figure><p>即可恢复。</p></blockquote><h1 id="查看更改"><a href="#查看更改" class="headerlink" title="查看更改"></a>查看更改</h1><p>本来是不打算写这部分内容的，因为 vscode 完美的直观实现了这个，但是近期在新电脑上来不及下载 vscode，所以又得用到这个。</p><p>基本上就是记住，什么都不加就是比较工作区，加了 <code>--cached</code> or <code>--staged</code> 就是比较暂存区，指定 <code>commit-id</code> 则不言而喻。</p><p>另外就是要学会看懂输出结果，注意以哪个文件为基准进行比较的。注意分辨！！</p><ul><li><p><strong>比较工作区与暂存区</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure><p>以暂存区为基准，不加任何参数</p></li><li><p><strong>比较暂存区与最新本地仓库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --cached [&lt;path&gt;...]</span><br></pre></td></tr></table></figure><p>以本地仓库为基准</p><blockquote><p> [<path>…] 表示文件路径，直接 copy 的，懒得替换成 [filename] 了，下同</p></blockquote></li><li><p><strong>比较工作区与最新本地版本库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff HEAD [&lt;path&gt;...]</span><br></pre></td></tr></table></figure></li><li><p><strong>比较工作区与指定 commit_id 的差异</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff [commit_id] [&lt;path&gt;...]</span><br></pre></td></tr></table></figure><p>以指定 commit 为基准</p></li><li><p><strong>比较暂存区与指定 commit-id 的差异</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --cached [commit_id] [&lt;path&gt;...]</span><br></pre></td></tr></table></figure><p>以指定 commit 为基准</p></li><li><p><strong>比较两个 commit-id 的差异</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff [commit_id] [commit_id] [&lt;path&gt;...]</span><br></pre></td></tr></table></figure><p>以前一个 commit 为基准</p></li></ul><p>如执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> abc &gt; seven</span><br><span class="line">git diff</span><br></pre></td></tr></table></figure><p>得到如下输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">warning: LF will be replaced by CRLF in seven.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">diff --git a&#x2F;seven b&#x2F;seven</span><br><span class="line">index e69de29..8baef1b 100644</span><br><span class="line">--- a&#x2F;seven</span><br><span class="line">+++ b&#x2F;seven</span><br><span class="line">@@ -0,0 +1 @@</span><br><span class="line">+abc</span><br></pre></td></tr></table></figure><p>接着上面的更改执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git diff --staged</span><br><span class="line"><span class="comment"># --staged 与 --cached 效果一样</span></span><br></pre></td></tr></table></figure><p>得到如下输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">diff --git a&#x2F;seven b&#x2F;seven</span><br><span class="line">index e69de29..8baef1b 100644</span><br><span class="line">--- a&#x2F;seven</span><br><span class="line">+++ b&#x2F;seven</span><br><span class="line">@@ -0,0 +1 @@</span><br><span class="line">+abc</span><br></pre></td></tr></table></figure><p>而此时如果执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure><p>则没有输出</p><p>接着执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo bcd &gt; seven</span><br><span class="line">git diff HEAD</span><br><span class="line">git diff </span><br><span class="line">git diff --staged</span><br></pre></td></tr></table></figure><p><code>git diff HEAD</code> 得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">warning: LF will be replaced by CRLF in seven.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">diff --git a&#x2F;seven b&#x2F;seven</span><br><span class="line">index e69de29..a48a3b3 100644</span><br><span class="line">--- a&#x2F;seven</span><br><span class="line">+++ b&#x2F;seven</span><br><span class="line">@@ -0,0 +1 @@</span><br><span class="line">+bcd</span><br></pre></td></tr></table></figure><p><code>git diff</code> 得到 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">warning: LF will be replaced by CRLF in seven.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">diff --git a&#x2F;seven b&#x2F;seven</span><br><span class="line">index 8baef1b..a48a3b3 100644</span><br><span class="line">--- a&#x2F;seven</span><br><span class="line">+++ b&#x2F;seven</span><br><span class="line">@@ -1 +1 @@</span><br><span class="line">-abc</span><br><span class="line">+bcd</span><br></pre></td></tr></table></figure><p><code>git diff --staged</code> 得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xin@xins-MacBook-Pro ~&#x2F;Documents&#x2F;gg: git diff --staged</span><br><span class="line">diff --git a&#x2F;seven b&#x2F;seven</span><br><span class="line">index e69de29..8baef1b 100644</span><br><span class="line">--- a&#x2F;seven</span><br><span class="line">+++ b&#x2F;seven</span><br><span class="line">@@ -0,0 +1 @@</span><br><span class="line">+abc</span><br></pre></td></tr></table></figure><p><code>git diff HEAD^</code> 得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">warning: LF will be replaced by CRLF in seven.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">diff --git a&#x2F;resetfile b&#x2F;resetfile</span><br><span class="line">index 802992c..ce8018b 100644</span><br><span class="line">--- a&#x2F;resetfile</span><br><span class="line">+++ b&#x2F;resetfile</span><br><span class="line">@@ -1 +1 @@</span><br><span class="line">-Hello world</span><br><span class="line">+Hi world</span><br><span class="line">diff --git a&#x2F;seven b&#x2F;seven</span><br><span class="line">index e69de29..a48a3b3 100644</span><br><span class="line">--- a&#x2F;seven</span><br><span class="line">+++ b&#x2F;seven</span><br><span class="line">@@ -0,0 +1 @@</span><br><span class="line">+bcd</span><br></pre></td></tr></table></figure><p><code>git diff --staged HEAD^</code> 得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">diff --git a&#x2F;resetfile b&#x2F;resetfile</span><br><span class="line">index 802992c..ce8018b 100644</span><br><span class="line">--- a&#x2F;resetfile</span><br><span class="line">+++ b&#x2F;resetfile</span><br><span class="line">@@ -1 +1 @@</span><br><span class="line">-Hello world</span><br><span class="line">+Hi world</span><br><span class="line">diff --git a&#x2F;seven b&#x2F;seven</span><br><span class="line">index e69de29..8baef1b 100644</span><br><span class="line">--- a&#x2F;seven</span><br><span class="line">+++ b&#x2F;seven</span><br><span class="line">@@ -0,0 +1 @@</span><br><span class="line">+abc</span><br></pre></td></tr></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p><code>git show [commit_id]:[filename]</code> 用于查看某次提交中某个文件的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git show a3bb:resetfile</span><br><span class="line"><span class="comment"># 输出 Hello world</span></span><br></pre></td></tr></table></figure><hr><p>日常中用到的命令基本也就这些了（远程库相关的之后再补），其他的像打标签什么的，我反正是用的不太多，而且打标签也不复杂。</p><p>在此推荐这个网站 <a href="https://learngitbranching.js.org/?locale=zh_CN">https://learngitbranching.js.org/?locale=zh_CN</a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java容器类</title>
      <link href="posts/1994952861/"/>
      <url>posts/1994952861/</url>
      
        <content type="html"><![CDATA[<blockquote><p>  写这个的起因是是，对于 Java 容器类的 api 接口不是很熟悉，所以稍微整理一下，增强记忆。</p><p>  尤其是 <code>add</code>, <code>remove</code> 两个方法不太熟悉，不明白不同的容器类增删的位置。</p></blockquote><p><strong>List</strong></p><ul><li>  <a href="#ArrayList">ArrayList</a></li><li>  <a href="#LinkedList">LinkedList</a></li></ul><p><strong>Set</strong></p><ul><li>  <a href="#HashSet">HashSet</a></li><li>  <a href="#TreeSet">TreeSet</a></li><li>  LinkedHashSet</li></ul><p><strong>Map</strong></p><ul><li>  <a href="#HashMap">HashMap</a></li><li>  <a href="#TreeMap">TreeMap</a></li></ul><h2 id="Collection-lt-E-gt"><a href="#Collection-lt-E-gt" class="headerlink" title="Collection&lt;E&gt;"></a>Collection&lt;E&gt;</h2><p>增：</p><ul><li>  <code>add(E e)</code></li><li>  <code>addAll(Collection&lt;? extends E&gt; c)</code></li></ul><p>删：</p><ul><li>  <code>clear()</code></li><li>  <code>remove(Object o)</code></li><li>  <code>removeAll</code></li><li>  <code>retainAll</code></li></ul><p>查：</p><ul><li>  <code>contains</code></li><li>  <code>containsAll</code></li><li>  <code>equals</code></li><li>  <code>isEmpty</code></li><li>  <code>size</code></li></ul><h2 id="Deque-lt-E-gt"><a href="#Deque-lt-E-gt" class="headerlink" title="Deque&lt;E&gt;"></a>Deque&lt;E&gt;</h2><p>double ended queue</p><p>以下截取自 <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Deque.html">JavaSE 8</a> 的文档</p><blockquote><p>  This interface defines methods to access the elements at both ends of the deque. </p><p>  Methods are provided to insert, remove, and examine the element. <strong>Each of these methods exists in two forms</strong>: one throws an exception if the operation fails, the other returns a special value (either <code>null</code> or <code>false</code>, depending on the operation). </p><p>  The latter form of the insert operation is designed specifically for use with capacity-restricted <code>Deque</code> implementations; in most implementations, insert operations cannot fail.</p></blockquote><table><thead><tr><th></th><th><strong>First Element (Head)</strong></th><th><strong>First Element (Head)</strong></th><th><strong>Last Element (Tail)</strong></th><th><strong>Last Element (Tail)</strong></th></tr></thead><tbody><tr><td></td><td><em>Throws exception</em></td><td><em>Special value</em></td><td><em>Throws exception</em></td><td><em>Special value</em></td></tr><tr><td><strong>Insert</strong></td><td><code>addFirst(e)</code></td><td><code>offerFirst(e)</code></td><td><code>addLast(e)</code></td><td><code>offerLast(e)</code></td></tr><tr><td><strong>Remove</strong></td><td><code>removeFirst()</code></td><td><code>pollFirst()</code></td><td><code>removeLast()</code></td><td><code>pollLast()</code></td></tr><tr><td><strong>Examine</strong></td><td><code>getFirst()</code></td><td><code>peekFirst()</code></td><td><code>getLast()</code></td><td><code>peekLast()</code></td></tr></tbody></table><table><thead><tr><th><strong>Queue Method</strong></th><th><strong>Equivalent Deque Method</strong></th></tr></thead><tbody><tr><td><code>add(e)</code></td><td><code>addLast(e)</code></td></tr><tr><td><code>offer(e)</code></td><td><code>offerLast(e)</code></td></tr><tr><td><code>remove()</code></td><td><code>removeFirst()</code></td></tr><tr><td><code>poll()</code></td><td><code>pollFirst()</code></td></tr><tr><td><code>element()</code></td><td><code>getFirst()</code></td></tr><tr><td><code>peek()</code></td><td><code>peekFirst()</code></td></tr></tbody></table><table><thead><tr><th><strong>Stack Method</strong></th><th><strong>Equivalent <code>Deque</code> Method</strong></th></tr></thead><tbody><tr><td><code>push(e)</code></td><td><code>addFirst(e)</code></td></tr><tr><td><code>pop()</code></td><td><code>removeFirst()</code></td></tr><tr><td><code>peek()</code></td><td><code>peekFirst()</code></td></tr></tbody></table><ul><li><p>  <code>removeFirstOccurrence(Object o)</code> : Removes the first occurrence of the specified element from this deque.</p></li><li><p>  <code>removeLastOccurrence(Object o)</code> : Removes the last occurrence of the specified element from this deque.</p></li></ul><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><ul><li><p><code>add(E e)</code> : Appends the specified element to the end of this list.</p><p>  类似的还有 </p><ol><li><p> <code>addAll(Collection&lt;? extends E&gt; c)</code></p></li><li><p> <code>add(int index, E element)</code> </p></li><li><p> <code>addAll(int index, Collection&lt;? extends E&gt; c)</code></p></li></ol></li></ul><h2 id="删"><a href="#删" class="headerlink" title="删"></a>删</h2><ul><li><p>  <code>clear()</code></p></li><li><p><code>remove(Object o)</code> : 删除第一个匹配的，必须传参</p><p>  类似的还有 </p><ol><li> <code>remove(int index)</code></li><li> <code>removeAll(Collection&lt;?&gt; c)</code>,</li><li> <code>removeIf(Predicate&lt;? super E&gt; filter)</code></li><li> <code>removeRange(int fromIndex, int toIndex)</code> : Removes from this list all of the elements whose index is between <code>fromIndex</code>, inclusive, and <code>toIndex</code>, exclusive.</li></ol></li></ul><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><ul><li><p>  <code>equals(Object o)</code></p></li><li><p>  <code>get(int index)</code></p></li><li><p>  <code>indexOf(Object o)</code> : Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.</p></li><li><p>  <code>lastIndexOf(Object o)</code> : Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.</p></li><li><p><code>contains(Object o)</code></p><p>  类似的还有</p><ol><li> <code>containsAll(Collection&lt;?&gt; c)</code></li></ol></li></ul><h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><ul><li><p>  <code>set(int index, E element)</code> : Replaces the element at the specified position in this list with the specified element.</p></li><li><p>  <code>sort(Comparator&lt;? super E&gt; c)</code> :  Sorts this list according to the order induced by the specified Comparator.</p></li></ul><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><p>基本就是在 <code>ArrayList</code> 的基础上，又实现了 <code>Deque</code> 的接口</p><h2 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h2><p>个人看来就是普通的 set 呗，不过其中有个 <code>load factor</code> 的概念一开始不是很清楚，在此介绍一下</p><p><code>HashSet</code> 有 <code>initialCapacity</code> 和 <code>loadFactor</code></p><p>前者不用多说，初始容量，而后者（我也不知道中文应该怎么翻译）的作用在于 resize</p><p>比如 HashSet 默认 <code>initialCapacity = 16</code>, <code>loadFactor = 0.75</code>，在 <code>HashSet</code> 的元素个数达到 <code>16*0.75=12</code></p><p>的时候，就会自动扩容。</p><p>至于方法其实都是很常规的增删改查</p><p><code>add(E e)</code>, <code>clear()</code>, <code>contains(Object o)</code>, <code>isEmpty()</code>, <code>size()</code></p><h2 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h2><p>底层用红黑树，抽空有时间看完红黑树再来补充</p><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><ul><li>  <code>compute(K key, BiFunction&lt;? super K,? super V,? extends V&gt; remappingFunction)</code> : Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).</li><li>  <code>computeIfAbsent(K key, Function&lt;? super K,? extends V&gt; mappingFunction)</code> : If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null.</li><li>  <code>computeIfPresent(K key, BiFunction&lt;? super K,? super V,? extends V&gt; remappingFunction)</code> : if the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value.</li></ul><blockquote><p>  对于以上三种方法，实例如下：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;value2&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;key3&quot;</span>, <span class="string">&quot;value3&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;key4&quot;</span>, <span class="string">&quot;value4&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(map.entrySet());</span><br><span class="line">map.compute(<span class="string">&quot;key1&quot;</span>, (key, value) -&gt; key + value);</span><br><span class="line">map.computeIfPresent(<span class="string">&quot;key4&quot;</span>, (key, value)-&gt; <span class="string">&quot;hh&quot;</span>);</span><br><span class="line">map.computeIfAbsent(<span class="string">&quot;key5&quot;</span>, (key)-&gt; Integer.toString(key.length()));</span><br><span class="line">System.out.println(map.toString());</span><br></pre></td></tr></table></figure><p>  输出为：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[key1=value1, key2=value2, key3=value3, key4=value4]</span><br><span class="line">&#123;key1=key1value1, key2=value2, key5=<span class="number">4</span>, key3=value3, key4=hh&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="增-1"><a href="#增-1" class="headerlink" title="增"></a>增</h3><ul><li>  <code>put(K key, V value)</code></li><li>  <code>putAll(Map&lt;? extends K,? extends V&gt; m)</code></li><li>  <code>    putIfAbsent(K key, V value)</code></li></ul><h3 id="删-1"><a href="#删-1" class="headerlink" title="删"></a>删</h3><ul><li>  <code>remove(Object key)</code></li><li>  <code>remove(Object key, Object value)</code> : Removes the entry for the specified key only if it is currently mapped to the specified value.</li></ul><h3 id="查-1"><a href="#查-1" class="headerlink" title="查"></a>查</h3><ul><li>  <code>containsKey(Object key)</code></li><li>  <code>containsValue(Object value)</code></li><li>  <code>entrySet()</code> : Returns a Set view of the mappings contained in this map.</li><li>  <code>keySet()</code></li><li>  <code>values()</code></li><li>  <code>get(Object key)</code></li><li>  <code>getOrDefault(Object key, V defaultValue)</code></li></ul><h3 id="改-1"><a href="#改-1" class="headerlink" title="改"></a>改</h3><ul><li>  <code>replace(K key, V value)</code></li><li>  <code>replace(K key, V oldValue, V newValue)</code> : Replaces the entry for the specified key only if currently mapped to the specified value.</li><li><code>replaceAll(BiFunction&lt;? super K,? super V,? extends V&gt; function)</code> : Replaces each entry’s value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.</li></ul><h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><p>也是红黑树，之后再补。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven 初步介绍</title>
      <link href="posts/2142312108/"/>
      <url>posts/2142312108/</url>
      
        <content type="html"><![CDATA[<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><p>Maven 是专门为 Java 项目打造的管理和构建工具，它的主要功能有：</p><ul><li>  提供了一套标准化的项目结构；</li><li>  提供了一套标准化的构建流程（编译，测试，打包，发布……）；</li><li>  提供了一套依赖管理机制。</li></ul><p>一个使用 Maven 管理的普通 Java 项目，目录结构默认如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a-maven-project</span><br><span class="line">├── pom.xml</span><br><span class="line">├── src</span><br><span class="line">│   ├── main</span><br><span class="line">│   │   ├── java</span><br><span class="line">│   │   └── resources</span><br><span class="line">│   └── test</span><br><span class="line">│       ├── java</span><br><span class="line">│       └── resources</span><br><span class="line">└── target</span><br></pre></td></tr></table></figure><p>目录结构都是约定好的标准结构，不要随意修改目录结构。</p><p><code>pom.xml</code> (<code> Project Object Model</code>)是项目描述文件 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span> = <span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span> = <span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span> = <span class="string">&quot;http://maven.apache.org/POM/4.0.0</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 模型版本 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 一般都写死了 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- groupId 一般是公司或者组织的名字， artifactId 一般是项目名称 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- groupId, artifactId 和 version 共同作为唯一标识 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入第三方库时，也同样如此，用这三个确定所需要的依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.luoxin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>project<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- parent 类似于继承？ 在于复用，在于多模块场景 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将公共部分的依赖提取出来，作为 parent，</span></span><br><span class="line"><span class="comment"> 之后在其他模块中就只需要导入 parent就可以了，不用重复配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>maven 会自动帮我们进行依赖管理，如果我们要导入的包有其他的依赖，maven 会自动帮我们导入 。</p><h3 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h3><table><thead><tr><th align="left">scope</th><th align="left">说明</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left">compile</td><td align="left">编译时需要用到该 jar 包（默认）</td><td align="left">commons-logging</td></tr><tr><td align="left">test</td><td align="left">编译 Test 时需要用到该 jar 包</td><td align="left">junit</td></tr><tr><td align="left">runtime</td><td align="left">编译时不需要，但运行时需要用到</td><td align="left">mysql</td></tr><tr><td align="left">provided</td><td align="left">编译时需要用到，但运行时由 JDK 或某个服务器提供</td><td align="left">servlet-api</td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中 <code>&lt;scope&gt;</code> 标签，用于在项目发布过程中，帮助决定哪些构件被包括进来。</p><h2 id="构建流程"><a href="#构建流程" class="headerlink" title="构建流程"></a>构建流程</h2><p>Maven 可以自动化实现编译、打包、发布等等。</p><h3 id="Lifecycle-Phase-Goal"><a href="#Lifecycle-Phase-Goal" class="headerlink" title="Lifecycle Phase Goal"></a>Lifecycle Phase Goal</h3><p>Maven 有三套<strong>相互独立</strong>的的生命周期。</p><ul><li>  clean</li><li>  default</li><li>  site</li></ul><p>三套生命周期有各自有其 Phase</p><p>如对于 clean 有</p><ul><li>  pre-clean</li><li>  clean</li><li>  post-clean</li></ul><blockquote><p>  另外两个 lifecycle 的 phase 就不写了。</p></blockquote><p>当执行 <code>mvn</code> 命令时，后面接的参数就是 phase</p><p>常用的 <code>mvn package</code> 就是运行到 default 生命周期的 package 阶段。</p><p>常用的命令有：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mvn clean</span><br><span class="line">mvn clean compile</span><br><span class="line">mvn clean test</span><br><span class="line">mvn clean package</span><br></pre></td></tr></table></figure><p>执行一个 Phase 会触发多个 Goal</p><table><thead><tr><th align="left">执行的Phase</th><th align="left">对应执行的Goal</th></tr></thead><tbody><tr><td align="left">compile</td><td align="left">compiler:compile</td></tr><tr><td align="left">test</td><td align="left">compiler:testCompile surefire:test</td></tr></tbody></table><p>goal 的命名总是<code>abc:xyz</code>这种形式。</p><hr><ul><li>  lifecycle 相当于 Java 的 package，它包含一个或多个 phase；</li><li>  phase 相当于 Java 的 class，它包含一个或多个 goal；</li><li>  goal 相当于 class 的 method，它其实才是真正干活的。</li></ul><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>Maven 执行每个 phase 时，都是通过某个插件来执行的，Maven 本身其实并不知道如何执行<code>compile</code>，它只是负责找到对应的 <code>compiler</code> 插件，然后执行默认的 <code>compiler:compile</code> 这个 goal 来完成编译。</p><p>Maven 内置了一些常用的标准插件，但如果标准插件无法满足要求，我们可以使用自定义插件。</p><p>自定义插件往往需要一些配置。</p><hr><p>基本就这些吧，只是个人粗略的学习。详细的笔记之后有时间了，看看视频再来补。</p><p align="right">本文参考：<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1255945359327200">廖雪峰的官方网站</a>、<a href="https://www.runoob.com/maven/maven-tutorial.html">菜鸟教程</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AOP 基于注解方式</title>
      <link href="posts/1872579400/"/>
      <url>posts/1872579400/</url>
      
        <content type="html"><![CDATA[<h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><p>Aspect Oriented Programming</p><p>利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><p>即在不通过修改源代码的情况下，添加新功能。</p><h2 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h2><p><strong>动态代理</strong></p><p>区分两种情况</p><ol><li><p>有接口情况，使用 JDK 动态代理</p><p> 创建接口的实现类代理对象，增强类的方法</p></li><li><p>没有接口情况，使用 CGLIB 动态代理</p><p> 创建当前类子类的代理对象，增强类的方法</p></li></ol><p>即，<strong>Spring 对接口类型使用 JDK 动态代理，对普通类使用 CGLIB 创建子类</strong></p><h3 id="JDK-动态代理"><a href="#JDK-动态代理" class="headerlink" title="JDK 动态代理"></a>JDK 动态代理</h3><ol><li><p>使用 JDK 动态代理，使用 proxy 类里的方法</p><p> 调用 <code>newProxyInstance</code> 方法</p><table><thead><tr><th align="left">返回值</th><th>参数</th></tr></thead><tbody><tr><td align="left"><code>static Object</code></td><td><code>newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</code></td></tr></tbody></table><p> Param1: 类加载器</p><p> Param2: 增强方法所在的类，这个类实现的接口，支持写多个接口</p><p> Param3: 实现这个接口 InvocationHandler，创建代理对象，写增强的方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UserDao.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(String id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UserDaoImpl.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JDKProxy.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDKProxy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Class[] interfaces = &#123;UserDao.class&#125;;</span><br><span class="line">        UserDaoImpl userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">        UserDao dao = (UserDao) Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces, <span class="keyword">new</span> UserDaoProxy(userDao));</span><br><span class="line">        <span class="keyword">int</span> add = dao.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        String update = dao.update(<span class="string">&quot;Hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDaoProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 传递要创建代理对象的类</span></span><br><span class="line">    <span class="comment">// 有参构造</span></span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDaoProxy</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 增强的逻辑</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 要增强的方法之前</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Before...&quot;</span> + method.getName() + <span class="string">&quot; : Params ...&quot;</span> + Arrays.toString(args));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行要增强的方法</span></span><br><span class="line">        Object res = method.invoke(obj, args);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 要增强的方法之后</span></span><br><span class="line">        System.out.println(<span class="string">&quot;After...&quot;</span> + obj);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="AOP-术语"><a href="#AOP-术语" class="headerlink" title="AOP 术语"></a>AOP 术语</h2><ul><li><p><strong>连接点</strong></p><p>  类中可以被增强的方法</p></li><li><p><strong>切入点</strong></p><p>  实际被真正增强的方法</p></li><li><p><strong>通知（增强）</strong></p><p>  实际增强的逻辑部分</p><ul><li>  前置通知 <code>@Before</code></li><li>  后置通知 <code>@Afterreturning</code></li><li>  环绕通知 <code>@Around</code></li><li>  异常通知 <code>@AfterThrowing</code></li><li>  最终通知 <code>@After</code></li></ul></li><li><p><strong>切面</strong></p><p>  是一个动作</p><p>  把通知应用到切入点的过程</p></li></ul><h2 id="AOP-操作"><a href="#AOP-操作" class="headerlink" title="AOP 操作"></a>AOP 操作</h2><ol><li><p>Spring 框架一般都是基于 AspectJ 实现 AOP 操作</p><p> AspectJ 不是 Spring 组成部分，独立 AOP 框架，一般把 AspectJ 和 Spring 框架一起使用，进行 AOP 操作</p></li><li><p>基于 AspectJ 实现 AOP 操作</p><ul><li>  基于 xml</li><li>  基于注解（常用）</li></ul></li><li><p> 步骤</p></li><li><p>切入点表达式</p><p> 知道对类里哪个方法进行增强</p><p> <strong>语法结构</strong>：<code>execution([权限修饰符][返回类型][类全路径][方法名称]([参数列表]))</code></p><ul><li><p>eg: 对 <code>com.company.luoxin.user</code> 类里的 <code>add</code> 方法进行增强</p><p>   <code>execution(* com.company.luoxin.user.add(..))</code></p><p>  <code>*</code> 是通配符，也可以用在方法名称、类路径中</p></li></ul></li><li><p>相同切入点抽取</p><p> 在方法前加入以下注解</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut(value = &quot;execution(* com.luoxin.User.add(..))&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enhance</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p> 然后再通知前加入以下注解（以 <code>@Before </code>为例）</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(value=&quot;enhance()&quot;)</span></span><br></pre></td></tr></table></figure></li><li><p>有多个增强类对同一个方法进行增强时，可以设置增强类优先级</p><p> 在增强类上添加注解 <code>@Order(2)</code> ，注解中 2 可以替换成其他数字，值越小优先级越高</p></li></ol><hr><p>配置文件方法略</p><hr><p>综上：</p><p>个人结合 《Spring 实战（第四版）》写出了如下测试代码</p><p>首先创建一个 <code>Music</code> 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Music.java</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Music</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">play</span><span class="params">(<span class="keyword">int</span> order)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Play No.&quot;</span> + order + <span class="string">&quot; music&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在正常调用 <code>Music.play</code> 方法时，只会输出一行信息，并返回传入的参数</p><p>现在问题来了，<span style="background: #7FFFD4">如何在不改变原方法的情况下，为 <code>Music.play</code> 方法的调用计数？</span></p><p>具体操作如下：</p><p>创建 <code>MusicCounter</code> 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MusicCounter.java</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MusicCounter</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 记录第 order 首曲子被演唱的次数</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, Integer&gt; mp = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// order 传参</span></span><br><span class="line">    <span class="comment">// 注意使用了 @Pointcut</span></span><br><span class="line">    <span class="meta">@Pointcut(value = &quot;execution(* com.luoxin.spring.Music.play(..)) &amp;&amp; args(order)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playEnhance</span><span class="params">(<span class="keyword">int</span> order)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意额外的代码</span></span><br><span class="line">    <span class="meta">@Around(value = &quot;playEnhance(order)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">playAround</span><span class="params">(ProceedingJoinPoint jp, <span class="keyword">int</span> order)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Let&#x27;s begin!&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> initialReturn = (<span class="keyword">int</span>) jp.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;The end!&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> currentTimes = getTimes(order);</span><br><span class="line">        mp.put(order, currentTimes + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> initialReturn * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTimes</span><span class="params">(<span class="keyword">int</span> order)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mp.containsKey(order) ? mp.get(order) : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AppConfig.java</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Music <span class="title">setMu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Music();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MusicCounter <span class="title">setMc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MusicCounter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实通知的过程已经结束了，以下是测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MusicTest.java</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = AppConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MusicTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Music music;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MusicCounter musicCounter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMusic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        music.play(<span class="number">1</span>);</span><br><span class="line">        music.play(<span class="number">2</span>);</span><br><span class="line">        music.play(<span class="number">3</span>);</span><br><span class="line">        music.play(<span class="number">2</span>);</span><br><span class="line">        music.play(<span class="number">4</span>);</span><br><span class="line">        music.play(<span class="number">2</span>);</span><br><span class="line">        music.play(<span class="number">3</span>);</span><br><span class="line">        System.out.println(music.play(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;No.&quot;</span> + i + <span class="string">&quot;: &quot;</span> + musicCounter.getTimes(i) + <span class="string">&quot; times.&quot;</span> );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行 <code>MusicTest.testMusic</code> 方法，即可得到如下输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Let&#39;s begin!</span><br><span class="line">Play No.1 music</span><br><span class="line">The end!</span><br><span class="line">Let&#39;s begin!</span><br><span class="line">Play No.2 music</span><br><span class="line">The end!</span><br><span class="line">Let&#39;s begin!</span><br><span class="line">Play No.3 music</span><br><span class="line">The end!</span><br><span class="line">Let&#39;s begin!</span><br><span class="line">Play No.2 music</span><br><span class="line">The end!</span><br><span class="line">Let&#39;s begin!</span><br><span class="line">Play No.4 music</span><br><span class="line">The end!</span><br><span class="line">Let&#39;s begin!</span><br><span class="line">Play No.2 music</span><br><span class="line">The end!</span><br><span class="line">Let&#39;s begin!</span><br><span class="line">Play No.3 music</span><br><span class="line">The end!</span><br><span class="line">Let&#39;s begin!</span><br><span class="line">Play No.2 music</span><br><span class="line">The end!</span><br><span class="line">4</span><br><span class="line">No.0: 0 times.</span><br><span class="line">No.1: 1 times.</span><br><span class="line">No.2: 4 times.</span><br><span class="line">No.3: 2 times.</span><br><span class="line">No.4: 1 times.</span><br></pre></td></tr></table></figure><blockquote><p>  注意运行结果第 25 行</p><p>  这说明函数返回值已得到更改</p></blockquote><div class="note red icon modern"><i class="note-icon far fa-question-circle"></i><p><strong><a style="font-size: 20px">Question:</a></strong></p><p>博主在自己演示的时候，曾经把 <code>MusicCounter</code> 类的 <code>HashMap</code> 属性设为了 <code>static</code>，而且为 <code>AppConfig</code> 添加了 <code>@ComponentScan</code> 注解</p><p>之后发现输出中，最后通知都输出两次，而且计数的时候，都记录了双倍：0 2 8 4 2，但 <code>Music.play</code> 方法的输出只有一次。</p><p>起初猜测原因在于，<code>@ComponentScan</code> 已为 <code>Music</code> 类和 <code>MusicCounter</code> 类创建了对象，然后 <code>AppConfig</code> 类中的 <code>@Bean</code> 注解又再次创建，致使在 <code>MusicTest</code> 类在运行的时候，两个对象中都运行了一次，即一个方法运行了两次。</p><p>但是又很奇怪， <code>Music.play</code> 方法的输出只有一次，所以上述猜测应该不成立</p><p><span style="background: #00FA9A">详细解释，还得等以后再来解答</span></p></div><h3 id="AOP-为类添加新方法"><a href="#AOP-为类添加新方法" class="headerlink" title="AOP 为类添加新方法"></a>AOP 为类添加新方法</h3><p>前文都是对方法的增强，但是 AOP 也可以为类增加新的方法</p><p>比如接着上文，<code>Music</code> 类中，仅有 <code>play</code> 方法，现在我们希望增加一个 <code>stop</code> 方法</p><p>操作如下：</p><p>首先定义一个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Stop.java</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Stop</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">musicStop</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着为这个接口添加一个实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MusicStop.java</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MusicStop</span> <span class="keyword">implements</span> <span class="title">Stop</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">musicStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Music stop...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面都是常规操作，现在注意以下内容：</p><p>编写切面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NewMethod.java</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewMethod</span> </span>&#123;</span><br><span class="line">    <span class="meta">@DeclareParents(value = &quot;com.luoxin.spring.Music&quot;, defaultImpl = MusicStop.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Stop stop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此就已经结束了</p><p>添加测试的话，只需要 <code>AppConfig</code> 类中，添加 Bean，或者直接加上 <code>@ComponentScan</code> 注解（添加注解后，可以去掉里面的方法）</p><p>最后再 <code>MusicTest</code> 中，对 <code>music</code> 强制转换即可（直接在上面已有的代码中插入）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((Stop) music).musicStop();</span><br></pre></td></tr></table></figure><p>可以得到输出（已略掉其他输出）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Music stop...</span><br></pre></td></tr></table></figure><p>Over.</p><hr><p>综上，简而言之，AOP 基本就是首先用 IOC 注入依赖，然后 ：</p><ol><li> 在增强方法所在类上，引入 <code>@Aspect</code> 注解</li><li> 在增强方法上，引入 <code>@Before</code> 等注解，注解里面 写上<code>execution(* com.company.luoxin.user.add(..))</code></li><li> 配置文件上加入 <code>@EnableAspectJAutoProxy</code> 注解</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOC 基于注解方式管理</title>
      <link href="posts/3428300145/"/>
      <url>posts/3428300145/</url>
      
        <content type="html"><![CDATA[<h1 id="IOC-基于注解方式管理"><a href="#IOC-基于注解方式管理" class="headerlink" title="IOC 基于注解方式管理"></a>IOC 基于注解方式管理</h1><p>注解：</p><ol><li> 注解是代码特殊标记，格式：<code>@注解名称(属性名称=属性值，属性名称=属性值...)</code></li><li> 使用注解，注解作用在类、方法、属性上</li><li> 简化 xml 配置</li></ol><p>Spring 针对 Bean 管理中创建对象提供注解</p><ul><li>  <code>@Component</code></li><li>  <code>@Service</code></li><li>  <code>@Controller</code></li><li>  <code>@Repository</code></li></ul><p>上面四个注解功能是一样的，都可以用来创建 bean 实例</p><h2 id="基于注解实现对象创建"><a href="#基于注解实现对象创建" class="headerlink" title="基于注解实现对象创建"></a>基于注解实现对象创建</h2><ol><li><p><strong>引入依赖</strong></p><p> 引入 spring aop 的 jar 包</p></li><li><p><strong>开启组件扫描</strong></p><p> <u>注意引入 context</u></p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启组件扫描</span></span><br><span class="line"><span class="comment">     1. 如果扫描多个包，多个包用都好隔开</span></span><br><span class="line"><span class="comment">     2. 或者扫描包的包的上层目录</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.company&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>细节配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.company&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只扫描 com.company 中注解为 Controller 的类 --&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.company&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 扫描 com.company 中注解为 Controller 以外的类 --&gt;</span></span><br></pre></td></tr></table></figure></blockquote></li><li><p><strong>创建类，在类上面创建对象注解</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在注解里 value 属性值可以省略不写，默认值是类名称，首字母小写</span></span><br><span class="line"><span class="meta">@Component(value = &quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;User add ...... &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="基于注解实现属性注入"><a href="#基于注解实现属性注入" class="headerlink" title="基于注解实现属性注入"></a>基于注解实现属性注入</h2><ul><li><p><code>@Autowired</code><br>  根据属性类型自动装配</p></li><li><p><code>@Qualifier</code></p><p>  根据属性名称进行注入</p><p>  跟 <code>@Autowired</code> 配合使用，在一个接口有多个实现类的时候，可以通过 <code>@Qualifier(value=&quot;impl1&quot;)</code> 来指定具体哪个实现类（实现类上注解的 value 值可写可不写）</p></li><li><p><code>@Resource</code></p><p>  可以根据类型注入，也可以根据名称注入</p><p>  来自 <code>import javax.annotation.Resource;</code> 需要导入 <code>tomcat-annotations-api-8.5.65.jar</code> 包</p><p>  所以 java 官方不推荐使用</p></li><li><p><code>@Value</code></p><p>  注入普通类型属性</p></li></ul><h2 id="完全注解开发"><a href="#完全注解开发" class="headerlink" title="完全注解开发"></a>完全注解开发</h2><ol><li><p>创建配置类</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.company&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写测试类</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSpring</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfig.class);</span><br><span class="line">        TestAutowire testAutowire = context.getBean(<span class="string">&quot;testAutowire&quot;</span>, TestAutowire.class);</span><br><span class="line">        testAutowire.testAdd();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><p>个人疑问：</p><p>Q: 不论 xml 还是 注解，编写测试类的时候，都创建了 <code>ApplicationContext</code> 对象，但在实际开发中，其实并没有做这步操作，是使用了 Spring Boot 中的什么性质了呢？</p><p>A: <span style="background:#9370DB; color:yellow"> TODO </span> <span style="color: red">该问题有待之后学了 Spring Boot 之后再来解答</span> <span style="background:#9370DB; color:yellow"> TODO </span></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOC, 基于 xml 管理 bean</title>
      <link href="posts/1220496658/"/>
      <url>posts/1220496658/</url>
      
        <content type="html"><![CDATA[<h1 id="IOC-基于-xml-管理-bean"><a href="#IOC-基于-xml-管理-bean" class="headerlink" title="IOC 基于 xml 管理 bean"></a>IOC 基于 xml 管理 bean</h1><p>Inversion Of Control</p><h2 id="IOC-接口"><a href="#IOC-接口" class="headerlink" title="IOC 接口"></a>IOC 接口</h2><ol><li><p> IOC  思想基于 IOC 容器完成 IOC 容器底层就是对象工厂</p></li><li><p>Spring 提供 IOC 容器两种实现方式：</p><ul><li><p><code>BeanFactory</code>: IOC 容器基本实现，是 Spring 内部使用的接口，不提供开发人员使用</p><p>  <strong>加载配置文件时候不会创建对象，在获取对象（使用）才去创建对象</strong></p></li><li><p><code>ApplicationContext</code>: <code>BeanFactory</code> 接口的子接口，提供更多更强大的功能，一般由开发人员进行使用</p><p>  加载配置文件时候就会把配置文件对象进行创建</p></li></ul></li><li><p><code>ApplicationContext</code> 接口有实现类</p><p> <img src="https://gitee.com/xinlx/pic/raw/master/img/image-20210421215027299.png"></p><p> <code>FileSystemXmlApplicationContext</code> 要写绝对路径</p><p> <code>ClassPathXmlApplicationContext</code> 写相对路径</p></li></ol><h2 id="IOC-操作-Bean-管理"><a href="#IOC-操作-Bean-管理" class="headerlink" title="IOC 操作 Bean 管理"></a>IOC 操作 Bean 管理</h2><ol><li>什么是 Bean 管理<ul><li>  Spring 创建对象</li><li>  Spring 注入属性</li></ul></li><li>Bean 管理操作有两种方式<ul><li>  基于 xml 配置文件方式实现</li><li>  基于注解方式实现</li></ul></li></ol><h3 id="基于-xml-方式管理"><a href="#基于-xml-方式管理" class="headerlink" title="基于 xml 方式管理"></a>基于 xml 方式管理</h3><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><ul><li><p>在 Spring 配置文件中，使用 bean 标签，标签里添加对应属性，就可以实现对象创建</p><p>  <img src="https://gitee.com/xinlx/pic/raw/master/img/image-20210421220125966.png" alt="image-20210421220125966"></p></li><li><p>介绍常用的属性</p><p>  id 属性：唯一标识</p><p>  class 属性：类全路径（包类路径）</p></li><li><p>  创建对象的时候，默认执行无参构造方法完成创建</p></li></ul><h4 id="注入属性"><a href="#注入属性" class="headerlink" title="注入属性"></a>注入属性</h4><p>DI: 依赖注入，就是注入属性</p><p>DI 是 IOC 的一种实现方式</p><h5 id="使用-set-方法注入"><a href="#使用-set-方法注入" class="headerlink" title="使用 set 方法注入"></a>使用 set 方法注入</h5><p>创建属性的 set 方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- set 方法注入属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.testdemo.Book&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用 property 完成属性注入</span></span><br><span class="line"><span class="comment">    name: 类属性名称</span></span><br><span class="line"><span class="comment">    value: 向属性注入的值</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Love And Peace&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="使用有参构造进行注入"><a href="#使用有参构造进行注入" class="headerlink" title="使用有参构造进行注入"></a>使用有参构造进行注入</h5><p>创建有参构造器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;college&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.testdemo.College&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Xi&#x27;an&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;NWPU&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note primary no-icon flat"><p>个人的问题有：</p><p><strong>Q1: 如果有多个有参构造器，该如何识别</strong></p><p>A1: name属性值就是类属性的名称</p><p><strong>Q2: 如果参数是一个对象，该如何传值</strong></p><p>A2: 先创建一个 bean，然后用 ref 属性，ref 属性值即为前者的 id 值</p></div><h5 id="注入其他类型属性"><a href="#注入其他类型属性" class="headerlink" title="注入其他类型属性"></a>注入其他类型属性</h5><ul><li><p><strong>字面量</strong></p><ul><li><p>null 值</p><p>  使用 null 标签</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;college&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.testdemo.College&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;location&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Xi&#x27;an&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">null</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注意用 property 也可以--&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>特殊字符</p><ol><li><p>转义</p><p> &amp;gt; &amp;lt;</p></li><li><p>把特殊内容写进 CDATA</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;college&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.testdemo.College&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;location&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Xi&#x27;an&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[&lt;&lt;Xi&#x27;an&gt;&gt;]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注意用 property 也可以--&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ul></li><li><p><strong>注入属性-外部 bean</strong></p><p>  先用 bean 创建对象，然后用 ref 引用</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.testdemo.Book&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Love And Peace&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;college&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.testdemo.College&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;location&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Xi&#x27;an&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[&lt;&lt;Xi&#x27;an&gt;&gt;]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;book&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;book&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>  <strong>注入属性-内部 bean</strong> </p></li></ul><blockquote><p>  eg: 一对多 Department - Employee 在 Employee 中表示所属的 Department</p><p>   在创建 Employee 的 bean 时，嵌套一个 Department 的 bean</p></blockquote><ul><li><p><strong>级联赋值</strong></p><p>  两种方法</p><ol><li><p> 在外部 bean 中赋值，然后 ref 引用</p></li><li><p> 也可以在外部创建 bean，然后用</p></li></ol>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;department.name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xxx&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意 name 的值--&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>注入集合属性</p><p>  类属性定义如下</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String[] coursers;</span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line"><span class="keyword">private</span> Map&lt;String, String&gt; map;</span><br><span class="line"><span class="keyword">private</span> Set&lt;String&gt; set;</span><br><span class="line"><span class="comment">// 注意还要有相关属性的 set 方法</span></span><br></pre></td></tr></table></figure><p>  xml 如下</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.collectiontype.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;coursers&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>java<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>sql<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Jack<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Mary<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;java&quot;</span> <span class="attr">value</span>=<span class="string">&quot;spring&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;cpp&quot;</span> <span class="attr">value</span>=<span class="string">&quot;stl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;set&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Mysql<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Nosql<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>  Q: 枚举的方式始终有点笨拙，如何实现类似 for 循环的遍历</p><p>  A: 暂无，或许问题也有问题？</p></blockquote><p>  在集合中引用对象：</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;courseList&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;course1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;course2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  将集合提取：</p><ol><li><p> 在 xml 配置文件中，引入 util</p></li><li><p> 提取 list 集合属性注入</p></li></ol>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">&quot;bookList&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>yyy<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 中间也可以用 ref 替换 value 来引用一个对象--&gt;</span></span><br></pre></td></tr></table></figure><ol><li> 注入使用</li></ol>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;boolList&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><span style="color: red">Spring 有两种 bean，一种普通 bean，另一种工厂 bean (FactoryBean)</span></p><ul><li>  普通 bean: 在配置文件中定义 bean 类型就是返回类型（如上面所创建的 bean）</li><li>  工厂 bean: 在配置文件中定义 bean 类型可以和返回类型不一样</li></ul><h3 id="bean-作用域"><a href="#bean-作用域" class="headerlink" title="bean 作用域"></a>bean 作用域</h3><p>在 Spring 中，设置创建 bean 实例默认是单例</p><blockquote><p>  Q: 如何设置是多实例还是单实例</p><p>  A: scope 属性，scope 属性默认属性值是 “singleton”，可以设置为 “prototype” 来表示多实例对象</p><p>  ​     singleton 与 prototype 的区别：</p><p>  ​     singleton 在加载 Sping 配置文件的时候就会创建单实例对象</p><p>  ​     prototype 则是在调用 getBean 方法时创建多实例对象</p></blockquote><h3 id="bean-生命周期"><a href="#bean-生命周期" class="headerlink" title="bean 生命周期"></a>bean 生命周期</h3><ol><li> 通过构造器创建 bean 实例（无参构造）</li><li> 为 bean 的属性设置值和对其他 bean 引用（调用 set 方法）</li><li> 调用 bean 的初始化的方法（需要进行配置初始化的方法）</li><li> bean 可以使用了（对象获取到了）</li><li> 当容器关闭时，调用 bean 的销毁的方法（需要进行配置销毁的方法）</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.collectiontype.Course&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;courseName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;cpp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="bean-的后置处理器"><a href="#bean-的后置处理器" class="headerlink" title="bean 的后置处理器"></a>bean 的后置处理器</h3><ol><li> 通过构造器创建 bean 实例（无参构造）</li><li> 为 bean 的属性设置值和对其他 bean 引用（调用 set 方法）</li><li> <strong>把 bean 实例传递 bean 前置处理器的方法</strong></li><li> 调用 bean 的初始化的方法（需要进行配置初始化的方法）</li><li> <strong>把 bean 实例传递 bean 后置处理器的方法</strong></li><li> bean 可以使用了（对象获取到了）</li><li> 当容器关闭时，调用 bean 的销毁的方法（需要进行配置销毁的方法）</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBeanPost&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.testdemo.MyBeanPost&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- MyBeanPost 是 BeanPostProcessor 的实现类 --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="xml-自动装配"><a href="#xml-自动装配" class="headerlink" title="xml 自动装配"></a>xml 自动装配</h3><p>自动装配：根据指定装配规则（属性名称或者属性类型），Spring 自动将匹配的属性值进行注入</p><p>一般很少用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;employee&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.autowire.Employee&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- autowire 常用有两个值 1. byName  2. byType</span></span><br><span class="line"><span class="comment">        byName 根据属性名称注入，注入值 bean 的 id 值和类属性名称一样</span></span><br><span class="line"><span class="comment">        byType 根据属性类型注入，但是注意不能有多个相同类型的对象</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;department&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.autowire.Department&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="操作外部属性文件"><a href="#操作外部属性文件" class="headerlink" title="操作外部属性文件"></a>操作外部属性文件</h3><ol><li><p>引入 <code>context</code> 标签</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意要在 xml 文件上方导入 context 这个标签 --&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用 <code>$&#123;&#125;</code></p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSouce&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.aaa.bbb&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;xxx.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><hr><p>个人总结，xml 配置，无非就是</p><ul><li><p>用 <strong><code>&lt;bean&gt;&lt;/bean&gt;</code></strong> 标签，来创建对象，其中有 <code>id</code>, <code>class</code> 等属性，</p><p>  <code>scope</code> 可以用来区别单例还是多例，</p><p>  <code>init-method</code>, <code>destory-method</code> 用来传递后置处理器，</p><p>  <code>autowire</code> 用来自动装配</p></li></ul><ul><li><p>用 <strong><code>&lt;property&gt;&lt;/property&gt;</code></strong> 标签来注入属性，其中有 <code>name</code>, <code>value</code> 等属性，</p><p>  <code>ref</code> 可用来注入外部对象/属性，</p><p>  对于集合类属性，可以用 <code>array</code>, <code>list</code>, <code>set</code> 等标签</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows常用软件</title>
      <link href="posts/892930798/"/>
      <url>posts/892930798/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows-常用软件推荐"><a href="#Windows-常用软件推荐" class="headerlink" title="Windows 常用软件推荐"></a>Windows 常用软件推荐</h1><p>最近重新给电脑装了一个专业版的 Win10，很多软件又得重新下载，所以想着写篇文章记录一下，也方便自己之后类似情况直接用起来。</p><h2 id="Daily"><a href="#Daily" class="headerlink" title="Daily"></a>Daily</h2><ol><li><p> <a href="https://pc.weixin.qq.com/">微信</a></p></li><li><p> <a href="https://im.qq.com/pcqq/">QQ</a></p></li><li><p> <a href="https://www.google.com/intl/zh-CN/chrome/">Chrome</a></p></li></ol><h2 id="Tool"><a href="#Tool" class="headerlink" title="Tool"></a>Tool</h2><ol><li> <a href="https://www.7-zip.org/download.html">7z</a> : 压缩文件</li><li> PDF 阅读器（推荐 Adobe）</li><li> <a href="https://www.autohotkey.com/">AutoHotKey</a> : 自定义快捷键</li><li> <a href="https://gitee.com/xinlx/pic/blob/master/Software/DnsJumper.exe">DnsJumper</a> : 开源的 DNS 服务器测试工具</li><li> <a href="http://www.dropitproject.com/">DropIt</a> : 文件分类</li><li> <a href="https://www.voidtools.com/zh-cn/">Everything</a> : 文件索引</li><li> <a href="https://gitee.com/xinlx/pic/blob/master/Software/TrayS%20v1.0.2.zip">TrayS</a> : 任务栏美化工具，来自 52pojie</li><li> <a href="https://github.com/Molunerfinn/PicGo/releases">PicGo</a> : 文件上传，链接图床</li><li> <a href="https://github.com/QL-Win/QuickLook/releases">QuickLook</a> : 文件预览</li><li> <a href="https://typora.io/">Typora</a> : MarkDown 文件编辑器</li><li> <a href="https://gitee.com/xinlx/pic/blob/master/Software/v2rayN.zip">V2rayN</a> : 访问 Google 用</li><li> Office</li></ol><h2 id="Game"><a href="#Game" class="headerlink" title="Game"></a>Game</h2><ol><li> <a href="https://store.steampowered.com/about/">Steam</a></li></ol><h2 id="Programming"><a href="#Programming" class="headerlink" title="Programming"></a>Programming</h2><ol><li> <a href="https://www.eclipse.org/downloads/">Eclipse</a></li><li> <a href="https://git-scm.com/downloads">Git</a></li><li> <a href="https://maven.apache.org/download.cgi">Maven</a></li><li> JDK</li><li> <a href="https://code.visualstudio.com/download">VS Code</a></li><li> <a href="https://www.navicat.com.cn/download/navicat-premium">Navicat Premium 15</a></li><li> <a href="https://nodejs.org/zh-cn/download/">NodeJs</a></li><li> <a href="https://www.netsarang.com/zh/xshell-download/">XSHELL</a></li><li> <a href="https://www.scootersoftware.com/download.php">Beyondsoft Compare 4</a> : 文件对比，<a href="https://gitee.com/xinlx/pic/tree/master/BeyondCompareActivate">激活</a></li><li> <a href="https://github.com/microsoft/terminal/releases">Windows Terminal</a></li></ol><p>还有 MySQL，XFTP 以及其他的开发环境就不说了。</p><hr><p>以上基本就是本机电脑全部的软件了。</p><p>谢谢！</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件推荐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Powershell执行java命令乱码</title>
      <link href="posts/195609546/"/>
      <url>posts/195609546/</url>
      
        <content type="html"><![CDATA[<h1 id="Powershell-执行-java-命令乱码"><a href="#Powershell-执行-java-命令乱码" class="headerlink" title="Powershell 执行 java 命令乱码"></a>Powershell 执行 java 命令乱码</h1><p>问题：下载完 OpenJDK 并配好环境变量后，在 Powershell 中，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java</span><br></pre></td></tr></table></figure><p>显示乱码</p><img src="https://gitee.com/xinlx/pic/raw/master/img/image-20210415215751031.png" alt="image-20210415215751031" style="zoom: 67%;" /><p>Powershell 编码是 <div color="red">adb</div></p><p style={color:"red"}>UTF8</p><p>解决：</p><p>添加环境变量</p><p><img src="https://gitee.com/xinlx/pic/raw/master/img/image-20210415215923941.png" alt="image-20210415215923941"></p><blockquote>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JAVA_TOOL_OPTIONS</span><br><span class="line">-Dfile.encoding&#x3D;UTF-8</span><br></pre></td></tr></table></figure></blockquote><p>或者把语言设置为英文也行</p><blockquote>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JAVA_TOOL_OPTIONS</span><br><span class="line">-Duser.language&#x3D;en</span><br></pre></td></tr></table></figure></blockquote><p>以下是修复之后的情况</p><img src="https://gitee.com/xinlx/pic/raw/master/img/image-20210415221901717.png" alt="image-20210415221901717" style="zoom:67%;" /><p>另外，如果将 Powershell 的编码设置为 GBK 的话，输入 java 命令后，也会显示正常，但是 java 运行程序输出的中文，又会有乱码，归根结底还是，编码不一样导致乱码。</p>]]></content>
      
      
      <categories>
          
          <category> FixProblem </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> PowerShell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WindowsTerminal Powershell Git 命令行美化</title>
      <link href="posts/2146130007/"/>
      <url>posts/2146130007/</url>
      
        <content type="html"><![CDATA[<h1 id="WindowsTerminal-Powershell-Git-命令行美化"><a href="#WindowsTerminal-Powershell-Git-命令行美化" class="headerlink" title="WindowsTerminal Powershell Git 命令行美化"></a>WindowsTerminal Powershell Git 命令行美化</h1><p>本篇文章用于分享博主电脑中对相关命令行的美化。</p><p>先给出大概的预览效果</p><img src="https://gitee.com/xinlx/pic/raw/master/img/allpreview.jpg" style="zoom:50%;" /><div class="note info simple"><p>4.22更新：</p><p>Windows Terminal 新版之后，终于推出了设置的 UI 界面，以后大部分功能可以直接 <code>Ctrl + ,</code> 在 setting 中设置了。</p><p>再也不用编写烦人的 json 了！！！！！！</p></div><h2 id="WindowsTerminal"><a href="#WindowsTerminal" class="headerlink" title="WindowsTerminal"></a>WindowsTerminal</h2><p>有关 WindowsTerminal 的介绍就不用多说了，直接上美化教程。</p><p>额，还是直接上配置文件吧。</p><p>在 WindowsTerminal 里按住 <code>Ctrl + ,</code> 打开配置文件，下载博主个人设置的<a href="https://gitee.com/xinlx/pic/raw/master/img/settings.json">配置文件</a></p><p>最后执行 cv 大法就 ok</p><p>现在对配置文件进行解释说明（其实 Microsoft 的<a href="https://docs.microsoft.com/en-us/windows/terminal/">官方文档</a>已经说明的很详细了，具体可参考 <a href="https://docs.microsoft.com/en-us/windows/terminal/">Docs</a>)</p><p>配置文件里不仅有 PowerShell 的配置，还有 Git 以及 wsl 的配置。此处只说明 PowerShell 和 Git 的配置（因为别的也不常用）。</p><p><code>profiles</code> 中的 <code>defaults</code> 里的配置都是对外观的一些介绍，根据名称应该很容易知道实在设置什么，如果不知道可以自己动手修改一下试试，或者查看<a href="https://docs.microsoft.com/en-us/windows/terminal/">官方文档</a>，其中</p><p><code>background</code> : 可以根据自己的喜好，设置图片，设置好图片的路径就可以了，博主为了避免简约，就没有设置图片背景。</p><p><code>profies</code> 前面的内容，要么是不可以更改要么，已有英文注释说明，此处略去。</p><p><code>fontFace</code> 是字体设置，此处字体不认识没关系，在后面配置进阶样式会有奇效。</p><p>接着 <code>list</code></p><p><code>list</code> 里面就是几个命令行的配置了，PowerShell, CMD, Git 等。</p><p>其中有几个参数可以稍微说明一下：</p><p><code>icon</code> : icon 支持 emoji，所以大家可以像我这样子给每个命令行设置一个有趣的 icon</p><p><code>commandline</code> : 这个是指定 exe 的文件路径，此外说明一下，在博主的配置文件中，Git 的路径是根据自己的电脑路径配置的，大家相应做出更改就行，其中后面加的 <code>--login -i</code> 是避免 Git 中文乱码的情况。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;commandline&quot;: &quot;D:\\__Program__\\Git\\bin\\bash.exe --login -i&quot;</span><br></pre></td></tr></table></figure><p><code>startingDirectory</code> : 是设置初始默认打开的路径，比如按照博主对 Git 的配置，在 WindowsTerminal 中打开 Git 命令行，就将显示如下界面</p><img src="https://gitee.com/xinlx/pic/raw/master/img/Git%E6%A0%B7%E5%BC%8F.jpg"/><p>即默认在该文件夹中打开Git</p><blockquote><p>  哈哈，肯定跟博主的不一样，因为博主额外对 Git 进行了设置，具体配置可以接着往后看</p></blockquote><p><code>list</code> 里面相关的配置就这些了，其他的内容能看懂的就改改试一试，看不懂的就不要乱改了。</p><p>接着是 <code>schemes</code> ，这里面是相关的配色方法，大家可以自己在网上搜一下子其他的配色方案。</p><p>最后是 <code>actions</code> ，其实<a href="https://docs.microsoft.com/en-us/windows/terminal/">官方文档</a>里说的相当详细了，这里我只是设置了部门的快捷键。</p><p>比如 <code>Ctrl + c</code> 直接复制，<code>Ctrl + num</code> 直接跳转至相应的 tab 页（保持对 chrome 的使用习惯），以及 <code>Ctrl + w</code> 关闭标签页</p><p>更多方法可以查阅<a href="https://docs.microsoft.com/en-us/windows/terminal/">官方文档</a></p><p>关于 WindowsTerminal 的配置就暂时告一段落了，要想获得进一步的视觉效果提升，还得接着往后配置。</p><h2 id="PowerShell"><a href="#PowerShell" class="headerlink" title="PowerShell"></a>PowerShell</h2><p>其实对 PowerShell 的配置，微软同样写了<a href="https://docs.microsoft.com/en-us/windows/terminal/tutorials/powerline-setup">文档</a>进行说明，但是据博主写作日期（2021.04.13）来看，该文档存在一些过时的东西，需要进行修改，不然会配置失败。</p><p>首先是打开 PowerShell</p><p>输入以下命令安装 <code>posh-git</code> 和 <a href="https://ohmyposh.dev/docs/"><code>oh-my-posh</code></a></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Install-Module</span> posh<span class="literal">-git</span> <span class="literal">-Scope</span> CurrentUser</span><br><span class="line"><span class="built_in">Install-Module</span> <span class="built_in">oh</span><span class="literal">-my</span><span class="literal">-posh</span> <span class="literal">-Scope</span> CurrentUser</span><br></pre></td></tr></table></figure><p>如果有提示，一直按 <code>y</code> 就可以了</p><p>然后再输入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> <span class="literal">-ExecutionPolicy</span> Bypass</span><br></pre></td></tr></table></figure><p>这一条命令很重要，不要忘记输入，不然之后会报错，无法成功配置</p><p>接着下载或者复制复制博主的 PowerShell 的<a href="https://gitee.com/xinlx/pic/raw/master/img/Microsoft.PowerShell_profile.ps1">配置文件</a></p><p>命名为 <code>Microsoft.PowerShell_profile.ps1</code></p><p>然后将该文件放置于 <code>%userprofile%\Documents\WindowsPowerShell</code> 中（直接将 <code>%userprofile%\Documents\WindowsPowerShell</code> 复制到资源管理器的导航栏就可以到达相应给文件夹下了）（userprofile 是系统变量，存储的是用户文件夹）</p><p>至此美化基本就可以了。</p><p>不过还可以进一步设置，在博主的配置文件中，博主设置了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-PoshPrompt -Theme emodipt</span><br></pre></td></tr></table></figure><p>即使用 emodipt 这个主题（其实自己有做部分修改）</p><p>小伙伴可以根据自己的喜好来设置主题，在 PowerShell 中输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-PoshThemes</span><br></pre></td></tr></table></figure><p>即可查看所有的主题，挑中一款后，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-PoshPrompt -Theme [theme_name]</span><br></pre></td></tr></table></figure><p>可能存在的问题有：</p><p>乱码：这是因为 <a href="https://ohmyposh.dev/docs/"><code>oh-my-posh</code></a> 使用了 Nerd Fonts 的原因，由于一般 windows 都不会原厂安装这个字体，所以很多字符会显示乱码，这也就是为什么前面要设置 <code>fontFace</code> 即字体的原因了。</p><p>博主使用了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;fontFace&quot;: &quot;MesloLGL NF&quot;,</span><br><span class="line">&quot;fontFace&quot;: &quot;Cascadia Code PL&quot;</span><br></pre></td></tr></table></figure><p><code>MesloLGL NF</code> 字体可以通过这个<a href="https://gitee.com/xinlx/pic/raw/master/img/Meslo.zip">🔗链接</a>下载，<code>Cascadia Code PL</code> 字体可以通过这个<a href="https://gitee.com/xinlx/pic/raw/master/img/CascadiaCode-2102.25.zip">🔗链接</a>下载</p><p>在两个文件中选择相应字体安装即可，不行的话，就多安装几个试试。</p><p>另外如果觉得已给的主题都不合心意，想再进一步设置，那就打开 <code>%userprofile%\Documents\WindowsPowerShell\Modules\oh-my-posh\3.137.0\themes</code> 根据已有的主题照猫画虎，或者直接修改已有的主题配置文件（即 json 文件）</p><blockquote><p>  注意：路径中 <code>3.137.0</code> 是 <code>oh-my-posh</code> 的版本，不同时间下载，版本可能不一致，根据自己的情况进行修改就可以了。</p></blockquote><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p>其实配置了 PowerShell 之后，直接在 PowerShell 中使用 Git 会更加美观。但是此处还是给出配置文件，进行适当美化。</p><p>直接给出博主的<a href="https://gitee.com/xinlx/pic/raw/master/img/git-prompt.sh">配置文件</a></p><p>将这个文件直接替换 Git 安装目录下的 <code>etc\profile.d\git-prompt.sh</code> 文件即可，注意名字不要变。</p><p>具体的配置说明，大家直接上网搜吧，博主累了，要睡觉了。</p><p>有什么问题，可以在文章下方评论区留言，楼主会很快回复。（记住留下邮箱，方便博主可以回复哦）</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> PowerShell </tag>
            
            <tag> WindowsTerminal </tag>
            
            <tag> 美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Become a Leader by Thinking Like an Owner</title>
      <link href="posts/3265444336/"/>
      <url>posts/3265444336/</url>
      
        <content type="html"><![CDATA[<h1 id="成为像老板一样思考的领导"><a href="#成为像老板一样思考的领导" class="headerlink" title="成为像老板一样思考的领导"></a>成为像老板一样思考的领导</h1><p>节后第一天上班路上，其实很是担心自己被批评，因为近些天的产出几乎为零，想起上周五，大leader得知我女朋友千里迢迢前来看望我，还特许我在家办公<del>（其实哪来办公，无非是小长假又多了一天而已）</del>。一路不安之下，想起上周大leader说的话，慢慢审视起自己一贯的思维模式了。</p><p>如果我是一个领导者，我是否还会把自己放在一个被审视的角度，被人督促才去完成任务？</p><p>如果我是一个领导者，我是否还会持有完成任务的心态，而非把事情干好的心态？</p><p>如果我是一个领导者，我是否还会等待上级安排任务，而非自己主动承担？</p><p>同一份工作，不同的人有不同的收获，其中的区别就在于自己如何去思考，如何去进步。</p><p>前几天公众号很火的张一鸣的微博，里面有一条就是说</p><blockquote><p>  把自己当老板看，像老板一样拼命干活，能力自然就提高了。</p></blockquote><p>讲真，回首过去半年在公司的事情，自己的心态一直都是一种得过且过的心态，希望自己今后可以引以为戒。</p><p>要想成为领导，先让自己像领导一样思考！</p>]]></content>
      
      
      <categories>
          
          <category> 个人随想 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>tagPlugin</title>
      <link href="posts/1175902008/"/>
      <url>posts/1175902008/</url>
      
        <content type="html"><![CDATA[<p><strong>以下为外挂标签的测试样式</strong></p><div class='tip'><p>默认情况<p><p>默认情况<p></div><div class='tip info'><p>info<p><p>info<p></div><div class='tip success'><p>success<p><p>success<p></div><div class='tip error'><p>error<p><p>error<p></div><div class='tip warning'><p>warning<p><p>warning<p></div><div class='tip font5 fas fa-atom'><p>自定义font5图标<p><p>自定义font5图标<p></div><div class='tip custom icon-QQ2'><p>自定义iconfont图标<p><p>自定义iconfont图标<p></div><div class="tip wtgo font5 fas fa-bolt"><p>文字</p><p>sfd</p></div><div class="tip ban font5 fas fa-ban"><p>文字</p><p>sdf</p></div><div class="tip home font5 fas fa-home"><p>文字</p><p>sdf</p></div><div class="tip important font5 fas fa-home"><p>魔改标签4</p><p>sdf</p></div><div class="tip ref font5 fas fa-sync"><p>魔改标签5</p><p>dsf</p></div><div class="tip ffa font5 fas fa-cogs"><p>魔改标签6</p><p>sdf</p></div><div class="tip key font5 fas fa-key"><p>魔改标签7</p><p>sdf</p></div><div class="tip socd font5 fas fa-bell"><p>魔改标签8</p><p>sdf</p></div><div class="tip qq font5 fab fa-qq"><p>魔改标签9</p><p>sdf</p></div><p>/* default */</p><div  class="note icon custom iconfont icon-QQ2"  style="background: #f7f7f7;border-left-color: #777;">  <p>default</p></div>/* success */<div  class="note icon custom iconfont icon-QQ2"  style="background: #eff8f0;border-left-color: #5cb85c;">  <p>success</p></div>/* primary */<div  class="note icon custom iconfont icon-QQ2"  style="background: #f5f0fa;border-left-color: #6f42c1;">  <p>primary</p></div>/* info */<div  class="note icon custom iconfont icon-QQ2"  style="background: #eef7fa;border-left-color: #428bca;">  <p>info</p></div>/* warning */<div  class="note icon custom iconfont icon-QQ2"  style="background: #fdf8ea;border-left-color: #f0ad4e;">  <p>warning</p></div>/* danger */<div  class="note icon custom iconfont icon-QQ2"  style="background: #fcf1f2;border-left-color: #d9534f;">  <p>danger</p></div><div class="snote red"><p>默认red</p></div><div class="snote quote"><p>quote</p></div><div class="snote info"><p>info</p></div><div class="snote done"><p>done</p></div><div class="snote success"><p>success</p></div><div class="snote danger"><p>danger</p></div><div class="snote error"><p>error</p></div><div class="snote radiation"><p>radiation</p></div><div class="snote bug"><p>bug</p></div><div class="snote idea yellow"><p>idea-yellow</p></div><div class="snote link blue"><p>link- blue</p></div><div class="snote paperclip"><p>paperclip</p></div><div class="snote todo"><p>todo</p></div><div class="snote msg cyan"><p>msg cyan</p></div><div class="snote guide"><p>guide</p></div><div class="snote download"><p>download</p></div><div class="snote up"><p>up</p></div><div class="snote undo"><p>undo</p></div>/* 引用 */<div class="snote quote"><p class='p subtitle'>小标题</p><p>这是个引用</p></div>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签外挂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + Github 搭建博客</title>
      <link href="posts/11761234/"/>
      <url>posts/11761234/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-Github-搭建博客"><a href="#Hexo-Github-搭建博客" class="headerlink" title="Hexo + Github 搭建博客"></a>Hexo + Github 搭建博客</h1><p>一开始接触写博客，还是在之前找工作的时候，大家都说这样子可以成为一个加分项，但当时虽然找工作很不顺利，也没选择这样做，反倒现在逐渐安定下来，倒是想起来这事情了。哈哈，并不是为了以后跳槽，主要原因还是觉得这事情很酷炫，其次就是想记录自己的成长过程，再就是记录一下学习和工作上的小问题。</p><p>好了，废话不多说，现在开始了。本篇教程的详略程度，完全依据我自己实际配置过程中的问题来的。</p><h2 id="准备工作（环境配置）"><a href="#准备工作（环境配置）" class="headerlink" title="准备工作（环境配置）"></a>准备工作（环境配置）</h2><p>所需环境有： <code>Node</code>, <code>Git</code></p><p>其他准备条件有：<code>Github</code> 账号</p><ol><li><p>从<a href="https://nodejs.org/en/">官网</a>下载 Node，最新版即可，LTS 版本</p><p> <img src="https://z3.ax1x.com/2021/03/31/cARK2R.png" alt="node下载"></p></li><li><p>从<a href="https://git-scm.com/">官网</a>下载 git，最新版即可</p><p> <img src="https://z3.ax1x.com/2021/03/31/cARBsP.png" alt="git 下载"></p></li><li><p> 按住 Win + x 键，打开 <code>Windows PowerShell管理员</code> ，或者 Win + s 键，输出 <code>Windows PowerShell</code> 打开</p></li><li><p>依次输入以下命令，并回车</p> <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node <span class="literal">-v</span></span><br><span class="line">npm <span class="literal">-v</span></span><br><span class="line">git</span><br></pre></td></tr></table></figure><p> 如果每一步都正常有输出，那就下一步</p><blockquote><p>   如果出现红字显示</p><p>  <span style="color: red">无法将“node”项识别为 cmdlet、函数、脚本文件或可运行程序的名称。请检查名称的拼写，如果包括路径，<br>  请确保路径正确，然后再试一次。</span></p><p>  那么自行搜索<a href="https://www.baidu.com/s?ie=UTF-8&wd=Windows%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">Windows如何配置环境变量</a>，配置好 <code>Node</code> 或者 <code>Git</code> 的环境变量之后，下一步</p></blockquote></li><li><p> 打开 <a href="https://github.com/">GitHub</a> 注册账号，如果无法打开 <a href="https://github.com/">GitHub</a> ，那就点击右上角的 <span style="color:red"> X </span> 放弃该教程</p></li></ol><h2 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h2><ol><li><p>在 <code>PowerShell</code> 中依次执行</p> <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack <span class="literal">-g</span></span><br><span class="line">npm install <span class="literal">-g</span> hexo<span class="literal">-cli</span></span><br></pre></td></tr></table></figure><p> 如果有提示 error，自行<a href="https://www.baidu.com/">百度</a></p></li><li><p>在任意位置新建文件夹（最好不要在 C 盘），（任意命名，博主默认为 Blog 文件夹）</p><p> 然后在该文件夹内部上方的导航栏里，输入 <code>PowerShell</code> 并回车，或者一只手按住 shift 键，一只手右击文件夹内空白区域，选择 <code>在此处打开 PowerShell</code>，或者选择 <code>在此处打开 cmd</code></p></li><li><p>接着在上一步弹出的命令行窗口中，输入</p> <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure></li></ol><p>​    </p><h2 id="绑定-Git-仓库"><a href="#绑定-Git-仓库" class="headerlink" title="绑定 Git 仓库"></a>绑定 Git 仓库</h2><p>在前面已经提到过，要注册 <a href="https://github.com/">GitHub</a> 账号，现在就需要这个了</p><ol><li><p> 打开 <a href="https://github.com/">GitHub</a> 并登录，点击右上角头像旁边的 + ，选择 <code>New repository</code></p></li><li><p>此时跳转到一个新建仓库的界面</p><p> 在 <code>Repository name</code> 下输入 <code>xxx.github.io</code> </p><p> 其中 <code>xxx</code> 是你的用户名</p> <div class="note warning flat"><p>这个命名很重要，博主就是因为这一步没设置对，浪费了很多时间</p><p>输入完之后直接确认就行，不需要更改其他的设置</p></div></li><li><p> 此时回到之前建立的文件夹中，右键选择 <code>Git Bash Here</code> </p></li><li><p>在执行完上述第二步后，会跳转到一个新的页面</p><p> 会出现类似如下的命令</p><p> <img src="https://z3.ax1x.com/2021/03/31/cA4G6A.png" alt="git 命令"></p><p> 依次在第三步弹出的命令行窗口中，输入以上命令即可</p><blockquote><p>  <span style="color:purple">在执行 <code>git commit</code> 或者 <code>git push</code> 这一行命令的时候，会让你输入 email，username </span></p><p>  按照提示，执行 </p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &#39;your email&#39;</span><br><span class="line">git config --global user.username &#39;your username&#39;</span><br></pre></td></tr></table></figure><p>   其中引号内的部分，分别替换成注册 GitHub 时用的，邮箱和用户名即可</p><p>  之后还会有登陆验证，正常操作就行</p></blockquote><p> 此时记住，倒数第二条命令中，<code>https</code> 的部分就是你新建的仓库 url 地址，之后还会用到</p></li><li><p>此时，在切换回先前打开的 PowerShell 或者 cmd 界面，（貌似 Git 命令行执行 <code>hexo</code> 需要重新配置，所以此处没有采用）</p><p> 依次输入</p> <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p> 如果每一步都运行正确，那么在最后应该会显示一行</p><blockquote><p>  <code>INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</code></p></blockquote><p> 按住 Ctrl 键，点击那个 <a href="http://localhost:4000/">http://localhost:4000</a></p><p> 此时如果在浏览器自动打开了一个新的正常能访问的页面，那么恭喜你现在已经成功了一大半了！就差临门一脚了！</p></li><li><p> 好好欣赏一下新打开的页面，这就是你之后搭建成功后的博客的样子！欣赏完了之后，我们再回到刚刚的命令行界面，按住 Ctrl + C 退出，由于该网站此时还不能在公网上访问，所以需要我们接着进行最后一点设置！</p></li></ol><h2 id="将-Hexo-部署到-Github"><a href="#将-Hexo-部署到-Github" class="headerlink" title="将 Hexo 部署到 Github"></a>将 Hexo 部署到 Github</h2><ol><li><p>打开上面新建的 Blog 文件夹，用记事本打开里面的 <code>_config.yml</code> 文件，在文件最后添加以下内容</p> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: &lt;url&gt;  #你的仓库地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p> 注意要将上述的 &lt;url&gt; 替换为 你的仓库地址，应该是形如这个样子</p><p> <code>https://github.com/xxx/xxx.github.io.git</code></p><p> 其中 <code>xxx</code> 是你在 GitHub 的用户名</p><p> 注意冒号后面都要有一个空格</p></li><li><p>再回到刚刚打开的 PowerShell 命令行，输入</p> <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-deployer</span><span class="literal">-git</span> -<span class="literal">-save</span></span><br></pre></td></tr></table></figure></li><li><p>最后依次输入</p> <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p> 执行完毕后，打开 <code>https://xxx.github.io</code> 就可以看到你的博客界面了。（将 <code>xxx</code> 替换成你的用户名）</p><p> Congratulation！</p><h2 id="使用个人域名"><a href="#使用个人域名" class="headerlink" title="使用个人域名"></a>使用个人域名</h2><blockquote><p>  2021.06.25 补充</p></blockquote><p> 可以注意到，今后访问自己的个人博客都需要输入 <code>.github.io</code> 后缀，体验不是很好，如果你的用户名很长的话，那就更加糟糕了。</p><p> 试想如果可以输入这样的域名 <a href="https://luoxin.vip/">luoxin.vip</a>，岂不是很爽？</p><p> 于是咱说干就干！</p><blockquote><p>  首先说明，其实购买一般的域名真不贵，一年在30以内，像一些 <code>.top</code>, <code>.xyz</code> 等域名更是很便宜，一年只需要5块钱。</p></blockquote><ol><li><p>首先打开命令行工具，``Powershell<code>或者</code>CMD<code>执行以下命令（注意将</code>username` 替换为自己的用户名）</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping username.github.io</span><br></pre></td></tr></table></figure><p> 得到如下输出</p><p> <img src="https://gitee.com/xinlx/pic/raw/master/ping.png" alt="image-20210625210821211"></p><p> 其中 <code>[185.***.***.***]</code> 就是博客的公网 ip 了，记住这个。</p></li><li><p> 接着搜索 ”域名注册“，然后找到腾讯云或者阿里云，选择合适的进行购买（需要进行实名认证）。</p></li><li><p>购买完成后，应该会进入控制台，选择 我的域名 -&gt; 解析</p><p> <img src="https://gitee.com/xinlx/pic/raw/master/%E5%9F%9F%E5%90%8D%E6%B3%A8%E5%86%8C.png"></p><p> 接着进入一个新的界面，点击快速添加解析，输入刚刚在第 1 步得到的 ip 地址即可，（也可点击添加记录）。</p><p> <img src="https://gitee.com/xinlx/pic/raw/master/jiexi.png" alt="image-20210625211223283"></p></li><li><p> 在博客文件的根目录，找到 source 文件夹</p></li></ol><p> <img src="https://gitee.com/xinlx/pic/raw/master/20210625211704127.png" alt="image-20210625211704127"></p><p> ​    在里面添加一个名为 <code>CNAME</code> 的文件，文件内容为第 2 步中注册的域名，如 <a href="https://luoxin.vip/"><code>luoxin.vip</code></a></p><blockquote><p>  不会的同学，可以先新建名为 <code>CNAME.txt</code> 的文件，然后用记事本打开，输入域名，保存后，重命名为 <code>CNAME</code></p></blockquote><ol start="5"><li><p> 保存之后，接着在 <code>Powershell</code> 或者 <code>CMD</code> 依次执行以下命令 <code>hexo g</code>，<code>hexo d</code></p></li><li><p>最后一步，打开 github 里，个人博客对应的 repository，打开 setting -&gt; pages</p><p> <img src="https://gitee.com/xinlx/pic/raw/master/0210625212541095.png" alt="image-20210625212541095"></p><p> 在 <code>Custom domain</code> 处输入自己的域名</p></li><li><p> 至此大功告成！！！！！！</p></li></ol><hr><p> 此时搭建网站的过程已基本完成，接下来，你可以查阅 <a href="https://hexo.io/zh-cn/docs/">Hexo</a> 文档来进一步优化、美化！</p><p> 感谢阅读！如安装过程有任何问题，欢迎讨论！</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 搭建博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>友情链接</title>
      <link href="link/index.html"/>
      <url>link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="categories/index.html"/>
      <url>categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>时间轴</title>
      <link href="archives/index.html"/>
      <url>archives/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>about</title>
      <link href="about/index.html"/>
      <url>about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>说说</title>
      <link href="shuoshuo/index.html"/>
      <url>shuoshuo/index.html</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="https://unpkg.com/artitalk"></script><div id="artitalk_main"></div><script>new Artitalk({    appId: 'VcvDAgahQbcC74INLzSnxXwn-MdYXbMMI',    appKey: '44QnR7DVAFgKzf8jxwLfsnCX',})</script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="tags/index.html"/>
      <url>tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
